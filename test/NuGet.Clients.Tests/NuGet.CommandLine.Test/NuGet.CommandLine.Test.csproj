<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>$(NETFXTargetFramework)</TargetFramework>
    <Description>An end-to-end test suite for NuGet.CommandLine. Contains tests for every nuget.exe CLI command. Overlaps in tests with NuGet.CommandLine.FuncTest.</Description>
    <TestProjectType Condition="'$(IsXPlat)' != 'true'">Functional</TestProjectType>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System.IO.Compression" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\..\src\NuGet.Clients\NuGet.CommandLine\NuGet.CommandLine.csproj" />
    <ProjectReference Include="..\..\NuGet.Core.Tests\NuGet.Configuration.Test\NuGet.Configuration.Test.csproj" />
    <ProjectReference Include="..\..\TestExtensions\SampleCommandLineExtensions\SampleCommandLineExtensions.csproj"
                      ReferenceOutputAssembly="false"
                      OutputItemType="SampleCommandLineExtensionsOutputGroup" />
    <ProjectReference Include="..\..\TestExtensions\TestablePluginCredentialProvider\TestableCredentialProvider.csproj"
                      ReferenceOutputAssembly="false"
                      OutputItemType="TestableCredentialProviderOutputGroup" />
    <ProjectReference Include="..\..\TestUtilities\Test.Utility\Test.Utility.csproj" />
  </ItemGroup>
  
  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Framework" ExcludeAssets="Runtime" />
    <PackageReference Include="Microsoft.NET.StringTools" ExcludeAssets="Runtime" />
    <PackageReference Include="Microsoft.TestPlatform.Portable" IncludeAssets="None" />
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="compiler\resources\*" />
    <EmbeddedResource Include="compiler\resources\*" />
    <Content Include="$(PkgMicrosoft_TestPlatform_Portable)\tools\net451\**"
             TargetPath="vstest\%(RecursiveDir)%(Filename)%(Extension)"
             DestinationSubDirectory="vstest\"
             CopyToOutputDirectory="PreserveNewest"
             Visible="false"
             Condition="'$(PkgMicrosoft_TestPlatform_Portable)' != ''" />
    <None Include="xunit.runner.json"
          CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="TestResource.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>TestResource.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="TestResource.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>TestResource.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <Target Name="AddProjectReferenceFilesToOutputDirectory" AfterTargets="ResolveProjectReferences">
    <ItemGroup>
      <ProjectReferenceFiles Include="@(SampleCommandLineExtensionsOutputGroup)"
                             DestinationSubDirectory="NuGet\" />
      <ProjectReferenceFiles Include="$(ArtifactsDirectory)$(VsixOutputDirName)\NuGet.exe"
                             DestinationSubDirectory="NuGet\"
                             Condition="'$(SkipILMergeOfNuGetExe)' != 'true'" />
      <ProjectReferenceFiles Include="%(TestableCredentialProviderOutputGroup.RootDir)\%(TestableCredentialProviderOutputGroup.Directory)**"
                             DestinationSubDirectory="TestableCredentialProvider\" />
      
      <Content Include="@(ProjectReferenceFiles)"
               TargetPath="%(DestinationSubDirectory)%(RecursiveDir)%(Filename)%(Extension)"
               CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>
  
  <Target Name="CopyFinalNuGetExeToOutputPath"
          AfterTargets="PrepareForRun"
          Inputs="$(ArtifactsDirectory)$(VsixOutputDirName)\NuGet.exe"
          Outputs="$(OutputPath)NuGet\NuGet.exe"
          Condition="'$(SkipILMergeOfNuGetExe)' != 'true'">
    <Copy SourceFiles="$(ArtifactsDirectory)$(VsixOutputDirName)\NuGet.exe"
          DestinationFiles="$(OutputPath)NuGet\NuGet.exe"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyLocalIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyLocalIfPossible)">
      <Output TaskParameter="DestinationFiles"
              ItemName="FileWritesShareable" />
      <Output TaskParameter="CopiedFiles"
              ItemName="ReferencesCopiedInThisBuild" />
    </Copy>
  </Target>
</Project>
