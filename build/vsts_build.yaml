name: $(SourceBranchName)-$(Date:yyyyMMdd)-$(rev:rr)
phases:

- phase: Initialize_Build
  queue:
    name: VSEng-MicroBuildVS2017
    timeoutInMinutes: 60
    demands: 
      - DotNetFramework
      - msbuild
  
  steps:
  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        InitializeAllTestsToPending -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -CommitSha $(Build.SourceVersion)
  
  - task: PowerShell@1
    displayName: "Update Build Number"
    name: "updatebuildnumber"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        $revision = Get-Content $env:BUILDCOUNTERFILE
        $newBuildCounter = [System.Decimal]::Parse($revision)
        $newBuildCounter++
        Set-Content $env:BUILDCOUNTERFILE $newBuildCounter
        $msbuildExe = 'C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\bin\msbuild.exe'
        $productVersion = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetSemanticVersion
        $productVersion = $productVersion.Trim()
        $FullBuildNumber = "$productVersion.$newBuildCounter"
        Write-Host "##vso[build.updatebuildnumber]$FullBuildNumber"
        Write-Host "##vso[task.setvariable variable=BuildNumber;isOutput=true]$newBuildCounter"
        Write-Host "##vso[task.setvariable variable=FullVstsBuildNumber;isOutput=true]$FullBuildNumber"

  - task: PowerShell@1
    displayName: "Add Build Tags"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.addbuildtag]$env:BUILD_SOURCEVERSIONAUTHOR"
        Write-Host "##vso[build.addbuildtag]$env:BUILD_SOURCEBRANCHNAME" 

- phase: Build_and_UnitTest
  dependsOn: Initialize_Build
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
  queue:
    name: VSEng-MicroBuildVS2017
    timeoutInMinutes: 90
    parallel: 2
    matrix:
      RTM:
        BuildRTM: "true"
      NonRTM:
        BuildRTM: "false"
    demands: 
      - DotNetFramework
      - msbuild

  steps:  
  - task: PowerShell@1
    displayName: "Update Build Number"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
        gci env:* | sort-object name

  - task: NuGetToolInstaller@0
    displayName: "Use NuGet 4.6.2"
    inputs:
      versionSpec: "4.6.2"

  - task: PowerShell@1
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
      arguments: "-Force"
    displayName: "Run Configure.ps1"

  - task: PowerShell@1
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\ConfigureVstsBuild.ps1"
      arguments: "-BuildCounterFile $(BuildCounterFile) -BuildInfoJsonFile $(BuildInfoJsonFile) -BuildRTM $(BuildRTM) -SkipUpdateBuildNumber"
    displayName: "Configure VSTS CI Environment"

  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        gci env:* | sort-object name

  - task: MicroBuildLocalizationPlugin@1
    displayName: "Install Localization Plugin"

  - task: MicroBuildSigningPlugin@1
    inputs:
      signType: "$(SigningType)"
      esrpSigning: "true"
    displayName: "Install Signing Plugin"

  - task: MicroBuildSwixPlugin@1
    displayName: "Install Swix Plugin"

  - task: MSBuild@1
    displayName: "Restore for VS2017"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreVS15 /p:BuildNumber=$(BuildNumber) /p:BuildRTM=$(BuildRTM) /v:m"

  - task: MSBuild@1
    displayName: "Build for VS2017"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:BuildVS15NoVSIX /p:NUGET_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\35MSSharedLib1024.snk /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(BuildNumber)"

  - task: MSBuild@1
    displayName: "Run unit tests"
    continueOnError: "true"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:CoreUnitTests;UnitTestsVS15 /p:NUGET_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\35MSSharedLib1024.snk  /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(BuildNumber) /p:TestResultOutputFormat=xml"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      testRunTitle: "NuGet.Client Unit Tests On Windows"
      searchFolder: "$(Build.Repository.LocalPath)\\build\\TestResults"
      mergeTestResults: "true"
      publishRunAttachments: "false"
    condition: "and(succeededOrFailed(),eq(variables['BuildRTM'], 'true'))"

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      scriptType: "inlineScript"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Unit Tests On Windows"
    condition: "and(always(),eq(variables['BuildRTM'], 'true'))"

  - task: PublishBuildArtifacts@1
    displayName: "Publish NuGet.CommandLine.Test as artifact"
    inputs:
      PathtoPublish: "$(Build.Repository.LocalPath)\\test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\bin\\$(BuildConfiguration)\\net472\\win7-x64"
      ArtifactName: "NuGet.CommandLine.Test"
      ArtifactType: "Container"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

  - task: MSBuild@1
    displayName: "Localize Assemblies"
    inputs:
      solution: "build\\loc.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Sign Assemblies"
    inputs:
      solution: "build\\sign.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild"

  - task: MSBuild@1
    displayName: "Pack Nupkgs"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:Pack /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:BuildNumber=$(BuildNumber)"

  - task: MSBuild@1
    displayName: "Pack VSIX"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:BuildVS15VSIX /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:IsCIBuild=true"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

  - task: MSBuild@1
    displayName: "Generate Build Tools package"
    inputs:
      solution: "setup/Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/p:BuildNumber=$(BuildNumber) /p:IsVsixBuild=true"
    condition: " and(succeeded(), eq(variables['BuildRTM'], 'false'))"

  - task: MSBuild@1
    displayName: "Sign Nupkgs and VSIX"
    inputs:
      solution: "build\\sign.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild /p:SignPackages=true"

  - task: NuGetCommand@2
    displayName: "Verify Nupkg Signatures"
    inputs:
      command: "custom"
      arguments: "verify -Signatures $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)\\*.nupkg"

  - task: ms-vseng.MicroBuildShipTasks.7c429315-71ba-4cb3-94bb-f829c95f7915.MicroBuildCodesignVerify@1
    displayName: Verify Assembly Signatures and StrongName
    inputs:
      TargetFolder: '$(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)'
  
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

  - task: CopyFiles@2
    displayName: "Copy Nupkgs"
    inputs:
      SourceFolder: "artifacts\\$(NupkgOutputDir)"
      Contents: "*.nupkg"
      TargetFolder: "$(BuildOutputTargetPath)\\artifacts\\$(VsixPublishDir)\\$(NupkgOutputDir)"

  - task: MSBuild@1
    displayName: "Generate VSMAN file for NuGet Core VSIX"
    inputs:
      solution: "setup\\Microsoft.VisualStudio.NuGet.Core.vsmanproj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Generate VSMAN file for Build Tools VSIX"
    inputs:
      solution: "setup\\Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: PowerShell@1
    displayName: "Create EndToEnd Test Package"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\CreateEndToEndTestPackage.ps1"
      arguments: "-c $(BuildConfiguration) -tv 15 -out $(Build.Repository.LocalPath)\\artifacts\\VS15 -NuGetToolsPath $(NuGetCIToolsFolder)"
      failOnStandardError: "false"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: CopyFiles@2
    displayName: "Copy NuGet.exe, VSIX and EndToEnd"
    inputs:
      SourceFolder: "artifacts"
      Contents: |
        $(VsixPublishDir)\\NuGet.exe
        $(VsixPublishDir)\\NuGet.pdb
        $(VsixPublishDir)\\NuGet.Mssign.exe
        $(VsixPublishDir)\\NuGet.Mssign.pdb
        $(VsixPublishDir)\\Microsoft.VisualStudio.NuGet.Core.json 
        $(VsixPublishDir)\\NuGet.Tools.vsix
        $(VsixPublishDir)\\Microsoft.VisualStudio.NuGet.BuildTools.vsix
        $(VsixPublishDir)\\Microsoft.VisualStudio.NuGet.BuildTools.json
        $(VsixPublishDir)\\EndToEnd.zip 
      TargetFolder: "$(BuildOutputTargetPath)\\artifacts"

  - task: PublishBuildArtifacts@1
    displayName: "Publish NuGet.exe VSIX and EndToEnd.zip as artifact"
    inputs:
      PathtoPublish: "$(Build.Repository.LocalPath)\\artifacts\\$(VsixPublishDir)"
      ArtifactName: "VS15"
      ArtifactType: "Container"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

  - task: CopyFiles@2
    displayName: "Copy LCG Files"
    inputs:
      SourceFolder: "artifacts\\"
      Contents: "**\\*.lcg"
      TargetFolder: "$(CIRoot)\\PLOC\\$(Build.SourceBranchName)\\$(Build.BuildNumber)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "

  - task: PowerShell@1
    displayName: "Publish Artifacts to MyGet"
    continueOnError: "true"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\PublishArtifactsFromVsts.ps1"
      arguments: "-NuGetBuildFeedUrl $(NuGetBuildFeed) -NuGetBuildSymbolsFeedUrl $(NuGetBuildSymbolsFeed) -DotnetCoreFeedUrl $(DotnetCoreBuildFeed) -DotnetCoreSymbolsFeedUrl $(DotnetCoreSymbolsFeed) -NuGetBuildFeedApiKey $(NuGetBuildApiKey) -DotnetCoreFeedApiKey $(DotnetCoreFeedApiKey)"
      failOnStandardError: "true"
    condition: " and(succeeded(),eq(variables['PublishArtifactsToMyGet'], 'true'), eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Collect Build Symbols"
    inputs:
      solution: "build\\symbols.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/p:IsSymbolBuild=true"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "
    
  - task: CopyFiles@2
    displayName: "Copy Symbols"
    inputs:
      SourceFolder: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
      Contents: "**\\*"
      TargetFolder: "$(BuildOutputTargetPath)\\symbols"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "      

  - task: ms-vscs-artifact.build-tasks.artifactSymbolTask-1.artifactSymbolTask@0
    displayName: "Publish Symbols on Symweb"
    inputs:
      symbolServiceURI: "https://microsoft.artifacts.visualstudio.com/DefaultCollection"
      requestName: "CollectionId/$(System.CollectionId)/ProjectId/$(System.TeamProjectId)/$(TeamName)/BuildId/$(Build.BuildId)"
      sourcePath: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
      detailedLog: "true"
      expirationInDays: "45"
      usePat: "false"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "  	

  - task: MicroBuildUploadVstsDropFolder@1
    displayName: "Upload VSTS Drop"
    inputs:
      DropFolder: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: PowerShell@1
    displayName: "Validate VSIX Localization"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
      arguments: "-BuildRTM $(BuildRTM) -BuildOutputTargetPath $(BuildOutputTargetPath) -ValidateVsix"
    condition: " and(succeeded(), eq(variables['IsOfficialBuild'], 'true')) "
  
  - task: PowerShell@1
    displayName: "Validate Repository Artifacts Localization"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
      arguments: "-BuildRTM $(BuildRTM) -BuildOutputTargetPath $(BuildOutputTargetPath)"
    condition: " and(succeeded(), eq(variables['IsOfficialBuild'], 'true')) "

  - task: MicroBuildCleanup@1
    displayName: "Perform Cleanup Tasks"

  - task: PowerShell@1
    displayName: "Cleanup on Failure"
    inputs:
      scriptType: "inlineScript"
      arguments: "-BuildOutputTargetPath $(BuildOutputTargetPath)"
      inlineScript: |
        param([string]$BuildOutputTargetPath)
        Get-ChildItem $(BuildOutputTargetPath) -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
        Remove-Item -Path $(BuildOutputTargetPath) -Force -Recurse -ErrorAction SilentlyContinue
    condition: "eq(variables['Agent.JobStatus'], 'Failed')"

- phase: Functional_Tests_On_Windows
  dependsOn: Initialize_Build
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
  condition: "and(succeeded(),eq(variables['RunFunctionalTestsOnWindows'], 'true')) "  	
  queue:
    name: VSEng-MicroBuildSxS
    timeoutInMinutes: 120
    demands: 
        - DotNetFramework
        - msbuild

  steps:
  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
        gci env:* | sort-object name

  - task: PowerShell@1
    displayName: "Download Config Files"
    enabled: "false"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        $url = $(VstsConfigFileRootUrl) -f 'NuGet.Core.FuncTests.Config'
        Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Core.FuncTests.Config
        $url = $(VstsConfigFileRootUrl) -f 'NuGet.Protocol.FuncTest.Config'
        Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Protocol.FuncTest.Config

  - task: PowerShell@1
    displayName: "Run Configure.ps1"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
      arguments: "-Force -CleanCache"

  - task: MSBuild@1
    displayName: "Restore for VS2017"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreVS15 /p:BuildNumber=$(BuildNumber) /p:BuildRTM=false /v:m"

  - task: MSBuild@1
    displayName: "Run Functional Tests"
    continueOnError: "true"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:CoreFuncTests  /p:BuildRTM=false  /p:BuildNumber=$(BuildNumber) /p:TestResultOutputFormat=xml /p:NUGET_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\35MSSharedLib1024.snk"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    continueOnError: "true"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(Build.Repository.LocalPath)\\build\\TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Functional Tests On Windows"
    condition: "succeededOrFailed()"

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      scriptType: "inlineScript"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -CommitSha $(Build.SourceVersion) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -TestName "Functional Tests On Windows"
    condition: "always()"

- phase: Tests_On_Linux
  dependsOn: Initialize_Build
  variables:
    FULLVSTSBUILDNUMBER: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
  condition: "and(succeeded(),eq(variables['RunTestsOnLinux'], 'true')) "  	
  queue:
    name: DDNuGet-Linux
    timeoutInMinutes: 60
    demands: sh

  steps:
  - task: PowerShell@2
    displayName: "Update Build Number"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "##vso[build.updatebuildnumber]$env:FULLVSTSBUILDNUMBER"
      failOnStderr: "true"
    condition: "always()"

  - task: ShellScript@2
    displayName: "Run Tests"
    continueOnError: "true"
    inputs:
      scriptPath: "scripts/funcTests/runFuncTests.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    condition: "succeededOrFailed()"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      testRunTitle: "NuGet.Client Tests On Linux"
      searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
      mergeTestResults: "true"

  - task: PowerShell@2
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      targetType: "inline"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      script: |
        . $(Build.Repository.LocalPath)/scripts/utils/PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Tests On Linux"        
      failOnStderr: "true"
    condition: "always()"

- phase: Tests_On_Mac
  dependsOn:
  - Build_and_UnitTest
  - Initialize_Build
  variables:
    FULLVSTSBUILDNUMBER: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
  condition: "and(succeeded(),eq(variables['RunTestsOnMac'], 'true')) "  	
  queue:
    name: VSEng-MicroBuildMacSierra
    timeoutInMinutes: 75
    demands: sh

  steps:
  - task: PowerShell@2
    displayName: "Update Build Number"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "##vso[build.updatebuildnumber]$env:FULLVSTSBUILDNUMBER"
      failOnStderr: "true"
    condition: "always()"

  - task: DownloadBuildArtifacts@0
    displayName: "Download NuGet.ComamandLine.Test artifacts"
    inputs:
      artifactName: "NuGet.CommandLine.Test"
      downloadPath: "$(Build.Repository.LocalPath)/artifacts"

  - task: ShellScript@2
    displayName: "Run Tests"
    continueOnError: "true"
    inputs:
      scriptPath: "scripts/funcTests/runFuncTests.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Tests On Mac"
    condition: "succeededOrFailed()"

  - task: PowerShell@2
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      targetType: "inline"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      script: |
        . $(Build.Repository.LocalPath)/scripts/utils/PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Tests On Mac"        
      failOnStderr: "true"
    condition: "always()"

- phase: End_To_End_Tests_On_Windows
  dependsOn:
  - Build_and_UnitTest
  - Initialize_Build
  variables:
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
  condition: "and(succeeded(),eq(variables['RunEndToEndTests'], 'true')) "  	
  queue:
    timeoutInMinutes: 90
    name: DDNuGet-Windows
    demands: DotNetFramework

  steps:
  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
        gci env:* | sort-object name      

  - task: DownloadBuildArtifacts@0
    displayName: "Download Build artifacts"
    inputs:
      artifactName: "VS15"
      downloadPath: "$(Build.Repository.LocalPath)/artifacts"

  - task: PowerShell@1
    displayName: "Bootstrap.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/Bootstrap.ps1"
      arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -verbose"

  - task: PowerShell@1
    displayName: "SetupFunctionalTests.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\SetupFunctionalTests.ps1"

  - task: PowerShell@1
    displayName: "CopyToolsAndSetupMachine.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\CopyToolsAndSetupMachine.ps1"
      arguments: " -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts"

  - task: PowerShell@1
    displayName: "InstallNuGetVSIX.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\InstallNuGetVSIX.ps1"
      arguments: "-NuGetDropPath $(System.DefaultWorkingDirectory)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -NuGetVSIXID $(NuGetVsixId) -ProcessExitTimeoutInSeconds 180 -VSVersion 16.0"
      failOnStandardError: "false"

  - task: PowerShell@1
    displayName: "Collect VS Logs"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Invoke-WebRequest -Uri $(CollectExeUrl) -OutFile $(System.DefaultWorkingDirectory)\\VSCollect.exe
        $(System.DefaultWorkingDirectory)\\VSCollect.exe -zip:$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\e2e-collectlogs.zip
    condition: "failed()"

  - task: PowerShell@1
    displayName: "RunFunctionalTests.ps1"    
    timeoutInMinutes: 75
    continueOnError: "true"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\RunFunctionalTests.ps1"
      arguments: "-PMCCommand $(EndToEndTestCommandToRun) -PMCLaunchWaitTimeInSecs 30 -EachTestTimoutInSecs 600 -NuGetDropPath $(System.DefaultWorkingDirectory)\\artifacts -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -RunCounter $(Build.BuildNumber) -VSVersion 16.0"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "JUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(System.DefaultWorkingDirectory)\\testresults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client EndToEnd Tests On Windows"
    condition: "succeededOrFailed()"

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      scriptType: "inlineScript"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "EndToEnd Tests On Windows"
    condition: "always()"

  - task: PowerShell@1
    displayName: "Kill running instances of DevEnv"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\e2etests\\VSUtils.ps1
        KillRunningInstancesOfVS
    condition: "always()"

- phase: Apex_Tests_On_Windows
  dependsOn:
  - Build_and_UnitTest
  - Initialize_Build
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
  condition: "and(succeeded(),eq(variables['RunApexTests'], 'true')) "  	
  queue:
    name: DDNuGet-Windows
    demands: DotNetFramework

  steps:
  - checkout: self
    clean: true
    submodules: true
    
  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
        gci env:* | sort-object name

  - task: DownloadBuildArtifacts@0
    displayName: "Download Build artifacts"
    inputs:
      artifactName: "VS15"
      downloadPath: "$(Build.Repository.LocalPath)/artifacts"
        
  - task: NuGetToolInstaller@0
    displayName: "Use NuGet 4.5.0"
    inputs:
      versionSpec: "4.5.0"

  - task: NuGetCommand@2
    displayName: "Download packages.config packages"
    inputs:
      restoreSolution: ".nuget/packages.config"
      feedsToUse: "config"
      nugetConfigPath: "NuGet.Config"
      restoreDirectory: "$(System.DefaultWorkingDirectory)/packages"

  - task: PowerShell@1
    displayName: "Bootstrap.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/Bootstrap.ps1"
      arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -verbose"

  - task: PowerShell@1
    displayName: "SetupFunctionalTests.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\SetupFunctionalTests.ps1"
      arguments: "-VSVersion 16.0"

  - task: PowerShell@1
    displayName: "InstallNuGetVSIX.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\InstallNuGetVSIX.ps1"
      arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -NuGetVSIXID $(NuGetVsixId) -ProcessExitTimeoutInSeconds 180 -VSVersion 16.0"
      failOnStandardError: "false"

  # - task: PowerShell@1
  #   displayName: "Collect VS Logs"
  #   inputs:
  #     scriptType: "inlineScript"
  #     inlineScript: |
  #       Invoke-WebRequest -Uri $(CollectExeUrl) -OutFile $(System.DefaultWorkingDirectory)\\VSCollect.exe
  #       if(-not (Test-Path $(EndToEndResultsDropPath)))
  #         {
  #           New-Item -Path $(EndToEndResultsDropPath) -ItemType Directory -Force
  #         }
  #       $(System.DefaultWorkingDirectory)\\VSCollect.exe -zip:$(EndToEndResultsDropPath)\\apex-collectlogs.zip
  #   condition: "failed()"

  - task: MSBuild@1
    displayName: "Restore for VS2017"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreVS15 /p:BuildNumber=$(BuildNumber)"
      
  - task: NuGetCommand@2
    displayName: "Add Apex Feed Source"
    inputs:
      command: "custom"
      arguments: "sources add -Name ApexFeed -Source $(ApexPackageFeedUrl) -UserName $(ApexPackageFeedUsername) -Password $(ApexPackageFeedPassword) -ConfigFile $(System.DefaultWorkingDirectory)\\NuGet.config"

  - task: MSBuild@1
    displayName: "Restore Apex Tests"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreApex /p:BuildNumber=$(BuildNumber)"

  - task: MSBuild@1
    displayName: "Run Apex Tests"
    timeoutInMinutes: 45
    continueOnError: "true"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:ApexTestsStandalone /p:TestResultOutputFormat=xml  /p:NUGET_PFX_PATH=$(System.DefaultWorkingDirectory)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(System.DefaultWorkingDirectory)\\keys\\35MSSharedLib1024.snk /p:BuildNumber=$(BuildNumber)"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(System.DefaultWorkingDirectory)\\build\\TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Apex Tests On Windows"
    condition: "succeededOrFailed()"

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Apex Tests On Windows"
    condition: "always()"

  - task: PowerShell@1
    displayName: "Kill running instances of DevEnv"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\e2etests\\VSUtils.ps1
        KillRunningInstancesOfVS
    condition: "always()"
    
    
