name: $(SourceBranchName)-$(Date:yyyyMMdd)-$(rev:rr)
phases:
- phase: Build_and_UnitTest

  queue:
    name: VSEng-MicroBuildVS2017
    timeoutInMinutes: 90
    parallel: 2
    matrix:
      RTM:
        BuildRTM: "true"
      NonRTM:
        BuildRTM: "false"
    demands: 
      - DotNetFramework
      - msbuild


  steps:
  - task: PowerShell@1
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
      arguments: "-Force -CI"
    displayName: "Run Configure.ps1"

  - task: PowerShell@1
    name: configuration
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\ConfigureVstsBuild.ps1"
      arguments: "-BuildCounterFile $(BuildCounterFile) -BuildInfoJsonFile $(BuildInfoJsonFile) -BuildRTM $(BuildRTM)"
    displayName: "Configure VSTS CI Environment"

  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: "gci env:* | sort-object name"    

  - task: MicroBuildLocalizationPlugin@1
    displayName: "Install Localization Plugin"

  - task: MicroBuildSigningPlugin@1
    inputs:
      signType: "$(SigningType)"
    displayName: "Install Signing Plugin"

  - task: MicroBuildSwixPlugin@1
    displayName: "Install Swix Plugin"

  - task: CopyFiles@2
    displayName: "Copy Public Key Files"
    inputs:
      SourceFolder: "$(NuGetSharePublicKeys)"
      Contents: "*.snk"
      TargetFolder: "$(Build.Repository.LocalPath)\\keys"
      CleanTargetFolder: "true"
      OverWrite: "true"
      flattenFolders: "true"

  - task: MSBuild@1
    displayName: "Restore for VS2017"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreVS15 /p:BuildNumber=$(Revision) /p:BuildRTM=$(BuildRTM) /v:m"

  - task: MSBuild@1
    displayName: "Build for VS2017"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:BuildVS15NoVSIX /p:NUGET_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\35MSSharedLib1024.snk /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(Revision)"

  - task: MSBuild@1
    displayName: "Run unit tests"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:CoreUnitTests;UnitTestsVS15 /p:NUGET_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\35MSSharedLib1024.snk  /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(Revision) /p:TestResultOutputFormat=xml"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

  - task: PublishTestResults@2
    displayName: "Publish Desktop Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      testRunTitle: "NuGet.Client Unit Tests On Windows"
      searchFolder: "$(Build.Repository.LocalPath)\\artifacts\\TestResults"
      mergeTestResults: "true"
      publishRunAttachments: "false"
    condition: "and(succeededOrFailed(),eq(variables['BuildRTM'], 'true'))"

  - task: PublishTestResults@2
    displayName: "Publish NETCore Test Results"
    inputs:
      testRunner: "VSTest"
      testResultsFiles: "*.trx"
      testRunTitle: "NuGet.Client Unit Tests On Windows"
      searchFolder: "$(Build.Repository.LocalPath)\\artifacts\\TestResults"
      mergeTestResults: "true"
      publishRunAttachments: "false"
    condition: "and(succeededOrFailed(),eq(variables['BuildRTM'], 'true'))"

  - task: PublishBuildArtifacts@1
    displayName: "Publish NuGet.CommandLine.Test as artifact"
    inputs:
      PathtoPublish: "$(Build.Repository.LocalPath)\\test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\bin\\$(BuildConfiguration)\\net46\\win7-x64"
      ArtifactName: "NuGet.CommandLine.Test"
      ArtifactType: "Container"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

  - task: MSBuild@1
    displayName: "Localize Assemblies"
    inputs:
      solution: "build\\loc.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Sign Assemblies"
    inputs:
      solution: "build\\sign.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild"

  - task: MSBuild@1
    displayName: "Pack Nupkgs"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:Pack /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:BuildNumber=$(Revision)"

  - task: CopyFiles@2
    displayName: "Copy Nupkgs"
    inputs:
      SourceFolder: "artifacts\\$(NupkgOutputDir)"
      Contents: "*.nupkg"
      TargetFolder: "$(BuildOutputTargetPath)\\artifacts\\$(VsixPublishDir)\\$(NupkgOutputDir)"

  - task: MSBuild@1
    displayName: "Pack VSIX"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:BuildVS15VSIX /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:IsCIBuild=true"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

  - task: MSBuild@1
    displayName: "Sign VSIX"
    inputs:
      solution: "build\\sign.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild /p:SignVsix=true"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

  - task: MSBuild@1
    displayName: "Generate VSMAN file for VSIX"
    inputs:
      solution: "setup\\Microsoft.VisualStudio.NuGet.Core.vsmanproj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: PowerShell@1
    displayName: "Create EndToEnd Test Package"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\CreateEndToEndTestPackage.ps1"
      arguments: "-c $(BuildConfiguration) -tv 15 -out $(Build.Repository.LocalPath)\\artifacts\\VS15"
      failOnStandardError: "false"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: CopyFiles@2
    displayName: "Copy NuGet.exe, VSIX and EndToEnd"
    inputs:
      SourceFolder: "artifacts"
      Contents: |
        $(VsixPublishDir)\\NuGet.exe
        $(VsixPublishDir)\\NuGet.Mssign.exe
        $(VsixPublishDir)\\NuGet.pdb 
        $(VsixPublishDir)\\Microsoft.VisualStudio.NuGet.Core.json 
        $(VsixPublishDir)\\NuGet.Tools.vsix
        $(VsixPublishDir)\\EndToEnd.zip 
      TargetFolder: "$(BuildOutputTargetPath)\\artifacts"

  - task: MSBuild@1
    displayName: "Generate Build Tools package"
    inputs:
      solution: "setup/Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/p:BuildNumber=$(Revision)"
    condition: " and(succeeded(), eq(variables['BuildRTM'], 'false'))"

  - task: CopyFiles@2
    displayName: "Copy LCG Files"
    inputs:
      SourceFolder: "artifacts\\"
      Contents: "**\\*.lcg"
      TargetFolder: "$(CIRoot)\\PLOC\\$(Build.SourceBranchName)\\$(Build.BuildNumber)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "

  - task: PowerShell@1
    displayName: "Publish Artifacts to MyGet"
    continueOnError: "true"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\PublishArtifactsFromVsts.ps1"
      arguments: "-NuGetBuildFeedUrl $(NuGetBuildFeed) -NuGetBuildSymbolsFeedUrl $(NuGetBuildSymbolsFeed) -DotnetCoreFeedUrl $(DotnetCoreBuildFeed) -DotnetCoreSymbolsFeedUrl $(DotnetCoreSymbolsFeed) -NuGetBuildFeedApiKey $(NuGetBuildApiKey) -DotnetCoreFeedApiKey $(DotnetCoreFeedApiKey)"
      failOnStandardError: "false"
    condition: " and(succeeded(),eq(variables['PublishArtifactsToMyGet'], 'true'), eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Collect Build Symbols"
    inputs:
      solution: "build\\symbols.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "
    
  - task: CopyFiles@2
    displayName: "Copy Symbols"
    inputs:
      SourceFolder: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
      Contents: "**\\*"
      TargetFolder: "$(BuildOutputTargetPath)\\symbols"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "      

  - task: ms-vscs-artifact.build-tasks.artifactSymbolTask-1.artifactSymbolTask@0
    displayName: "Publish Symbols on Symweb"
    inputs:
      symbolServiceURI: "https://microsoft.artifacts.visualstudio.com/DefaultCollection"
      requestName: "CollectionId/$(System.CollectionId)/ProjectId/$(System.TeamProjectId)/$(TeamName)/BuildId/$(Build.BuildId)"
      sourcePath: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
      detailedLog: "true"
      expirationInDays: "45"
      usePat: "false"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "  	

  - task: MicroBuildUploadVstsDropFolder@1
    displayName: "Upload VSTS Drop"
    inputs:
      DropFolder: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: PowerShell@1
    displayName: "Validate VSIX Localization"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
      arguments: "-BuildRTM $(BuildRTM) -BuildOutputTargetPath $(BuildOutputTargetPath) -ValidateVsix"
    condition: " and(succeeded(), eq(variables['IsOfficialBuild'], 'true')) "
  
  - task: PowerShell@1
    displayName: "Validate Repository Artifacts Localization"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
      arguments: "-BuildRTM $(BuildRTM) -BuildOutputTargetPath $(BuildOutputTargetPath)"
    condition: " and(succeeded(), eq(variables['IsOfficialBuild'], 'true')) "

  - task: MicroBuildCleanup@1
    displayName: "Perform Cleanup Tasks"

  - task: PowerShell@1
    displayName: "Cleanup on Failure"
    inputs:
      scriptType: "inlineScript"
      arguments: "-BuildOutputTargetPath $(BuildOutputTargetPath)"
      inlineScript: "param(
[string]$BuildOutputTargetPath
)
Remove-Item -Path $BuildOutputTargetPath -Force -Recurse"
    condition: "eq(variables['Agent.JobStatus'], 'Failed')"


- phase: Functional_Tests_On_Windows
  queue:
    name: VSEng-MicroBuildSxS
    timeoutInMinutes: 120
    demands: 
        - DotNetFramework
        - msbuild

  steps:
  - task: PowerShell@1
    displayName: "Download Config Files"
    enabled: "false"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        $url = $(VstsConfigFileRootUrl) -f 'NuGet.Core.FuncTests.Config'
        Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Core.FuncTests.Config
        $url = $(VstsConfigFileRootUrl) -f 'NuGet.Protocol.FuncTest.Config'
        Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Protocol.FuncTest.Config

  - task: PowerShell@1
    displayName: "Run Configure.ps1"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
      arguments: "-Force -CI"

  - task: MSBuild@1
    displayName: "Restore for VS2017"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreVS15 /p:BuildNumber=$(Revision) /p:BuildRTM=false /v:m"

  - task: MSBuild@1
    displayName: "Run Functional Tests"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:CoreFuncTests  /p:BuildRTM=false  /p:BuildNumber=$(Revision) /p:TestResultOutputFormat=xml"

  - task: PublishTestResults@2
    displayName: "Publish Desktop Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(Build.Repository.LocalPath)\\artifacts\\TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Functional Tests On Windows"
    condition: "succeededOrFailed()"

  - task: PublishTestResults@2
    displayName: "Publish NETCore Test Results"
    inputs:
      testRunner: "VSTest"
      testResultsFiles: "*.trx"
      searchFolder: "$(Build.Repository.LocalPath)\\artifacts\\TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Funtional Tests On Windows"
    condition: "succeededOrFailed()"

- phase: Tests_On_Linux
  queue:
    name: DDNuGet-Linux
    timeoutInMinutes: 45
    demands: sh


  steps:
  - task: ShellScript@2
    displayName: "Run Tests"
    inputs:
      scriptPath: "scripts/funcTests/runFuncTests.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    condition: "succeededOrFailed()"
    inputs:
      testRunner: "VSTest"
      testResultsFiles: "*.trx"
      testRunTitle: "NuGet.Client Tests on Linux"
      searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
      mergeTestResults: "true"

- phase: Tests_On_Mac
  dependsOn: Build_and_UnitTest
  condition: "succeeded()"
  queue:
    name: VSEng-MicroBuildMacSierra
    timeoutInMinutes: 60
    demands: sh


  steps:
  - task: DownloadBuildArtifacts@0
    displayName: "Download NuGet.ComamandLine.Test artifacts"
    inputs:
      artifactName: "NuGet.CommandLine.Test"
      downloadPath: "$(Build.Repository.LocalPath)/artifacts"

  - task: ShellScript@2
    displayName: "Run Tests"
    inputs:
      scriptPath: "scripts/funcTests/runFuncTests.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "VSTest"
      testResultsFiles: "*.trx"
      searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Tests on Mac"
    condition: "succeededOrFailed()"

  - task: PublishTestResults@2
    displayName: "Publish Test Results for Mono"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Tests on Mono for Mac"
    condition: "succeededOrFailed()"


# - phase: End_To_End_Tests_On_Windows
#   dependsOn: Build_and_UnitTest
#   variables:
#     BuildNumber: $[dependencies.Build_and_UnitTest.outputs['RTM.configuration.BuildNumber']]
#   condition: "succeeded()"
#   queue:
#     name: DDNuGet-Windows
#     timeoutInMinutes: 75
#     demands: DotNetFramework


#   steps:
#   - task: PowerShell@1
#     displayName: "Print Environment Variables"
#     inputs:
#       scriptType: "inlineScript"
#       inlineScript: "gci env:* | sort-object name;
#       Write-Host \"##vso[build.updatebuildnumber]$env:BuildNumber\""    

#   - task: PowerShell@1
#     displayName: "Bootstrap.ps1"
#     inputs:
#       scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/Bootstrap.ps1"
#       arguments: "-NuGetDropPath $(BuildOutputTargetPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -verbose"

#   - task: PowerShell@1
#     displayName: "SetupFunctionalTests.ps1"
#     inputs:
#       scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\SetupFunctionalTests.ps1"
#       arguments: "-VSVersion 15.0"

#   - task: PowerShell@1
#     displayName: "CopyToolsAndSetupMachine.ps1"
#     inputs:
#       scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\CopyToolsAndSetupMachine.ps1"
#       arguments: " -NuGetCIToolsFolder $(NuGetCIToolsFolder) -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts"

#   - task: PowerShell@1
#     displayName: "InstallNuGetVSIX.ps1"
#     inputs:
#       scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\InstallNuGetVSIX.ps1"
#       arguments: "-NuGetDropPath $(BuildOutputTargetPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -NuGetVSIXID $(NuGetVsixId) -ProcessExitTimeoutInSeconds 180 -VSVersion 15.0"
#       failOnStandardError: "false"

#   - task: PowerShell@1
#     displayName: "LaunchVS.ps1"
#     inputs:
#       scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\LaunchVS.ps1"
#       arguments: "-VSVersion 15.0 -DTEReadyPollFrequencyInSecs 6 -NumberOfPolls 50"

#   - task: PowerShell@1
#     displayName: "RunFunctionalTests.ps1"
#     inputs:
#       scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\RunFunctionalTests.ps1"
#       arguments: "-PMCCommand $(EndToEndTestCommandToRun) -PMCLaunchWaitTimeInSecs 30 -EachTestTimoutInSecs 600 -NuGetDropPath $(System.DefaultWorkingDirectory)\\artifacts -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -RunCounter $(Build.BuildNumber) -VSVersion 15.0"

#   - task: PublishTestResults@2
#     displayName: "Publish Test Results"
#     inputs:
#       testRunner: "JUnit"
#       testResultsFiles: "*.xml"
#       searchFolder: "$(System.DefaultWorkingDirectory)\\testresults"
#       mergeTestResults: "true"
#       testRunTitle: "NuGet.Client End To End Tests "
#     condition: "succeededOrFailed()"


# - phase: Apex_Tests_On_Windows
#   dependsOn: Build_and_UnitTest
#   variables:
#     BuildNumber: $[dependencies.Build_and_UnitTest.outputs['RTM.configuration.BuildNumber']]
#   condition: "succeeded()"
#   queue:
#     name: DDNuGet-Windows
#     timeoutInMinutes: 45
#     demands: DotNetFramework

#   steps:
#   - task: PowerShell@1
#     displayName: "Print Environment Variables"
#     inputs:
#       scriptType: "inlineScript"
#       inlineScript: "gci env:* | sort-object name;
#       Write-Host \"##vso[build.updatebuildnumber]$env:BuildNumber\""

#   - task: PowerShell@1
#     displayName: "Configre.ps1"
#     inputs:
#       scriptName: "$(System.DefaultWorkingDirectory)/configure.ps1"
#       arguments: "-Force -CI"

#   - task: CopyFiles@2
#     displayName: "Copy Public Key Files"
#     inputs:
#       SourceFolder: "$(NuGetSharePublicKeys)"
#       Contents: "*.snk"
#       TargetFolder: "$(Build.Repository.LocalPath)\\keys"
#       CleanTargetFolder: "true"
#       OverWrite: "true"
#       flattenFolders: "true"

#   - task: PowerShell@1
#     displayName: "Bootstrap.ps1"
#     inputs:
#       scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/Bootstrap.ps1"
#       arguments: "-NuGetDropPath $(BuildOutputTargetPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -verbose"

#   - task: PowerShell@1
#     displayName: "SetupFunctionalTests.ps1"
#     inputs:
#       scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\SetupFunctionalTests.ps1"
#       arguments: "-VSVersion 15.0"

#   - task: PowerShell@1
#     displayName: "CopyToolsAndSetupMachine.ps1"
#     inputs:
#       scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\CopyToolsAndSetupMachine.ps1"
#       arguments: " -NuGetCIToolsFolder $(NuGetCIToolsFolder) -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts"

#   - task: PowerShell@1
#     displayName: "InstallNuGetVSIX.ps1"
#     inputs:
#       scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\InstallNuGetVSIX.ps1"
#       arguments: "-NuGetDropPath $(BuildOutputTargetPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -NuGetVSIXID $(NuGetVsixId) -ProcessExitTimeoutInSeconds 180 -VSVersion 15.0"
#       failOnStandardError: "false"

#   - task: MSBuild@1
#     displayName: "Restore for VS2017"
#     inputs:
#       solution: "build\\build.proj"
#       msbuildVersion: "15.0"
#       configuration: "$(BuildConfiguration)"
#       msbuildArguments: "/t:RestoreVS15 /p:BuildNumber=$(Build.BuildNumber)"
      
#   - task: NuGetCommand@2
#     displayName: "Add Apex Feed Source"
#     inputs:
#       command: "custom"
#       arguments: "sources add -Name ApexFeed -Source $(ApexPackageFeedUrl) -UserName $(ApexPackageFeedUsername) -Password $(ApexPackageFeedPassword) -ConfigFile $(System.DefaultWorkingDirectory)\\NuGet.config"

#   - task: MSBuild@1
#     displayName: "Restore Apex Tests"
#     inputs:
#       solution: "build\\build.proj"
#       msbuildVersion: "15.0"
#       configuration: "$(BuildConfiguration)"
#       msbuildArguments: "/t:RestoreApex /p:BuildNumber=$(Build.BuildNumber)"

#   - task: MSBuild@1
#     displayName: "Run Apex Tests"
#     inputs:
#       solution: "build\\build.proj"
#       msbuildVersion: "15.0"
#       configuration: "$(BuildConfiguration)"
#       msbuildArguments: "/t:ApexTestsStandalone /p:TestResultOutputFormat=xml  /p:NUGET_PFX_PATH=$(System.DefaultWorkingDirectory)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(System.DefaultWorkingDirectory)\\keys\\35MSSharedLib1024.snk /p:BuildNumber=$(Build.BuildNumber)"

#   - task: PublishTestResults@2
#     displayName: "Publish Test Results"
#     inputs:
#       testRunner: "XUnit"
#       testResultsFiles: "*.xml"
#       searchFolder: "$(System.DefaultWorkingDirectory)\\artifacts\\testresults"
#       mergeTestResults: "true"
#       testRunTitle: "NuGet.Client Apex Tests"
#     condition: "succeededOrFailed()"
    
    