name: $(SourceBranchName)-$(Date:yyyyMMdd)-$(rev:rr)
jobs:

- job: Initialize_Build
  timeoutInMinutes: 10
  pool:
    name: VSEng-MicroBuildVS2019
    demands:
      - DotNetFramework
      - msbuild

  steps:
  - task: PowerShell@1
    displayName: "Official only branch checks"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        $needOfficialBuild = $Env:BUILD_SOURCEBRANCHNAME -eq 'dev' -or $Env:BUILD_SOURCEBRANCHNAME.StartsWith('release-')
        if ($needOfficialBuild)
        {
          throw [System.Exception] ($Env:BUILD_SOURCEBRANCHNAME + ' should only be built from the official build definition')
        }
    condition: " not(eq(variables['IsOfficialBuild'], 'true')) "

  - task: PowerShell@1
    displayName: "Check VSTS Personal Access Token"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        CheckVstsPersonalAccessToken -VstsPersonalAccessToken $(VstsPersonalAccessToken)

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        InitializeAllTestsToPending -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -CommitSha $(Build.SourceVersion)

  - task: PowerShell@1
    displayName: "Update Build Number"
    name: "updatebuildnumber"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        try {
          $revision = Get-Content $env:BUILDCOUNTERFILE
          $newBuildCounter = [System.Decimal]::Parse($revision)
          $newBuildCounter++
          Set-Content $env:BUILDCOUNTERFILE $newBuildCounter
          $msbuildExe = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\bin\msbuild.exe'
          $productVersion = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetSemanticVersion
          $productVersion = $productVersion.Trim()
          $FullBuildNumber = "$productVersion.$newBuildCounter"
          $targetChannel = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetVsTargetChannel
          $targetChannel = $targetChannel.Trim()
          $targetMajorVersion = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetVsTargetMajorVersion
          $targetMajorVersion = $targetMajorVersion.Trim()
          Write-Host "##vso[task.setvariable variable=VsTargetChannel;isOutput=true]$targetChannel"
          Write-Host "##vso[task.setvariable variable=VsTargetMajorVersion;isOutput=true]$targetMajorVersion"
          Write-Host "##vso[build.updatebuildnumber]$FullBuildNumber"
          Write-Host "##vso[task.setvariable variable=BuildNumber;isOutput=true]$newBuildCounter"
          Write-Host "##vso[task.setvariable variable=FullVstsBuildNumber;isOutput=true]$FullBuildNumber"
        } catch {
          Write-Host "##vso[task.LogIssue type=error;]Unable to set build number"
          exit 1
        }

  - task: PowerShell@1
    displayName: "Get SDK Version For Build"
    name: "getSDKVersionForBuild"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        $msbuildExe = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\bin\msbuild.exe'
        $SDKVersionForBuild = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetCliVersionForBuilding
        Write-Host "##vso[task.setvariable variable=SDKVersionForBuild;isOutput=true]$SDKVersionForBuild"

  - task: PowerShell@1
    displayName: "Add Build Tags"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.addbuildtag]${env:BUILD_SOURCEVERSIONAUTHOR}"
        Write-Host "##vso[build.addbuildtag]${env:BUILD_SOURCEBRANCHNAME}"

- job: Build_and_UnitTest_NonRTM
  dependsOn: Initialize_Build
  timeoutInMinutes: 170
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
    VsTargetChannel: $[dependencies.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
    VsTargetMajorVersion: $[dependencies.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
    SDKVersionForBuild: $[dependencies.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    LocalizedLanguageCount: "13"
    BuildRTM: "false"

  pool:
    name: VSEng-MicroBuildVS2019
    demands:
      - DotNetFramework
      - msbuild

  steps:
  - template: templates/Build_and_UnitTest.yml

- job: Build_and_UnitTest_RTM
  dependsOn: Initialize_Build
  timeoutInMinutes: 170
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
    VsTargetChannel: $[dependencies.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
    VsTargetMajorVersion: $[dependencies.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
    SDKVersionForBuild: $[dependencies.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    LocalizedLanguageCount: "13"
    BuildRTM: "true"

  pool:
    name: VSEng-MicroBuildVS2019
    demands:
      - DotNetFramework
      - msbuild

  steps:
  - template: templates/Build_and_UnitTest.yml

- job: Functional_Tests_On_Windows
  dependsOn: Initialize_Build
  timeoutInMinutes: 120
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
    SDKVersionForBuild: $[dependencies.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
  condition: "and(succeeded(),eq(variables['RunFunctionalTestsOnWindows'], 'true')) "
  pool:
    name: VSEng-MicroBuildVS2019
    demands:
        - DotNetFramework
        - msbuild
  strategy:
    matrix:
      IsDesktop:
        SkipCoreAssemblies: "true"
      IsCore:
        SkipDesktopAssemblies: "true"

  steps:
  - task: PowerShell@1
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\utils\\InstallCLIforBuild.ps1"
      arguments: '$(SDKVersionForBuild)'
    displayName: "Install .NET 5.0 for build"

  - task: PowerShell@1
    displayName: "Define variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[task.setvariable variable=Path]${env:AGENT_TEMPDIRECTORY}\dotnet\;${env:Path}"

  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
        Get-ChildItem Env: | Sort-Object Name | Format-Table -Wrap -AutoSize

  - task: PowerShell@1
    displayName: "Download Config Files"
    enabled: "false"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        $url = $(VstsConfigFileRootUrl) -f 'NuGet.Core.FuncTests.Config'
        Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Core.FuncTests.Config
        $url = $(VstsConfigFileRootUrl) -f 'NuGet.Protocol.FuncTest.Config'
        Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Protocol.FuncTest.Config

  - task: PowerShell@1
    displayName: "Run Configure.ps1"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
      arguments: "-Force -CleanCache"

  - task: MSBuild@1
    displayName: "Restore for VS2019"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreVS /p:BuildNumber=$(BuildNumber) /p:BuildRTM=false /v:m"

  - task: MSBuild@1
    displayName: "Run Functional Tests (continue on error)"
    continueOnError: "true"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:CoreFuncTests /p:BuildRTM=false /p:BuildNumber=$(BuildNumber) /p:TestResultOutputFormat=xml /p:SkipDesktopAssemblies=$(SkipDesktopAssemblies) /p:SkipCoreAssemblies=$(SkipCoreAssemblies)"
    condition: "and(succeeded(), eq(variables['IsOfficialBuild'], 'true'))"

  - task: MSBuild@1
    displayName: "Run Functional Tests (stop on error)"
    continueOnError: "false"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:CoreFuncTests /p:BuildRTM=false /p:BuildNumber=$(BuildNumber) /p:TestResultOutputFormat=xml /p:SkipDesktopAssemblies=$(SkipDesktopAssemblies) /p:SkipCoreAssemblies=$(SkipCoreAssemblies)"
    condition: "and(succeeded(), not(eq(variables['IsOfficialBuild'], 'true')))"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    continueOnError: "true"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(Build.Repository.LocalPath)\\build\\TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Functional Tests On Windows"
    condition: "succeededOrFailed()"

  - task: PublishBuildArtifacts@1
    displayName: "Publish Test Hang Dump"
    inputs:
      PathtoPublish: "$(Build.Repository.LocalPath)/build/TestResults"
      ArtifactName: "$(Agent.JobName)"
      ArtifactType: "Container"
    condition: "or(failed(), canceled())"

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      scriptType: "inlineScript"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -CommitSha $(Build.SourceVersion) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -TestName "$env:AGENT_JOBNAME"
    condition: "always()"

- job: Tests_On_Linux
  dependsOn: Initialize_Build
  timeoutInMinutes: 45
  variables:
    FULLVSTSBUILDNUMBER: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
    SDKVersionForBuild: $[dependencies.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    MSBUILDDISABLENODEREUSE: 1
  condition: "and(succeeded(),eq(variables['RunTestsOnLinux'], 'true')) "
  pool:
    vmImage: ubuntu-latest
    demands: sh

  steps:

  - task: ShellScript@2
    displayName: "Install .NET 5.0 for build"
    continueOnError: "true"
    inputs:
      scriptPath: "scripts/utils/InstallCLIforBuild.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"
      args: '$(SDKVersionForBuild)'

  - task: PowerShell@2
    displayName: "Define variables"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "##vso[task.setvariable variable=PATH]${env:AGENT_TEMPDIRECTORY}/dotnet/:${env:PATH}"

  - task: PowerShell@2
    displayName: "Update Build Number"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "##vso[build.updatebuildnumber]$env:FULLVSTSBUILDNUMBER"
      failOnStderr: "true"
    condition: "always()"

  - task: ShellScript@2
    displayName: "Run Tests (continue on error)"
    continueOnError: "true"
    inputs:
      scriptPath: "scripts/funcTests/runFuncTests.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"
    condition: "and(succeeded(), eq(variables['IsOfficialBuild'], 'true'))"

  - task: ShellScript@2
    displayName: "Run Tests (stop on error)"
    continueOnError: "false"
    inputs:
      scriptPath: "scripts/funcTests/runFuncTests.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"
    condition: "and(succeeded(), not(eq(variables['IsOfficialBuild'], 'true')))"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      testRunTitle: "NuGet.Client Tests On Linux"
      searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
      mergeTestResults: "true"
    condition: "succeededOrFailed()"

  - task: PublishBuildArtifacts@1
    displayName: "Publish Test Hang Dump"
    inputs:
      PathtoPublish: "$(Build.Repository.LocalPath)/build/TestResults"
      ArtifactName: "$(Agent.JobName)"
      ArtifactType: "Container"
    condition: "or(failed(), canceled())"

  - task: PowerShell@2
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      targetType: "inline"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      script: |
        . $(Build.Repository.LocalPath)/scripts/utils/PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Tests On Linux"
      failOnStderr: "true"
    condition: "always()"

- job: Tests_On_Mac
  dependsOn:
  - Build_and_UnitTest_NonRTM
  - Initialize_Build
  timeoutInMinutes: 75
  variables:
    FULLVSTSBUILDNUMBER: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
    SDKVersionForBuild: $[dependencies.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
  condition: "and(succeeded(),eq(variables['RunTestsOnMac'], 'true')) "
  pool:
    vmImage: macos-latest

  steps:
  - task: ShellScript@2
    displayName: "Install .NET 5.0 for build"
    continueOnError: "true"
    inputs:
      scriptPath: "scripts/utils/InstallCLIforBuild.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"
      args: '$(SDKVersionForBuild)'

  - task: PowerShell@2
    displayName: "Update Build Number"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "##vso[build.updatebuildnumber]$env:FULLVSTSBUILDNUMBER"
      failOnStderr: "true"
    condition: "always()"

  - task: PowerShell@2
    displayName: "Define variables"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "##vso[task.setvariable variable=PATH]${env:AGENT_TEMPDIRECTORY}/dotnet/:${env:PATH}"

  - task: DownloadBuildArtifacts@0
    displayName: "Download NuGet.CommandLine.Test artifacts"
    inputs:
      artifactName: "NuGet.CommandLine.Test"
      downloadPath: "$(Build.Repository.LocalPath)/artifacts"

  - task: ShellScript@2
    displayName: "Run Tests (continue on error)"
    continueOnError: "true"
    inputs:
      scriptPath: "scripts/funcTests/runFuncTests.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"
    condition: "and(succeeded(), eq(variables['IsOfficialBuild'], 'true'))"

  - task: ShellScript@2
    displayName: "Run Tests (stop on error)"
    continueOnError: "false"
    inputs:
      scriptPath: "scripts/funcTests/runFuncTests.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"
    condition: "and(succeeded(), not(eq(variables['IsOfficialBuild'], 'true')))"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Tests On Mac"
    condition: "succeededOrFailed()"

  - task: PublishBuildArtifacts@1
    displayName: "Publish Test Hang Dump"
    inputs:
      PathtoPublish: "$(Build.Repository.LocalPath)/build/TestResults"
      ArtifactName: "$(Agent.JobName)"
      ArtifactType: "Container"
    condition: "or(failed(), canceled())"

  - task: PowerShell@2
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      targetType: "inline"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      script: |
        . $(Build.Repository.LocalPath)/scripts/utils/PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Tests On Mac"
      failOnStderr: "true"
    condition: "always()"

- job: End_To_End_Tests_On_Windows
  dependsOn:
  - Build_and_UnitTest_NonRTM
  - Initialize_Build
  timeoutInMinutes: 100
  variables:
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
    SDKVersionForBuild: $[dependencies.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
  condition: "and(succeeded(),eq(variables['RunEndToEndTests'], 'true')) "
  pool:
    name: DDNuGet-Windows
    demands:
    - DotNetFramework
    - Allow_NuGet_E2E_Tests -equals true
  strategy:
    matrix:
      Part1:
        Part: "InstallPackageTest.ps1,UninstallPackageTest.ps1,UpdatePackageTest.ps1,PackageRestoreTest.ps1"
      Part2:
        Part: "A-TopDownloadedPackages.ps1,BuildIntegratedTest.ps1,ExecuteInitScriptTest.ps1,FindPackageTest.ps1,GetPackageTest.ps1,GetProjectTest.ps1,LegacyPackageRefProjectTest.ps1,NativeProjectTest.ps1,NetCoreProjectTest.ps1,PackTest.ps1,ProjectRetargeting.ps1,ServicesTest.ps1,Settings.ps1,SyncPackageTest.ps1,TabExpansionTest.ps1,UniversalWindowsProjectTest.ps1"

  steps:
  - template: templates/End_To_End_Tests_On_Windows.yml

- job: Apex_Tests_On_Windows
  dependsOn:
  - Build_and_UnitTest_NonRTM
  - Initialize_Build
  timeoutInMinutes: 120
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
    SDKVersionForBuild: $[dependencies.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
  condition: "and(succeeded(),eq(variables['RunApexTests'], 'true')) "
  pool:
    name: DDNuGet-Windows
    demands:
    - DotNetFramework
    - Allow_NuGet_Apex_Tests -equals true

  steps:
  - checkout: self
    clean: true
    submodules: true

  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
        Get-ChildItem Env: | Sort-Object Name | Format-Table -Wrap -AutoSize

  - task: DownloadBuildArtifacts@0
    displayName: "Download Build artifacts"
    inputs:
      artifactName: "$(VsixPublishDir)"
      downloadPath: "$(Build.Repository.LocalPath)/artifacts"

  - task: NuGetToolInstaller@0
    displayName: "Use NuGet 4.5.0"
    inputs:
      versionSpec: "4.5.0"

  - task: PowerShell@1
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\utils\\InstallCLIforBuild.ps1"
      arguments: '$(SDKVersionForBuild)'
    displayName: "Install .NET 5.0 for build"

  - task: PowerShell@1
    displayName: "Define variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[task.setvariable variable=Path]${env:AGENT_TEMPDIRECTORY}\dotnet\;${env:Path}"

  - task: MSBuild@1
    displayName: "Bootstrap NuGet packages"
    inputs:
      solution: "build\\bootstrap.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:Restore"

  - task: PowerShell@1
    displayName: "Bootstrap.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/Bootstrap.ps1"
      arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\$(VsixPublishDir) -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -verbose"

  - task: PowerShell@1
    displayName: "SetupFunctionalTests.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\SetupFunctionalTests.ps1"
      arguments: "-VSVersion 16.0"

  - task: PowerShell@1
    displayName: "InstallNuGetVSIX.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\InstallNuGetVSIX.ps1"
      arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\$(VsixPublishDir) -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -NuGetVSIXID $(NuGetVsixId) -ProcessExitTimeoutInSeconds 180 -VSVersion 16.0"
      failOnStandardError: "false"

  # - task: PowerShell@1
  #   displayName: "Collect VS Logs"
  #   inputs:
  #     scriptType: "inlineScript"
  #     inlineScript: |
  #       Invoke-WebRequest -Uri $(CollectExeUrl) -OutFile $(System.DefaultWorkingDirectory)\\VSCollect.exe
  #       if(-not (Test-Path $(EndToEndResultsDropPath)))
  #         {
  #           New-Item -Path $(EndToEndResultsDropPath) -ItemType Directory -Force
  #         }
  #       $(System.DefaultWorkingDirectory)\\VSCollect.exe -zip:$(EndToEndResultsDropPath)\\apex-collectlogs.zip
  #   condition: "failed()"

  - task: NuGetCommand@2
    displayName: "Add Apex Feed Source"
    inputs:
      command: "custom"
      arguments: "sources add -Name ApexFeed -Source $(ApexPackageFeedUrl) -UserName $(ApexPackageFeedUsername) -Password $(ApexPackageFeedPassword) -ConfigFile $(System.DefaultWorkingDirectory)\\NuGet.config"

  - task: MSBuild@1
    displayName: "Restore Apex Tests"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreApex /p:BuildNumber=$(BuildNumber)"

  - task: MSBuild@1
    displayName: "Run Apex Tests (continue on error)"
    timeoutInMinutes: 45
    continueOnError: "true"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:ApexTestsStandalone /p:TestResultOutputFormat=xml /p:BuildNumber=$(BuildNumber)"
    condition: "and(succeeded(), eq(variables['IsOfficialBuild'], 'true'))"

  - task: MSBuild@1
    displayName: "Run Apex Tests (stop on error)"
    timeoutInMinutes: 45
    continueOnError: "false"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:ApexTestsStandalone /p:TestResultOutputFormat=xml /p:BuildNumber=$(BuildNumber)"
    condition: "and(succeeded(), not(eq(variables['IsOfficialBuild'], 'true')))"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(System.DefaultWorkingDirectory)\\build\\TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Apex Tests On Windows"
    condition: "succeededOrFailed()"

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Apex Tests On Windows"
    condition: "always()"

  - task: PowerShell@1
    displayName: "Kill running instances of DevEnv"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\e2etests\\VSUtils.ps1
        KillRunningInstancesOfVS
    condition: "always()"
