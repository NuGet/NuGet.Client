name: $(SourceBranchName)-$(Date:yyyyMMdd)-$(rev:rr)
phases:

- phase: Initialize_Build
  queue:
    name: VSEng-MicroBuildVS2019
    timeoutInMinutes: 60
    demands:
      - DotNetFramework
      - msbuild

  steps:
  - task: PowerShell@1
    displayName: "Official only branch checks"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        $needOfficialBuild = $Env:BUILD_SOURCEBRANCHNAME -eq 'dev' -or $Env:BUILD_SOURCEBRANCHNAME.StartsWith('release-')
        if ($needOfficialBuild)
        {
          throw [System.Exception] ($Env:BUILD_SOURCEBRANCHNAME + ' should only be built from the official build definition')
        }
    condition: " not(eq(variables['IsOfficialBuild'], 'true')) "

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        InitializeAllTestsToPending -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -CommitSha $(Build.SourceVersion)

  - task: PowerShell@1
    displayName: "Update Build Number"
    name: "updatebuildnumber"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        $revision = Get-Content $env:BUILDCOUNTERFILE
        $newBuildCounter = [System.Decimal]::Parse($revision)
        $newBuildCounter++
        Set-Content $env:BUILDCOUNTERFILE $newBuildCounter
        $msbuildExe = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\bin\msbuild.exe'
        $productVersion = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetSemanticVersion
        $productVersion = $productVersion.Trim()
        $FullBuildNumber = "$productVersion.$newBuildCounter"
        $targetChannel = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetVsTargetChannel
        $targetChannel = $targetChannel.Trim()
        $targetMajorVersion = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetVsTargetMajorVersion
        $targetMajorVersion = $targetMajorVersion.Trim()
        Write-Host "##vso[task.setvariable variable=VsTargetChannel;isOutput=true]$targetChannel"
        Write-Host "##vso[task.setvariable variable=VsTargetMajorVersion;isOutput=true]$targetMajorVersion"
        Write-Host "##vso[build.updatebuildnumber]$FullBuildNumber"
        Write-Host "##vso[task.setvariable variable=BuildNumber;isOutput=true]$newBuildCounter"
        Write-Host "##vso[task.setvariable variable=FullVstsBuildNumber;isOutput=true]$FullBuildNumber"

  - task: PowerShell@1
    displayName: "Add Build Tags"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.addbuildtag]${env:BUILD_SOURCEVERSIONAUTHOR}"
        Write-Host "##vso[build.addbuildtag]${env:BUILD_SOURCEBRANCHNAME}"

- phase: Build_and_UnitTest
  dependsOn: Initialize_Build
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
    VsTargetChannel: $[dependencies.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
    VsTargetMajorVersion: $[dependencies.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
  queue:
    name: VSEng-MicroBuildVS2019
    timeoutInMinutes: 90
    parallel: 2
    matrix:
      RTM:
        BuildRTM: "true"
      NonRTM:
        BuildRTM: "false"
    demands: 
      - DotNetFramework
      - msbuild

  steps:
  - task: PowerShell@1
    displayName: "Update Build Number"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
        gci env:* | sort-object name

  - task: PowerShell@1
    displayName: "Define variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[task.setvariable variable=ManifestFilePath]$(Build.Repository.LocalPath)\artifacts\manifests\nuget.client.xml"

  - task: NuGetToolInstaller@0
    displayName: "Use NuGet 5.0.0"
    inputs:
      versionSpec: "5.0.0"

  - task: PowerShell@1
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
      arguments: "-Force"
    displayName: "Run Configure.ps1"

  - task: PowerShell@1
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\ConfigureVstsBuild.ps1"
      arguments: "-BuildCounterFile $(BuildCounterFile) -BuildInfoJsonFile $(BuildInfoJsonFile) -BuildRTM $(BuildRTM) -SkipUpdateBuildNumber"
    displayName: "Configure VSTS CI Environment"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish buildinfo.json as an artifact'
    inputs:
      ArtifactName: 'BuildInfo'
      ArtifactType: 'Container'
      PathToPublish: '$(Build.Repository.LocalPath)\artifacts\buildinfo.json'
    condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        gci env:* | sort-object name

  - task: NuGetCommand@2
    displayName: 'MicroBuild:  install core package'
    inputs:
      command: 'custom'
      arguments: 'install Microsoft.VisualStudioEng.MicroBuild.Core -Version 0.4.1 -ConfigFile $(System.DefaultWorkingDirectory)\NuGet.config -OutputDirectory $(System.DefaultWorkingDirectory)\packages'
    condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

  - task: MicroBuildLocalizationPlugin@1
    displayName: "Install Localization Plugin"

  - task: MicroBuildSigningPlugin@1
    inputs:
      signType: "$(SigningType)"
      esrpSigning: "true"
    displayName: "Install Signing Plugin"

  - task: MicroBuildSwixPlugin@1
    displayName: "Install Swix Plugin"

  - task: ms-vseng.MicroBuildTasks.965C8DC6-1483-45C9-B384-5AC75DA1F1A4.MicroBuildOptProfPlugin@4
    displayName: 'OptProfV2:  install the plugin'
    inputs:
      getDropNameByDrop: true
      optimizationInputsDropNamePrefix: OptimizationInputs/$(System.TeamProject)/$(Build.Repository.Name)
    condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

  - task: MSBuild@1
    displayName: "Restore for VS2019"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreVS /p:BuildNumber=$(BuildNumber) /p:BuildRTM=$(BuildRTM) /v:m"

  - task: MSBuild@1
    displayName: "Build for VS2019"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:BuildNoVSIX /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(BuildNumber)"

  - task: MSBuild@1
    displayName: "Ensure msbuild.exe can parse nuget.sln"
    continueOnError: "false"
    inputs:
      solution: "nuget.sln"
      msbuildVersion: "16.0"
      msbuildArguments: "/t:EnsureNewtonsoftJsonVersion"
    condition: "succeeded()"

  - task: MSBuild@1
    displayName: "Run unit tests"
    continueOnError: "true"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:CoreUnitTests;UnitTestsVS /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(BuildNumber) /p:TestResultOutputFormat=xml"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      testRunTitle: "NuGet.Client Unit Tests On Windows"
      searchFolder: "$(Build.Repository.LocalPath)\\build\\TestResults"
      mergeTestResults: "true"
      publishRunAttachments: "false"
    condition: "and(succeededOrFailed(),eq(variables['BuildRTM'], 'true'))"

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      scriptType: "inlineScript"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Unit Tests On Windows"
    condition: "and(always(),eq(variables['BuildRTM'], 'true'))"

  - task: PublishBuildArtifacts@1
    displayName: "Publish NuGet.CommandLine.Test as artifact"
    inputs:
      PathtoPublish: "$(Build.Repository.LocalPath)\\test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\bin\\$(BuildConfiguration)\\net472\\win7-x64"
      ArtifactName: "NuGet.CommandLine.Test"
      ArtifactType: "Container"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

  - task: MSBuild@1
    displayName: "Localize Assemblies"
    inputs:
      solution: "build\\loc.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Sign Assemblies"
    inputs:
      solution: "build\\sign.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild"

  - task: MSBuild@1
    displayName: "Pack Nupkgs"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:Pack /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:BuildNumber=$(BuildNumber)"

  - task: MSBuild@1
    displayName: "Pack VSIX"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:BuildVSIX /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:IsCIBuild=true"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

  - task: MSBuild@1
    displayName: "Generate Build Tools package"
    inputs:
      solution: "setup/Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/p:BuildNumber=$(BuildNumber) /p:IsVsixBuild=true"
    condition: " and(succeeded(), eq(variables['BuildRTM'], 'false'))"

  - task: MSBuild@1
    displayName: "Sign Nupkgs and VSIX"
    inputs:
      solution: "build\\sign.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild /p:SignPackages=true"

  - task: NuGetCommand@2
    displayName: "Verify Nupkg Signatures"
    inputs:
      command: "custom"
      arguments: "verify -Signatures $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)\\*.nupkg"

  - task: ms-vseng.MicroBuildShipTasks.7c429315-71ba-4cb3-94bb-f829c95f7915.MicroBuildCodesignVerify@1
    displayName: Verify Assembly Signatures and StrongName for the nupkgs
    inputs:
      TargetFolder: '$(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)'

  - task: ms-vseng.MicroBuildShipTasks.7c429315-71ba-4cb3-94bb-f829c95f7915.MicroBuildCodesignVerify@1
    displayName: Verify Assembly Signatures and StrongName for the VSIX & exes
    inputs:
      TargetFolder: '$(Build.Repository.LocalPath)\\artifacts\\$(VsixPublishDir)'
      WhiteListPathForCerts: '$(Build.Repository.LocalPath)\\build\\ignorecodesign.csv'
      WhiteListPathForSigs: '$(Build.Repository.LocalPath)\\build\\ignorecodesign.csv'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

  - task: CopyFiles@2
    displayName: "Copy Nupkgs"
    inputs:
      SourceFolder: "artifacts\\$(NupkgOutputDir)"
      Contents: "*.nupkg"
      TargetFolder: "$(BuildOutputTargetPath)\\artifacts\\$(VsixPublishDir)\\$(NupkgOutputDir)"

  - task: MSBuild@1
    displayName: "Generate VSMAN file for NuGet Core VSIX"
    inputs:
      solution: "setup\\Microsoft.VisualStudio.NuGet.Core.vsmanproj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Generate VSMAN file for Build Tools VSIX"
    inputs:
      solution: "setup\\Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: PowerShell@1
    displayName: "Create EndToEnd Test Package"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\CreateEndToEndTestPackage.ps1"
      arguments: "-c $(BuildConfiguration) -tv 16 -out $(Build.Repository.LocalPath)\\artifacts\\$(VsixPublishDir)"
      failOnStandardError: "true"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: CopyFiles@2
    displayName: "Copy NuGet.exe, VSIX and EndToEnd"
    inputs:
      SourceFolder: "artifacts"
      Contents: |
        $(VsixPublishDir)\\NuGet.exe
        $(VsixPublishDir)\\NuGet.pdb
        $(VsixPublishDir)\\NuGet.Mssign.exe
        $(VsixPublishDir)\\NuGet.Mssign.pdb
        $(VsixPublishDir)\\Microsoft.VisualStudio.NuGet.Core.json
        $(VsixPublishDir)\\NuGet.Tools.vsix
        $(VsixPublishDir)\\Microsoft.VisualStudio.NuGet.BuildTools.vsix
        $(VsixPublishDir)\\Microsoft.VisualStudio.NuGet.BuildTools.json
        $(VsixPublishDir)\\EndToEnd.zip
      TargetFolder: "$(BuildOutputTargetPath)\\artifacts"

  - task: NuGetCommand@2
    displayName: 'OptProfV2:  add the NuGet package source'
    inputs:
      command: 'custom'
      arguments: 'sources add -Name VS -Source $(VsPackageFeedUrl) -UserName $(VsPackageFeedUsername) -Password $(VsPackageFeedPassword) -ConfigFile $(System.DefaultWorkingDirectory)\NuGet.config'
    condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

  - task: NuGetCommand@2
    displayName: 'OptProfV2:  install the NuGet package for building .runsettingsproj file'
    inputs:
      command: 'custom'
      arguments: 'install Microsoft.DevDiv.Validation.TestPlatform.Settings.Tasks -Version 1.0.308 -Source $(VsPackageFeedUrl) -ConfigFile $(System.DefaultWorkingDirectory)\NuGet.config -OutputDirectory $(System.DefaultWorkingDirectory)\packages'
    condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

  - task: ms-vseng.MicroBuildTasks.0e9d0d4d-71ec-4e4e-ae40-db9896f1ae74.MicroBuildBuildVSBootstrapper@2
    displayName: 'OptProfV2:  build a Visual Studio bootstrapper'
    inputs:
      channelName: "$(VsTargetChannel)"
      vsMajorVersion: "$(VsTargetMajorVersion)"
      manifests: '$(Build.Repository.LocalPath)\artifacts\$(VsixPublishDir)\Microsoft.VisualStudio.NuGet.Core.vsman'
      outputFolder: '$(Build.Repository.LocalPath)\artifacts\$(VsixPublishDir)'
    continueOnError: true
    condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

  - task: PublishBuildArtifacts@1
    displayName: 'OptProfV2:  publish BootstrapperInfo.json as a build artifact'
    inputs:
      PathtoPublish: $(Build.StagingDirectory)\MicroBuild\Output
      ArtifactName: MicroBuildOutputs
      ArtifactType: Container
    condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

  - task: PowerShell@1
    displayName: 'OptProfV2:  set the TestDrop environment variable'
    inputs:
      scriptType: 'inlineScript'
      inlineScript: |
        [string] $bootstrapperInfoFilePath = "$Env:BUILD_STAGINGDIRECTORY\MicroBuild\Output\BootstrapperInfo.json"
        $json = Get-Content $bootstrapperInfoFilePath | ConvertFrom-Json
        [string] $buildDropPath = $json.BuildDrop
        Write-Host "Build drop:  $buildDropPath"
        [string] $testDropPath = $buildDropPath.Replace('/Products/', '/Tests/').Substring('https://vsdrop.corp.microsoft.com/file/v1/'.Length)
        Write-Host "Test drop:  $testDropPath"
        Write-Host "##vso[task.setvariable variable=TestDrop]$testDropPath"
    condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

  - task: MSBuild@1
    displayName: 'OptProfV2:  generate a .runsettings file'
    inputs:
      solution: 'build\NuGet.OptProfV2.runsettingsproj'
      msbuildVersion: '16.0'
      msbuildArguments: '/p:OutputPath="$(Build.Repository.LocalPath)\artifacts\RunSettings" /p:TestDrop="$(TestDrop)" /p:ProfilingInputsDrop="ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)"'
    condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

  - task: ms-vscs-artifact.build-tasks.artifactDropTask-1.artifactDropTask@0
    displayName: 'OptProfV2:  publish the .runsettings file to artifact services'
    inputs:
      dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
      buildNumber: 'RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
      sourcePath: 'artifacts\RunSettings'
      toLowerCase: false
      usePat: false
      dropMetadataContainerName: RunSettings
    condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

  - task: ms-vscs-artifact.build-tasks.artifactDropTask-1.artifactDropTask@0
    displayName: 'OptProfV2:  publish profiling inputs to artifact services'
    inputs:
      dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
      buildNumber: 'ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
      sourcePath: '$(Build.ArtifactStagingDirectory)\OptProf\ProfilingInputs'
      toLowerCase: false
      usePat: false
    condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

  - task: PublishBuildArtifacts@1
    displayName: "Publish NuGet.exe VSIX and EndToEnd.zip as artifact"
    inputs:
      PathtoPublish: "$(Build.Repository.LocalPath)\\artifacts\\$(VsixPublishDir)"
      ArtifactName: "$(VsixPublishDir)"
      ArtifactType: "Container"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

  - task: CopyFiles@2
    displayName: "Copy LCG Files"
    inputs:
      SourceFolder: "artifacts\\"
      Contents: "**\\*.lcg"
      TargetFolder: "$(CIRoot)\\PLOC\\$(Build.SourceBranchName)\\$(Build.BuildNumber)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "

  - task: PowerShell@1
    displayName: "Publish Artifacts to MyGet"
    continueOnError: "true"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\PublishArtifactsFromVsts.ps1"
      arguments: "-NuGetBuildFeedUrl $(NuGetBuildFeed) -NuGetBuildSymbolsFeedUrl $(NuGetBuildSymbolsFeed) -DotnetCoreFeedUrl $(DotnetCoreBuildFeed) -DotnetCoreSymbolsFeedUrl $(DotnetCoreSymbolsFeed) -NuGetBuildFeedApiKey $(NuGetBuildApiKey) -DotnetCoreFeedApiKey $(DotnetCoreFeedApiKey)"
      failOnStandardError: "true"
    condition: " and(succeeded(),eq(variables['PublishArtifactsToMyGet'], 'true'), eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Collect Build Symbols"
    inputs:
      solution: "build\\symbols.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/p:IsSymbolBuild=true"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "

  - task: CopyFiles@2
    displayName: "Copy Symbols"
    inputs:
      SourceFolder: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
      Contents: "**\\*"
      TargetFolder: "$(BuildOutputTargetPath)\\symbols"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "

  - task: ms-vscs-artifact.build-tasks.artifactSymbolTask-1.artifactSymbolTask@0
    displayName: "Publish Symbols on Symweb"
    inputs:
      symbolServiceURI: "https://microsoft.artifacts.visualstudio.com/DefaultCollection"
      requestName: "CollectionId/$(System.CollectionId)/ProjectId/$(System.TeamProjectId)/$(TeamName)/BuildId/$(Build.BuildId)"
      sourcePath: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
      detailedLog: "true"
      expirationInDays: "45"
      usePat: "false"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "

  - task: MicroBuildUploadVstsDropFolder@1
    displayName: "Upload VSTS Drop"
    inputs:
      DropFolder: "$(Build.Repository.LocalPath)\\artifacts\\$(VsixPublishDir)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: PowerShell@1
    displayName: "Validate VSIX Localization"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
      arguments: "-BuildRTM $(BuildRTM) -BuildOutputTargetPath $(BuildOutputTargetPath) -ValidateVsix"
    condition: " and(succeeded(), eq(variables['IsOfficialBuild'], 'true')) "

  - task: PowerShell@1
    displayName: "Validate Repository Artifacts Localization"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
      arguments: "-BuildRTM $(BuildRTM) -BuildOutputTargetPath $(BuildOutputTargetPath)"
    condition: " and(succeeded(), eq(variables['IsOfficialBuild'], 'true')) "

    # Use dotnet msbuild instead of MSBuild CLI.
    # Using MSBuild CLI results in an assembly binding failure for NuGet.Common.dll 4.4.0.3 because Microsoft.DotNet.Build.Tasks.Feed.dll references SleetLib.dll which references NuGet.Common 4.4.0.3.
    # The Microsoft.DotNet.Build.Tasks.Feed package includes NuGet.Common 4.9.0.6 and a binding redirection in Microsoft.DotNet.Build.Tasks.Feed.dll.config but the binding redirection is not processed.
    # This would probably solve it:  https://github.com/Microsoft/msbuild/issues/1309
  - task: CmdLine@2
    displayName: "Publish the packages to the .NET Core build asset registry (BAR)"
    inputs:
      script: dotnet msbuild ..\build\publish.proj /t:PublishPackagesToBuildAssetRegistry /p:NuGetClientNupkgsDirectoryPath=$(Build.Repository.LocalPath)\artifacts\$(NupkgOutputDir) /p:FeedUrl=$(DotNetFeedUrl) /p:BuildId=$(Build.BuildNumber) /p:RepoBranch=$(Build.SourceBranchName) /p:RepoCommit=$(Build.SourceVersion) /p:RepoUri=$(Build.Repository.Uri) /p:ManifestFilePath=$(ManifestFilePath) /p:AccountKey=$(dotnetfeed-storage-access-key-1)
      workingDirectory: cli
      failOnStderr: true
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_MULTILEVEL_LOOKUP: true
    condition: " and(succeeded(),eq(variables['PublishArtifactsToDotNetBuildAssetRegistry'], 'true'), eq(variables['BuildRTM'], 'false')) "

  - task: PowerShell@1
    displayName: "Upload the build manifest file as a build artifact"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[task.uploadfile]$(ManifestFilePath)"
    condition: " and(succeeded(),eq(variables['PublishArtifactsToDotNetBuildAssetRegistry'], 'true'), eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Publish the build manifest file to the .NET Core build asset registry (BAR)"
    inputs:
      solution: 'build\\publish.proj'
      msbuildVersion: 16.0
      configuration: '$(BuildConfiguration)'
      msbuildArguments: '/t:PublishManifestToBuildAssetRegistry /p:MaestroApiEndpoint=$(MaestroApiEndpoint) /p:ManifestsDirectoryPath=$(Build.Repository.LocalPath)\artifacts\manifests /p:MaestroAccessToken=$(MaestroAccessToken)'
    condition: " and(succeeded(),eq(variables['PublishArtifactsToDotNetBuildAssetRegistry'], 'true'), eq(variables['BuildRTM'], 'false')) "

  - task: MicroBuildCleanup@1
    displayName: "Perform Cleanup Tasks"

  - task: PowerShell@1
    displayName: "Cleanup on Failure"
    inputs:
      scriptType: "inlineScript"
      arguments: "-BuildOutputTargetPath $(BuildOutputTargetPath)"
      inlineScript: |
        param([string]$BuildOutputTargetPath)
        Get-ChildItem $(BuildOutputTargetPath) -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
        Remove-Item -Path $(BuildOutputTargetPath) -Force -Recurse -ErrorAction SilentlyContinue
    condition: "eq(variables['Agent.JobStatus'], 'Failed')"

- phase: Functional_Tests_On_Windows
  dependsOn: Initialize_Build
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
  condition: "and(succeeded(),eq(variables['RunFunctionalTestsOnWindows'], 'true')) "
  queue:
    name: VSEng-MicroBuildSxS
    timeoutInMinutes: 150
    demands: 
        - DotNetFramework
        - msbuild
    matrix:
      IsDesktop:
        SkipCoreAssemblies: "true"
      IsCore:
        SkipDesktopAssemblies: "true"
        
  steps:
  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
        gci env:* | sort-object name

  - task: PowerShell@1
    displayName: "Download Config Files"
    enabled: "false"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        $url = $(VstsConfigFileRootUrl) -f 'NuGet.Core.FuncTests.Config'
        Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Core.FuncTests.Config
        $url = $(VstsConfigFileRootUrl) -f 'NuGet.Protocol.FuncTest.Config'
        Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Protocol.FuncTest.Config

  - task: PowerShell@1
    displayName: "Run Configure.ps1"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
      arguments: "-Force -CleanCache"

  - task: MSBuild@1
    displayName: "Restore for VS2019"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreVS /p:BuildNumber=$(BuildNumber) /p:BuildRTM=false /v:m"

  - task: MSBuild@1
    displayName: "Run Functional Tests"
    continueOnError: "true"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:CoreFuncTests /p:BuildRTM=false /p:BuildNumber=$(BuildNumber) /p:TestResultOutputFormat=xml /p:SkipDesktopAssemblies=$(SkipDesktopAssemblies) /p:SkipCoreAssemblies=$(SkipCoreAssemblies)"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    continueOnError: "true"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(Build.Repository.LocalPath)\\build\\TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Functional Tests On Windows"
    condition: "succeededOrFailed()"

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      scriptType: "inlineScript"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -CommitSha $(Build.SourceVersion) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -TestName "$env:AGENT_JOBNAME"
    condition: "always()"

- phase: Tests_On_Linux
  dependsOn: Initialize_Build
  variables:
    FULLVSTSBUILDNUMBER: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
    MSBUILDDISABLENODEREUSE: 1
  condition: "and(succeeded(),eq(variables['RunTestsOnLinux'], 'true')) "
  queue:
    name: DDNuGet-Linux
    timeoutInMinutes: 60
    demands: sh

  steps:
  - task: PowerShell@2
    displayName: "Update Build Number"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "##vso[build.updatebuildnumber]$env:FULLVSTSBUILDNUMBER"
      failOnStderr: "true"
    condition: "always()"

  - task: ShellScript@2
    displayName: "Run Tests"
    continueOnError: "true"
    inputs:
      scriptPath: "scripts/funcTests/runFuncTests.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      testRunTitle: "NuGet.Client Tests On Linux"
      searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
      mergeTestResults: "true"

  - task: PowerShell@2
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      targetType: "inline"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      script: |
        . $(Build.Repository.LocalPath)/scripts/utils/PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Tests On Linux"
      failOnStderr: "true"
    condition: "always()"

- phase: Tests_On_Mac
  dependsOn:
  - Build_and_UnitTest
  - Initialize_Build
  variables:
    FULLVSTSBUILDNUMBER: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
  condition: "and(succeeded(),eq(variables['RunTestsOnMac'], 'true')) "
  queue:
    name: VSEng-MicroBuildMacSierra
    timeoutInMinutes: 75
    demands: sh

  steps:
  - task: PowerShell@2
    displayName: "Update Build Number"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "##vso[build.updatebuildnumber]$env:FULLVSTSBUILDNUMBER"
      failOnStderr: "true"
    condition: "always()"

  - task: DownloadBuildArtifacts@0
    displayName: "Download NuGet.CommandLine.Test artifacts"
    inputs:
      artifactName: "NuGet.CommandLine.Test"
      downloadPath: "$(Build.Repository.LocalPath)/artifacts"

  - task: ShellScript@2
    displayName: "Run Tests"
    continueOnError: "true"
    inputs:
      scriptPath: "scripts/funcTests/runFuncTests.sh"
      disableAutoCwd: "true"
      cwd: "$(Build.Repository.LocalPath)"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Tests On Mac"
    condition: "succeededOrFailed()"

  - task: PowerShell@2
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      targetType: "inline"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      script: |
        . $(Build.Repository.LocalPath)/scripts/utils/PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Tests On Mac"
      failOnStderr: "true"
    condition: "always()"

- phase: End_To_End_Tests_On_Windows
  dependsOn:
  - Build_and_UnitTest
  - Initialize_Build
  variables:
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
  condition: "and(succeeded(),eq(variables['RunEndToEndTests'], 'true')) "
  queue:
    timeoutInMinutes: 90
    name: DDNuGet-Windows
    demands: DotNetFramework

  steps:
  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
        gci env:* | sort-object name

  - task: DownloadBuildArtifacts@0
    displayName: "Download Build artifacts"
    inputs:
      artifactName: "$(VsixPublishDir)"
      downloadPath: "$(Build.Repository.LocalPath)/artifacts"

  - task: PowerShell@1
    displayName: "Bootstrap.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/Bootstrap.ps1"
      arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\$(VsixPublishDir) -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -verbose"

  - task: PowerShell@1
    displayName: "SetupFunctionalTests.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\SetupFunctionalTests.ps1"

  - task: PowerShell@1
    displayName: "SetupMachine.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\SetupMachine.ps1"

  - task: PowerShell@1
    displayName: "InstallNuGetVSIX.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\InstallNuGetVSIX.ps1"
      arguments: "-NuGetDropPath $(System.DefaultWorkingDirectory)\\artifacts\\$(VsixPublishDir) -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -NuGetVSIXID $(NuGetVsixId) -ProcessExitTimeoutInSeconds 180 -VSVersion 16.0"
      failOnStandardError: "false"

  - task: PowerShell@1
    displayName: "Collect VS Logs"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Invoke-WebRequest -Uri $(CollectExeUrl) -OutFile $(System.DefaultWorkingDirectory)\\VSCollect.exe
        $(System.DefaultWorkingDirectory)\\VSCollect.exe -zip:$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\e2e-collectlogs.zip
    condition: "failed()"

  - task: PowerShell@1
    displayName: "RunFunctionalTests.ps1"
    timeoutInMinutes: 75
    continueOnError: "true"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\RunFunctionalTests.ps1"
      arguments: "-PMCCommand $(EndToEndTestCommandToRun) -PMCLaunchWaitTimeInSecs 30 -EachTestTimoutInSecs 600 -NuGetDropPath $(System.DefaultWorkingDirectory)\\artifacts -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -RunCounter $(Build.BuildNumber) -VSVersion 16.0"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "JUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(System.DefaultWorkingDirectory)\\testresults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client EndToEnd Tests On Windows"
    condition: "succeededOrFailed()"

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      scriptType: "inlineScript"
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "EndToEnd Tests On Windows"
    condition: "always()"

  - task: PowerShell@1
    displayName: "Kill running instances of DevEnv"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\e2etests\\VSUtils.ps1
        KillRunningInstancesOfVS
    condition: "always()"

- phase: Apex_Tests_On_Windows
  dependsOn:
  - Build_and_UnitTest
  - Initialize_Build
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
    FullVstsBuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
  condition: "and(succeeded(),eq(variables['RunApexTests'], 'true')) "
  queue:
    name: DDNuGet-Windows
    demands: DotNetFramework

  steps:
  - checkout: self
    clean: true
    submodules: true

  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
        gci env:* | sort-object name

  - task: DownloadBuildArtifacts@0
    displayName: "Download Build artifacts"
    inputs:
      artifactName: "$(VsixPublishDir)"
      downloadPath: "$(Build.Repository.LocalPath)/artifacts"

  - task: NuGetToolInstaller@0
    displayName: "Use NuGet 4.5.0"
    inputs:
      versionSpec: "4.5.0"

  - task: MSBuild@1
    displayName: "Bootstrap NuGet packages"
    inputs:
      solution: "build\\bootstrap.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:Restore"

  - task: PowerShell@1
    displayName: "Bootstrap.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/Bootstrap.ps1"
      arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\$(VsixPublishDir) -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -verbose"

  - task: PowerShell@1
    displayName: "SetupFunctionalTests.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\SetupFunctionalTests.ps1"
      arguments: "-VSVersion 16.0"

  - task: PowerShell@1
    displayName: "InstallNuGetVSIX.ps1"
    inputs:
      scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\InstallNuGetVSIX.ps1"
      arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\$(VsixPublishDir) -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -NuGetVSIXID $(NuGetVsixId) -ProcessExitTimeoutInSeconds 180 -VSVersion 16.0"
      failOnStandardError: "false"

  # - task: PowerShell@1
  #   displayName: "Collect VS Logs"
  #   inputs:
  #     scriptType: "inlineScript"
  #     inlineScript: |
  #       Invoke-WebRequest -Uri $(CollectExeUrl) -OutFile $(System.DefaultWorkingDirectory)\\VSCollect.exe
  #       if(-not (Test-Path $(EndToEndResultsDropPath)))
  #         {
  #           New-Item -Path $(EndToEndResultsDropPath) -ItemType Directory -Force
  #         }
  #       $(System.DefaultWorkingDirectory)\\VSCollect.exe -zip:$(EndToEndResultsDropPath)\\apex-collectlogs.zip
  #   condition: "failed()"

  - task: MSBuild@1
    displayName: "Restore for VS2019"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreVS /p:BuildNumber=$(BuildNumber)"

  - task: NuGetCommand@2
    displayName: "Add Apex Feed Source"
    inputs:
      command: "custom"
      arguments: "sources add -Name ApexFeed -Source $(ApexPackageFeedUrl) -UserName $(ApexPackageFeedUsername) -Password $(ApexPackageFeedPassword) -ConfigFile $(System.DefaultWorkingDirectory)\\NuGet.config"

  - task: MSBuild@1
    displayName: "Restore Apex Tests"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreApex /p:BuildNumber=$(BuildNumber)"

  - task: MSBuild@1
    displayName: "Run Apex Tests"
    timeoutInMinutes: 45
    continueOnError: "true"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "16.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:ApexTestsStandalone /p:TestResultOutputFormat=xml /p:BuildNumber=$(BuildNumber)"

  - task: PublishTestResults@2
    displayName: "Publish Test Results"
    inputs:
      testRunner: "XUnit"
      testResultsFiles: "*.xml"
      searchFolder: "$(System.DefaultWorkingDirectory)\\build\\TestResults"
      mergeTestResults: "true"
      testRunTitle: "NuGet.Client Apex Tests On Windows"
    condition: "succeededOrFailed()"

  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Apex Tests On Windows"
    condition: "always()"

  - task: PowerShell@1
    displayName: "Kill running instances of DevEnv"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\e2etests\\VSUtils.ps1
        KillRunningInstancesOfVS
    condition: "always()"
