<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0">
  <!-- Compiler flags -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'net45' OR '$(TargetFramework)' == 'net46' ">
    <DefineConstants>$(DefineConstants);IS_DESKTOP</DefineConstants>
    <IsDesktop>true</IsDesktop>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == 'netcoreapp1.0' OR '$(TargetFramework)' == 'netcoreapp1.1' OR'$(TargetFramework)' == 'netstandard1.0' OR '$(TargetFramework)' == 'netstandard1.3' OR '$(TargetFramework)' == 'netstandard1.4' OR '$(TargetFramework)' == 'netstandard1.5' OR '$(TargetFramework)' == 'netstandard1.6' ">
    <DefineConstants>$(DefineConstants);IS_CORECLR</DefineConstants>
    <IsCore>true</IsCore>
  </PropertyGroup>

  <!-- Include shared files for netcore projects -->
  <ItemGroup Condition=" '$(IsNetCoreProject)' == 'true' AND '$(SkipShared)' != 'true' AND '$(TestProject)' != 'true' ">
    <Compile Include="$(SharedDirectory)\*.cs" Exclude="bin\**;obj\**;**\*.xproj;packages\**" />
  </ItemGroup>

  <!-- Include shared files for test netcore projects -->
  <ItemGroup Condition=" '$(IsNetCoreProject)' == 'true' AND '$(SkipShared)' != 'true' AND '$(TestProject)' == 'true' ">
    <Compile Include="$(BuildCommonDirectory)TestShared\*.cs" />
  </ItemGroup>

  <ImportGroup Condition=" '$(SkipSigning)' != 'true' ">
    <Import Project="sign.targets" />
  </ImportGroup>

  <!-- Write out .XML files for projects that will be packed. -->
  <PropertyGroup Condition=" '$(PackProject)' == 'true' ">
    <GenerateDocumentationFile Condition=" '$(GenerateDocumentationFile)' == '' ">true</GenerateDocumentationFile>
    <DocumentationFile Condition=" '$(DocumentationFile)' == '' AND '$(GenerateDocumentationFile)' == 'true' AND '$(IsNetCoreProject)' != 'true' ">$(OutputPath)\$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>

  <!-- These are needed because currently a VSIX project cannot reference a net core project that multi targets -->
  <Target Name="BuiltProjectOutputGroupDependencies" Condition=" '$(IsNetCoreProject)' == 'true' " />
  <Target Name="BuiltProjectOutputGroup" Condition=" '$(IsNetCoreProject)' == 'true' " />
  <Target Name="GetCopyToOutputDirectoryItems" Condition=" '$(IsNetCoreProject)' == 'true' " />
  <Target Name="SatelliteDllsProjectOutputGroup" Condition=" '$(IsNetCoreProject)' == 'true' " />
  <Target Name="DebugSymbolsProjectOutputGroup" Condition=" '$(IsNetCoreProject)' == 'true' " />

  <!-- Test Projects -->
  <ImportGroup Condition=" '$(TestProject)' == 'true' ">
    <Import Project="test.targets" />
  </ImportGroup>

  <!-- Allow WPF projects to run under NETCore SDK -->
  <!-- Errors occur if the output ptah is not set correctly -->
  <PropertyGroup Condition=" '$(NETCoreWPFProject)' == 'true' ">
    <TargetFrameworkVersion>v4.6</TargetFrameworkVersion>
    <BaseOutputPath>bin\</BaseOutputPath>
    <OutputPath>bin\$(VisualStudioVersion)\$(Configuration)</OutputPath>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath> 
    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
  </PropertyGroup>

  <!--
    ============================================================
    TestProject
    Runs tests on the current project if it is a test project.
    ============================================================
  -->
  <Target Name="TestProject" Condition=" '$(TestProject)' == 'true' " DependsOnTargets="VSTest">
    <Message Text="Tested project $(MSBuildProjectName)" Importance="high"  />
  </Target>

  <!--
    ============================================================
    PackProjects
    This must be called after building. The dependency on build does
    not exist to improve perf.
    ============================================================
  -->
  <Target Name="PackProjects" Condition=" '$(PackProject)' == 'true' ">
    <Message Text="Packing $(ProjectName)" Importance="high" />

    <!-- Run pack on the project -->
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="Pack"
      Properties="Configuration=$(Configuration);
                  VisualStudioVersion=$(VisualStudioVersion);
                  PackageOutputPath=$(NupkgOutputDirectory);
                  NoPackageAnalysis=true;
                  IncludeSymbols=true;
                  NoBuild=true;">
    </MSBuild>
  </Target>

  <!--
    ============================================================
    RunTests for the current project
    Top level entry point for tests
    ============================================================
  -->
  <Target Name="RunTests"
          DependsOnTargets="Build;GetTargetFrameworkSet"
          Condition=" '$(TestProject)' == 'true' AND '$(SkipTests)' != 'true' ">
    <Message Text="Running tests for $(ProjectName)" Importance="high" />
    
    <!-- Execute tests for each framework -->
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="RunTestsInner"
      Properties="TargetFramework=%(ProjectTargetFrameworkEntries.Identity);
                  Configuration=$(Configuration);
                  VisualStudioVersion=$(VisualStudioVersion);">
    </MSBuild>
  </Target>

  <!--
    ============================================================
    RunTests for the current framework
    Called by RunTests, this calls XUnit
    ============================================================
  -->
  <Target Name="RunTestsInner">
    <PropertyGroup>
      <TestAssemblyPath>$(OutputPath)$(AssemblyName).exe</TestAssemblyPath>
    </PropertyGroup>
    <Message Text="Running tests on $(TestAssemblyPath)" Importance="high" />

    <!-- Ensure the test results dir exists -->
    <MakeDir Directories="$(TestResultsDirectory)"
      Condition=" '$(IsDesktop)' == 'true' AND '$(SkipDesktopTests)' != 'true' " />

    <!-- For desktop frameworks use the console runner -->
    <Exec Command="$(XunitConsoleExePath) $(TestAssemblyPath) -html $(TestResultsDirectory)$(ProjectName).VS$(VisualStudioVersion).html"
          Condition=" '$(IsDesktop)' == 'true' AND '$(SkipDesktopTests)' != 'true' " />

    <!-- For other frameworks call dotnet test -->
    <Exec Command="$(DotnetExePath) test -f $(TargetFramework) --no-build -c $(Configuration)"
          Condition=" '$(IsDesktop)' != 'true' AND '$(SkipCoreTests)' != 'true' " />
  </Target>

  <!--
    ============================================================
    GetTestAssemblies
    ============================================================
  -->
  <Target Name="GetTestAssemblies"
          DependsOnTargets="Build;GetTargetFrameworkSet"
          Condition=" '$(TestProject)' == 'true' AND '$(SkipTests)' != 'true' "
          Returns="@(TestAssemblyPath)">
    <Message Text="Discovering test assemblies for $(AssemblyName)" Importance="high" />

    <!-- Execute find for all frameworks -->
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="GetTestAssembliesInner"
      Properties="TargetFramework=%(ProjectTargetFrameworkEntries.Identity);
                  Configuration=$(Configuration);
                  VisualStudioVersion=$(VisualStudioVersion);">
      <Output TaskParameter="TargetOutputs"
              ItemName="TestAssemblyPath" />
    </MSBuild>
  </Target>

  <!--
    ============================================================
    GetTestAssembliesInner
    ============================================================
  -->
  <Target Name="GetTestAssembliesInner"
          Returns="@(TestAssemblyPath)">

    <PropertyGroup>
      <TestAssemblyRelativePath Condition=" '$(IsDesktop)' == 'true' ">$(OutputPath)$(AssemblyName).exe</TestAssemblyRelativePath>
      <TestAssemblyRelativePath Condition=" '$(IsDesktop)' != 'true' ">$(OutputPath)$(AssemblyName).dll</TestAssemblyRelativePath>
    </PropertyGroup>

    <ConvertToAbsolutePath Paths="$(TestAssemblyRelativePath)">
      <Output TaskParameter="AbsolutePaths" PropertyName="AbsoluteTestAssemblyPath"/>
    </ConvertToAbsolutePath>

    <ItemGroup>
      <TestAssemblyPath Include="$(AbsoluteTestAssemblyPath)">
        <IsDesktop Condition=" '$(IsDesktop)' == 'true' ">true</IsDesktop>
        <IsCore Condition=" '$(IsDesktop)' != 'true' ">true</IsCore>
      </TestAssemblyPath>
    </ItemGroup>
  </Target>

  <!--
    ============================================================
    GetTargetFrameworkSet get all target frameworks
    ============================================================
  -->
  <Target Name="GetTargetFrameworkSet" Returns="@(ProjectTargetFrameworkEntries)">
    <!-- Find all frameworks to run on -->
    <ItemGroup>
      <ProjectTargetFrameworkEntries Include="$(TargetFramework);$(TargetFrameworks)" />
    </ItemGroup>
  </Target>

</Project>
