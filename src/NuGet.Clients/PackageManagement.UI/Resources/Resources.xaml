<ResourceDictionary
  x:Class="NuGet.PackageManagement.UI.SharedResources"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:nuget="clr-namespace:NuGet.PackageManagement.UI"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <nuget:StyleKeyConverter
    x:Key="StyleKeyConverter" />
  <BitmapImage
    x:Key="BitmapImage_DefaultIcon"
    UriSource="../Resources/packageicon.png" />

  <nuget:PackageStatusToInstallImageVisibilityConverter
    x:Key="PackageStatusToInstallImageVis" />
  <nuget:PackageStatusToUpdateImageVisibilityConverter
    x:Key="PackageStatusToUpdateImageConverter" />
  <nuget:IconUrlToVisibilityConverter
    x:Key="IconUrlToVisibilityConverter" />
  <nuget:NuGetFrameworkToStringConverter
    x:Key="NuGetFrameworkToStringConverter" />
  <nuget:NuGetFrameworkToVisibilityConverter
    x:Key="NuGetFrameworkToVisibilityConverter" />
  <nuget:NullToVisibilityConverter
    x:Key="NullToVisibilityConverter" />
  <nuget:InverseNullToVisibilityConverter
    x:Key="InverseNullToVisibilityConverter" />
  <nuget:EnumerableToVisibilityConverter
    Inverted="true"
    x:Key="EmptyEnumerableToVisibilityConverter" />
  <nuget:EnumerableToVisibilityConverter
    x:Key="EnumerableToVisibilityConverter" />
  <nuget:BooleanToVisibilityConverter
    x:Key="BooleanToVisibilityConverter" />
  <nuget:BooleanToVisibilityConverter
    Inverted="True"
    x:Key="InvertedBooleanToVisibilityConverter" />
  <nuget:DownloadCountToVisibilityConverter
    x:Key="DownloadCountToVisibilityConverter" />
  <nuget:FontSizeConverter
    Scale="122"
    x:Key="Font122PercentSizeConverter" />
  <nuget:FontSizeConverter
    Scale="155"
    x:Key="Font155PercentSizeConverter" />
  <nuget:VersionToStringConverter
    x:Key="VersionToStringConverter" />
  <nuget:ProjectAndSolutionViewHeightConverter
    x:Key="ProjectAndSolutionViewHeightConverter" />
  <nuget:ProjectAndSolutionViewMinHeightConverter
    x:Key="ProjectAndSolutionViewMinHeightConverter"/>
  <nuget:NotEqualConverter x:Key="NotEqualConverter"/>

  <!-- Default styles -->
  <Style 
    x:Key="{x:Type ComboBox}"
    TargetType="{x:Type ComboBox}"
    BasedOn="{StaticResource {x:Static nuget:Styles.ThemedComboStyleKey}}"/>

  <Style 
    x:Key="{x:Type ScrollBar}"
    TargetType="{x:Type ScrollBar}"
    BasedOn="{StaticResource {x:Static nuget:Styles.ScrollBarStyleKey}}"/>

  <Style 
    x:Key="{x:Type ScrollViewer}"
    TargetType="{x:Type ScrollViewer}"
    BasedOn="{StaticResource {x:Static nuget:Styles.ScrollViewerStyleKey}}"/>

  <DataTemplate
    DataType="{x:Type nuget:PackageDependencyMetadata}">
    <TextBlock
      Text="{Binding}" />
  </DataTemplate>

  <DataTemplate
    DataType="{x:Type nuget:PackageItemListViewModel}">
    <nuget:PackageItemControl
      DataContext="{Binding}" />
  </DataTemplate>

  <Style
    x:Key="TooltipStyle"
    TargetType="{x:Type TextBlock}">
    <Setter
      Property="TextWrapping"
      Value="Wrap" />
    <Setter
      Property="MaxWidth"
      Value="300" />
  </Style>

  <Style
    TargetType="{x:Type Hyperlink}"
    x:Key="HyperlinkStyle">
    <Setter
      Property="Foreground"
      Value="{DynamicResource {x:Static nuget:Brushes.ControlLinkTextKey}}" />

    <Style.Triggers>
      <Trigger
        Property="IsMouseOver"
        Value="True">
        <Setter
          Property="Foreground"
          Value="{DynamicResource {x:Static nuget:Brushes.ControlLinkTextHoverKey}}" />
      </Trigger>

      <Trigger
        Property="IsMouseOver"
        Value="False">
        <Setter
          Property="TextBlock.TextDecorations"
          Value="{x:Null}" />
      </Trigger>

      <Trigger
        Property="NavigateUri"
        Value="{x:Null}">
        <Setter
          Property="Foreground"
          Value="{DynamicResource {x:Static nuget:Brushes.WindowTextKey}}" />
        <Setter
          Property="TextBlock.TextDecorations"
          Value="{x:Null}" />
        <Setter
          Property="IsEnabled"
          Value="False" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style
    x:Key="PackageIconImageStyle"
    TargetType="{x:Type Image}">
    <Setter
      Property="HorizontalAlignment"
      Value="Center" />
    <Setter
      Property="StretchDirection"
      Value="DownOnly" />
    <Setter
      Property="Stretch"
      Value="Fill" />
    <Style.Triggers>
      <EventTrigger
        RoutedEvent="ImageFailed">
        <BeginStoryboard>
          <Storyboard>
            <ObjectAnimationUsingKeyFrames
              Storyboard.TargetProperty="Source"
              FillBehavior="HoldEnd">
              <DiscreteObjectKeyFrame
                KeyTime="0:0:0"
                Value="{StaticResource BitmapImage_DefaultIcon}">
              </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
          </Storyboard>
        </BeginStoryboard>
      </EventTrigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>