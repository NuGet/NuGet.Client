NuGet.IFileSystem
NuGet.IPackage
NuGet.IPackage.AssemblyReferences.get -> System.Collections.Generic.IEnumerable<NuGet.IPackageAssemblyReference>
NuGet.IPackage.ExtractContents(NuGet.IFileSystem fileSystem, string extractPath) -> void
NuGet.IPackage.GetFiles() -> System.Collections.Generic.IEnumerable<NuGet.IPackageFile>
NuGet.IPackage.GetStream() -> System.IO.Stream
NuGet.IPackage.GetSupportedFrameworks() -> System.Collections.Generic.IEnumerable<System.Runtime.Versioning.FrameworkName>
NuGet.IPackage.IsAbsoluteLatestVersion.get -> bool
NuGet.IPackage.IsLatestVersion.get -> bool
NuGet.IPackage.Listed.get -> bool
NuGet.IPackage.Published.get -> System.DateTimeOffset?
NuGet.IPackageAssemblyReference
NuGet.IPackageAssemblyReference.Name.get -> string
NuGet.IPackageFile
NuGet.IPackageFile.EffectivePath.get -> string
NuGet.IPackageFile.GetStream() -> System.IO.Stream
NuGet.IPackageFile.Path.get -> string
NuGet.IPackageFile.TargetFramework.get -> System.Runtime.Versioning.FrameworkName
NuGet.IPackageRepository
NuGet.IPackageRepository.AddPackage(NuGet.IPackage package) -> void
NuGet.IPackageRepository.GetPackages() -> System.Linq.IQueryable<NuGet.IPackage>
NuGet.IPackageRepository.PackageSaveMode.get -> NuGet.PackageSaveModes
NuGet.IPackageRepository.PackageSaveMode.set -> void
NuGet.IPackageRepository.RemovePackage(NuGet.IPackage package) -> void
NuGet.IPackageRepository.Source.get -> string
NuGet.IPackageRepository.SupportsPrereleasePackages.get -> bool
NuGet.PackageSaveModes
NuGet.PackageSaveModes.None = 0 -> NuGet.PackageSaveModes
NuGet.PackageSaveModes.Nupkg = 2 -> NuGet.PackageSaveModes
NuGet.PackageSaveModes.Nuspec = 1 -> NuGet.PackageSaveModes
NuGet.SemanticVersion
NuGet.SemanticVersion.CompareTo(NuGet.SemanticVersion other) -> int
NuGet.SemanticVersion.CompareTo(object obj) -> int
NuGet.SemanticVersion.Equals(NuGet.SemanticVersion other) -> bool
NuGet.SemanticVersion.GetOriginalVersionComponents() -> string[]
NuGet.SemanticVersion.SemanticVersion(System.Version version) -> void
NuGet.SemanticVersion.SemanticVersion(System.Version version, string specialVersion) -> void
NuGet.SemanticVersion.SemanticVersion(int major, int minor, int build, int revision) -> void
NuGet.SemanticVersion.SemanticVersion(int major, int minor, int build, string specialVersion) -> void
NuGet.SemanticVersion.SemanticVersion(string version) -> void
NuGet.SemanticVersion.SpecialVersion.get -> string
NuGet.SemanticVersion.ToNormalizedString() -> string
NuGet.SemanticVersion.Version.get -> System.Version
NuGet.VisualStudio.IRegistryKey
NuGet.VisualStudio.IRegistryKey.Close() -> void
NuGet.VisualStudio.IRegistryKey.GetValue(string name) -> object
NuGet.VisualStudio.IRegistryKey.OpenSubKey(string name) -> NuGet.VisualStudio.IRegistryKey
NuGet.VisualStudio.IVsCredentialProvider
NuGet.VisualStudio.IVsCredentialProvider.GetCredentialsAsync(System.Uri uri, System.Net.IWebProxy proxy, bool isProxyRequest, bool isRetry, bool nonInteractive, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Net.ICredentials>
NuGet.VisualStudio.IVsFrameworkCompatibility
NuGet.VisualStudio.IVsFrameworkCompatibility.GetFrameworksSupportingNetStandard(System.Runtime.Versioning.FrameworkName frameworkName) -> System.Collections.Generic.IEnumerable<System.Runtime.Versioning.FrameworkName>
NuGet.VisualStudio.IVsFrameworkCompatibility.GetNearest(System.Runtime.Versioning.FrameworkName targetFramework, System.Collections.Generic.IEnumerable<System.Runtime.Versioning.FrameworkName> frameworks) -> System.Runtime.Versioning.FrameworkName
NuGet.VisualStudio.IVsFrameworkCompatibility.GetNetStandardFrameworks() -> System.Collections.Generic.IEnumerable<System.Runtime.Versioning.FrameworkName>
NuGet.VisualStudio.IVsFrameworkCompatibility2
NuGet.VisualStudio.IVsFrameworkCompatibility2.GetNearest(System.Runtime.Versioning.FrameworkName targetFramework, System.Collections.Generic.IEnumerable<System.Runtime.Versioning.FrameworkName> fallbackTargetFrameworks, System.Collections.Generic.IEnumerable<System.Runtime.Versioning.FrameworkName> frameworks) -> System.Runtime.Versioning.FrameworkName
NuGet.VisualStudio.IVsFrameworkCompatibility3
NuGet.VisualStudio.IVsFrameworkCompatibility3.GetNearest(NuGet.VisualStudio.IVsNuGetFramework targetFramework, System.Collections.Generic.IEnumerable<NuGet.VisualStudio.IVsNuGetFramework> fallbackTargetFrameworks, System.Collections.Generic.IEnumerable<NuGet.VisualStudio.IVsNuGetFramework> frameworks) -> NuGet.VisualStudio.IVsNuGetFramework
NuGet.VisualStudio.IVsFrameworkCompatibility3.GetNearest(NuGet.VisualStudio.IVsNuGetFramework targetFramework, System.Collections.Generic.IEnumerable<NuGet.VisualStudio.IVsNuGetFramework> frameworks) -> NuGet.VisualStudio.IVsNuGetFramework
NuGet.VisualStudio.IVsFrameworkParser
NuGet.VisualStudio.IVsFrameworkParser.GetShortFrameworkName(System.Runtime.Versioning.FrameworkName frameworkName) -> string
NuGet.VisualStudio.IVsFrameworkParser.ParseFrameworkName(string shortOrFullName) -> System.Runtime.Versioning.FrameworkName
NuGet.VisualStudio.IVsFrameworkParser2
NuGet.VisualStudio.IVsFrameworkParser2.TryParse(string input, out NuGet.VisualStudio.IVsNuGetFramework nuGetFramework) -> bool
NuGet.VisualStudio.IVsGlobalPackagesInitScriptExecutor
NuGet.VisualStudio.IVsGlobalPackagesInitScriptExecutor.ExecuteInitScriptAsync(string packageId, string packageVersion) -> System.Threading.Tasks.Task<bool>
NuGet.VisualStudio.IVsNuGetFramework
NuGet.VisualStudio.IVsNuGetFramework.TargetFrameworkMoniker.get -> string
NuGet.VisualStudio.IVsNuGetFramework.TargetPlatformMinVersion.get -> string
NuGet.VisualStudio.IVsNuGetFramework.TargetPlatformMoniker.get -> string
NuGet.VisualStudio.IVsPackageInstaller
NuGet.VisualStudio.IVsPackageInstaller.InstallPackage(NuGet.IPackageRepository repository, EnvDTE.Project project, string packageId, string version, bool ignoreDependencies, bool skipAssemblyReferences) -> void
NuGet.VisualStudio.IVsPackageInstaller.InstallPackage(string source, EnvDTE.Project project, string packageId, System.Version version, bool ignoreDependencies) -> void
NuGet.VisualStudio.IVsPackageInstaller.InstallPackage(string source, EnvDTE.Project project, string packageId, string version, bool ignoreDependencies) -> void
NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromRegistryRepository(string keyName, bool isPreUnzipped, bool skipAssemblyReferences, EnvDTE.Project project, System.Collections.Generic.IDictionary<string, string> packageVersions) -> void
NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromRegistryRepository(string keyName, bool isPreUnzipped, bool skipAssemblyReferences, bool ignoreDependencies, EnvDTE.Project project, System.Collections.Generic.IDictionary<string, string> packageVersions) -> void
NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromVSExtensionRepository(string extensionId, bool isPreUnzipped, bool skipAssemblyReferences, EnvDTE.Project project, System.Collections.Generic.IDictionary<string, string> packageVersions) -> void
NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromVSExtensionRepository(string extensionId, bool isPreUnzipped, bool skipAssemblyReferences, bool ignoreDependencies, EnvDTE.Project project, System.Collections.Generic.IDictionary<string, string> packageVersions) -> void
NuGet.VisualStudio.IVsPackageInstaller2
NuGet.VisualStudio.IVsPackageInstaller2.InstallLatestPackage(string source, EnvDTE.Project project, string packageId, bool includePrerelease, bool ignoreDependencies) -> void
NuGet.VisualStudio.IVsPackageInstallerEvents
NuGet.VisualStudio.IVsPackageInstallerEvents.PackageInstalled -> NuGet.VisualStudio.VsPackageEventHandler
NuGet.VisualStudio.IVsPackageInstallerEvents.PackageInstalling -> NuGet.VisualStudio.VsPackageEventHandler
NuGet.VisualStudio.IVsPackageInstallerEvents.PackageReferenceAdded -> NuGet.VisualStudio.VsPackageEventHandler
NuGet.VisualStudio.IVsPackageInstallerEvents.PackageReferenceRemoved -> NuGet.VisualStudio.VsPackageEventHandler
NuGet.VisualStudio.IVsPackageInstallerEvents.PackageUninstalled -> NuGet.VisualStudio.VsPackageEventHandler
NuGet.VisualStudio.IVsPackageInstallerEvents.PackageUninstalling -> NuGet.VisualStudio.VsPackageEventHandler
NuGet.VisualStudio.IVsPackageInstallerProjectEvents
NuGet.VisualStudio.IVsPackageInstallerProjectEvents.BatchEnd -> NuGet.VisualStudio.VsPackageProjectEventHandler
NuGet.VisualStudio.IVsPackageInstallerProjectEvents.BatchStart -> NuGet.VisualStudio.VsPackageProjectEventHandler
NuGet.VisualStudio.IVsPackageInstallerServices
NuGet.VisualStudio.IVsPackageInstallerServices.GetInstalledPackages() -> System.Collections.Generic.IEnumerable<NuGet.VisualStudio.IVsPackageMetadata>
NuGet.VisualStudio.IVsPackageInstallerServices.GetInstalledPackages(EnvDTE.Project project) -> System.Collections.Generic.IEnumerable<NuGet.VisualStudio.IVsPackageMetadata>
NuGet.VisualStudio.IVsPackageInstallerServices.IsPackageInstalled(EnvDTE.Project project, string id) -> bool
NuGet.VisualStudio.IVsPackageInstallerServices.IsPackageInstalled(EnvDTE.Project project, string id, NuGet.SemanticVersion version) -> bool
NuGet.VisualStudio.IVsPackageInstallerServices.IsPackageInstalledEx(EnvDTE.Project project, string id, string versionString) -> bool
NuGet.VisualStudio.IVsPackageManagerProvider
NuGet.VisualStudio.IVsPackageManagerProvider.CheckForPackageAsync(string packageId, string projectName, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>
NuGet.VisualStudio.IVsPackageManagerProvider.Description.get -> string
NuGet.VisualStudio.IVsPackageManagerProvider.GoToPackage(string packageId, string projectName) -> void
NuGet.VisualStudio.IVsPackageManagerProvider.PackageManagerId.get -> string
NuGet.VisualStudio.IVsPackageManagerProvider.PackageManagerName.get -> string
NuGet.VisualStudio.IVsPackageMetadata
NuGet.VisualStudio.IVsPackageMetadata.Authors.get -> System.Collections.Generic.IEnumerable<string>
NuGet.VisualStudio.IVsPackageMetadata.Description.get -> string
NuGet.VisualStudio.IVsPackageMetadata.Id.get -> string
NuGet.VisualStudio.IVsPackageMetadata.InstallPath.get -> string
NuGet.VisualStudio.IVsPackageMetadata.Title.get -> string
NuGet.VisualStudio.IVsPackageMetadata.Version.get -> NuGet.SemanticVersion
NuGet.VisualStudio.IVsPackageMetadata.VersionString.get -> string
NuGet.VisualStudio.IVsPackageProjectMetadata
NuGet.VisualStudio.IVsPackageProjectMetadata.BatchId.get -> string
NuGet.VisualStudio.IVsPackageProjectMetadata.ProjectName.get -> string
NuGet.VisualStudio.IVsPackageRestorer
NuGet.VisualStudio.IVsPackageRestorer.IsUserConsentGranted() -> bool
NuGet.VisualStudio.IVsPackageRestorer.RestorePackages(EnvDTE.Project project) -> void
NuGet.VisualStudio.IVsPackageSourceProvider
NuGet.VisualStudio.IVsPackageSourceProvider.GetSources(bool includeUnOfficial, bool includeDisabled) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>
NuGet.VisualStudio.IVsPackageSourceProvider.SourcesChanged -> System.EventHandler
NuGet.VisualStudio.IVsPackageUninstaller
NuGet.VisualStudio.IVsPackageUninstaller.UninstallPackage(EnvDTE.Project project, string packageId, bool removeDependencies) -> void
NuGet.VisualStudio.IVsPathContext
NuGet.VisualStudio.IVsPathContext.FallbackPackageFolders.get -> System.Collections.IEnumerable
NuGet.VisualStudio.IVsPathContext.TryResolvePackageAsset(string packageAssetPath, out string packageDirectoryPath) -> bool
NuGet.VisualStudio.IVsPathContext.UserPackageFolder.get -> string
NuGet.VisualStudio.IVsPathContext2
NuGet.VisualStudio.IVsPathContext2.SolutionPackageFolder.get -> string
NuGet.VisualStudio.IVsPathContextProvider
NuGet.VisualStudio.IVsPathContextProvider.TryCreateContext(string projectUniqueName, out NuGet.VisualStudio.IVsPathContext context) -> bool
NuGet.VisualStudio.IVsPathContextProvider2
NuGet.VisualStudio.IVsPathContextProvider2.TryCreateNoSolutionContext(out NuGet.VisualStudio.IVsPathContext vsPathContext) -> bool
NuGet.VisualStudio.IVsPathContextProvider2.TryCreateSolutionContext(out NuGet.VisualStudio.IVsPathContext2 context) -> bool
NuGet.VisualStudio.IVsPathContextProvider2.TryCreateSolutionContext(string solutionDirectory, out NuGet.VisualStudio.IVsPathContext2 context) -> bool
NuGet.VisualStudio.IVsProjectJsonToPackageReferenceMigrateResult
NuGet.VisualStudio.IVsProjectJsonToPackageReferenceMigrateResult.ErrorMessage.get -> string
NuGet.VisualStudio.IVsProjectJsonToPackageReferenceMigrateResult.IsSuccess.get -> bool
NuGet.VisualStudio.IVsProjectJsonToPackageReferenceMigrator
NuGet.VisualStudio.IVsProjectJsonToPackageReferenceMigrator.MigrateProjectJsonToPackageReferenceAsync(string projectUniqueName) -> System.Threading.Tasks.Task<object>
NuGet.VisualStudio.IVsSemanticVersionComparer
NuGet.VisualStudio.IVsSemanticVersionComparer.Compare(string versionA, string versionB) -> int
NuGet.VisualStudio.IVsTemplateWizard
NuGet.VisualStudio.VsPackageEventHandler
NuGet.VisualStudio.VsPackageProjectEventHandler
override NuGet.SemanticVersion.Equals(object obj) -> bool
override NuGet.SemanticVersion.GetHashCode() -> int
override NuGet.SemanticVersion.ToString() -> string
static NuGet.SemanticVersion.Parse(string version) -> NuGet.SemanticVersion
static NuGet.SemanticVersion.ParseOptionalVersion(string version) -> NuGet.SemanticVersion
static NuGet.SemanticVersion.TryParse(string version, out NuGet.SemanticVersion value) -> bool
static NuGet.SemanticVersion.TryParseStrict(string version, out NuGet.SemanticVersion value) -> bool
static NuGet.SemanticVersion.operator !=(NuGet.SemanticVersion version1, NuGet.SemanticVersion version2) -> bool
static NuGet.SemanticVersion.operator <(NuGet.SemanticVersion version1, NuGet.SemanticVersion version2) -> bool
static NuGet.SemanticVersion.operator <=(NuGet.SemanticVersion version1, NuGet.SemanticVersion version2) -> bool
static NuGet.SemanticVersion.operator ==(NuGet.SemanticVersion version1, NuGet.SemanticVersion version2) -> bool
static NuGet.SemanticVersion.operator >(NuGet.SemanticVersion version1, NuGet.SemanticVersion version2) -> bool
static NuGet.SemanticVersion.operator >=(NuGet.SemanticVersion version1, NuGet.SemanticVersion version2) -> bool
