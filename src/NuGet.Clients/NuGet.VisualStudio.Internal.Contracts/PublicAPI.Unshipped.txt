#nullable enable
NuGet.VisualStudio.Internal.Contracts.IInstalledAndTransitivePackages.TransitivePackages.get -> System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.ITransitivePackageReferenceContextInfo!>!
NuGet.VisualStudio.Internal.Contracts.INuGetProjectManagerService.GetPackageFoldersAsync(System.Collections.Generic.IReadOnlyCollection<string!>! projectIds, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyCollection<string!>!>
NuGet.VisualStudio.Internal.Contracts.INuGetSearchService.GetAllPackagesAsync(System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.IProjectContextInfo!>! projectContextInfos, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.PackageSourceContextInfo!>! packageSources, System.Collections.Generic.IReadOnlyCollection<string!>! targetFrameworks, NuGet.Protocol.Core.Types.SearchFilter! searchFilter, NuGet.VisualStudio.Internal.Contracts.ItemFilter itemFilter, bool isSolution, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.PackageSearchMetadataContextInfo!>!>
NuGet.VisualStudio.Internal.Contracts.INuGetSearchService.GetPackageVersionsAsync(NuGet.Packaging.Core.PackageIdentity! identity, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.PackageSourceContextInfo!>! packageSources, bool includePrerelease, bool isTransitive, System.Collections.Generic.IEnumerable<NuGet.VisualStudio.Internal.Contracts.IProjectContextInfo!>! projects, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.VersionInfoContextInfo!>!>
NuGet.VisualStudio.Internal.Contracts.INuGetSearchService.GetPackageMetadataFromLocalSourcesAsync(NuGet.Packaging.Core.PackageIdentity! identity, NuGet.VisualStudio.Internal.Contracts.IProjectContextInfo! currentProject, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.PackageSourceContextInfo!>! packageSources, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<NuGet.VisualStudio.Internal.Contracts.PackageSearchMetadataContextInfo!>
NuGet.VisualStudio.Internal.Contracts.INuGetSearchService.GetTotalCountAsync(int maxCount, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.IProjectContextInfo!>! projectContextInfos, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.PackageSourceContextInfo!>! packageSources, System.Collections.Generic.IReadOnlyCollection<string!>! targetFrameworks, NuGet.Protocol.Core.Types.SearchFilter! searchFilter, NuGet.VisualStudio.Internal.Contracts.ItemFilter itemFilter, bool isSolution, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<int>
NuGet.VisualStudio.Internal.Contracts.INuGetSearchService.SearchAsync(System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.IProjectContextInfo!>! projectContextInfos, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.PackageSourceContextInfo!>! packageSources, System.Collections.Generic.IReadOnlyCollection<string!>! targetFrameworks, string! searchText, NuGet.Protocol.Core.Types.SearchFilter! searchFilter, NuGet.VisualStudio.Internal.Contracts.ItemFilter itemFilter, bool isSolution, bool useRecommender, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<NuGet.VisualStudio.Internal.Contracts.SearchResultContextInfo!>
NuGet.VisualStudio.Internal.Contracts.INuGetProjectManagerService.GetInstallActionsAsync(System.Collections.Generic.IReadOnlyCollection<string!>! projectIds, NuGet.Packaging.Core.PackageIdentity! packageIdentity, NuGet.PackageManagement.VersionConstraints versionConstraints, bool includePrelease, NuGet.Resolver.DependencyBehavior dependencyBehavior, System.Collections.Generic.IReadOnlyList<string!>! packageSourceNames, NuGet.Versioning.VersionRange! versionRange, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<NuGet.VisualStudio.Internal.Contracts.ProjectAction!>!>
NuGet.VisualStudio.Internal.Contracts.INuGetSearchService.GetPackageVersionsAsync(NuGet.Packaging.Core.PackageIdentity! identity, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.PackageSourceContextInfo!>! packageSources, bool includePrerelease, bool isTransitive, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.VersionInfoContextInfo!>!>
NuGet.VisualStudio.Internal.Contracts.ITransitivePackageReferenceContextInfo
NuGet.VisualStudio.Internal.Contracts.ITransitivePackageReferenceContextInfo.TransitiveOrigins.get -> System.Collections.Generic.IEnumerable<NuGet.VisualStudio.Internal.Contracts.IPackageReferenceContextInfo!>!
NuGet.VisualStudio.Internal.Contracts.InstalledAndTransitivePackages.InstalledAndTransitivePackages(System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.IPackageReferenceContextInfo!>? installedPackages, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.ITransitivePackageReferenceContextInfo!>? transitivePackages) -> void
NuGet.VisualStudio.Internal.Contracts.InstalledAndTransitivePackages.TransitivePackages.get -> System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.ITransitivePackageReferenceContextInfo!>!
NuGet.VisualStudio.Internal.Contracts.PackageSearchMetadataContextInfo.TransitiveOrigins.get -> System.Collections.Generic.IReadOnlyCollection<NuGet.Packaging.Core.PackageIdentity!>?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReference
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReference.TransitiveOrigins.get -> System.Collections.Generic.IEnumerable<NuGet.Packaging.PackageReference!>!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReference.TransitiveOrigins.set -> void
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReference.TransitivePackageReference(NuGet.Packaging.PackageReference! pr) -> void
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.AllowedVersions.get -> NuGet.Versioning.VersionRange?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.Framework.get -> NuGet.Frameworks.NuGetFramework?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.Identity.get -> NuGet.Packaging.Core.PackageIdentity!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.IsAutoReferenced.get -> bool
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.IsDevelopmentDependency.get -> bool
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.IsUserInstalled.get -> bool
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.TransitiveOrigins.get -> System.Collections.Generic.IEnumerable<NuGet.VisualStudio.Internal.Contracts.IPackageReferenceContextInfo!>!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.TransitivePackageReferenceContextInfo(NuGet.Packaging.Core.PackageIdentity! identity, NuGet.Frameworks.NuGetFramework? framework) -> void
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.Authors.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.DependencySets.get -> System.Collections.Generic.IEnumerable<NuGet.Packaging.PackageDependencyGroup!>!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.Description.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.DownloadCount.get -> long?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.GetDeprecationMetadataAsync() -> System.Threading.Tasks.Task<NuGet.Protocol.PackageDeprecationMetadata!>!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.GetVersionsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<NuGet.Protocol.Core.Types.VersionInfo!>!>!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.IconUrl.get -> System.Uri!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.Identity.get -> NuGet.Packaging.Core.PackageIdentity!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.IsListed.get -> bool
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.LicenseMetadata.get -> NuGet.Packaging.LicenseMetadata!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.LicenseUrl.get -> System.Uri!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.Owners.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageDetailsUrl.get -> System.Uri!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PrefixReserved.get -> bool
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.ProjectUrl.get -> System.Uri!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.Published.get -> System.DateTimeOffset?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.ReadmeUrl.get -> System.Uri!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.ReportAbuseUrl.get -> System.Uri!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.RequireLicenseAcceptance.get -> bool
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.Summary.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.Tags.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.Title.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.TransitiveOrigins.get -> System.Collections.Generic.IReadOnlyCollection<NuGet.Packaging.Core.PackageIdentity!>!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.TransitivePackageSearchMetadata(NuGet.Protocol.Core.Types.IPackageSearchMetadata! package, System.Collections.Generic.IReadOnlyCollection<NuGet.Packaging.Core.PackageIdentity!>! transitiveOrigins) -> void
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.Vulnerabilities.get -> System.Collections.Generic.IEnumerable<NuGet.Protocol.PackageVulnerabilityMetadata!>!
NuGet.VisualStudio.Internal.Contracts.TransitiveVersionInfoContextInfo
NuGet.VisualStudio.Internal.Contracts.TransitiveVersionInfoContextInfo.TransitiveVersionInfoContextInfo(NuGet.Versioning.NuGetVersion! version, long? downloadCount) -> void
override NuGet.VisualStudio.Internal.Contracts.TransitiveVersionInfoContextInfo.PackageDeprecationMetadata.get -> NuGet.VisualStudio.Internal.Contracts.PackageDeprecationMetadataContextInfo?
static NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.Create(NuGet.VisualStudio.Internal.Contracts.TransitivePackageReference! transitivePackageReference) -> NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo!
static NuGet.VisualStudio.Internal.Contracts.TransitiveVersionInfoContextInfo.Create(NuGet.Protocol.Core.Types.VersionInfo! version) -> NuGet.VisualStudio.Internal.Contracts.TransitiveVersionInfoContextInfo!
virtual NuGet.VisualStudio.Internal.Contracts.VersionInfoContextInfo.PackageDeprecationMetadata.get -> NuGet.VisualStudio.Internal.Contracts.PackageDeprecationMetadataContextInfo?
