#nullable enable
NuGet.VisualStudio.Internal.Contracts.IInstalledAndTransitivePackages.TransitivePackages.get -> System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.ITransitivePackageReferenceContextInfo!>!
NuGet.VisualStudio.Internal.Contracts.INuGetProjectManagerService.GetInstallActionsAsync(System.Collections.Generic.IReadOnlyCollection<string!>! projectIds, NuGet.Packaging.Core.PackageIdentity! packageIdentity, NuGet.PackageManagement.VersionConstraints versionConstraints, bool includePrelease, NuGet.Resolver.DependencyBehavior dependencyBehavior, System.Collections.Generic.IReadOnlyList<string!>! packageSourceNames, NuGet.Versioning.VersionRange! versionRange, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<NuGet.VisualStudio.Internal.Contracts.ProjectAction!>!>
NuGet.VisualStudio.Internal.Contracts.ITransitivePackageReferenceContextInfo
NuGet.VisualStudio.Internal.Contracts.ITransitivePackageReferenceContextInfo.TransitiveOrigins.get -> System.Collections.Generic.IEnumerable<NuGet.VisualStudio.Internal.Contracts.IPackageReferenceContextInfo!>!
NuGet.VisualStudio.Internal.Contracts.InstalledAndTransitivePackages.InstalledAndTransitivePackages(System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.IPackageReferenceContextInfo!>? installedPackages, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.ITransitivePackageReferenceContextInfo!>? transitivePackages) -> void
NuGet.VisualStudio.Internal.Contracts.InstalledAndTransitivePackages.TransitivePackages.get -> System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.ITransitivePackageReferenceContextInfo!>!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReference
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReference.TransitiveOrigins.get -> System.Collections.Generic.IEnumerable<NuGet.Packaging.PackageReference!>!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReference.TransitiveOrigins.set -> void
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReference.TransitivePackageReference(NuGet.Packaging.PackageReference! pr) -> void
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.AllowedVersions.get -> NuGet.Versioning.VersionRange?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.Framework.get -> NuGet.Frameworks.NuGetFramework?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.Identity.get -> NuGet.Packaging.Core.PackageIdentity!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.IsAutoReferenced.get -> bool
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.IsDevelopmentDependency.get -> bool
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.IsUserInstalled.get -> bool
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.TransitiveOrigins.get -> System.Collections.Generic.IEnumerable<NuGet.VisualStudio.Internal.Contracts.IPackageReferenceContextInfo!>!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.TransitivePackageReferenceContextInfo(NuGet.Packaging.Core.PackageIdentity! identity, NuGet.Frameworks.NuGetFramework? framework) -> void
static NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.Create(NuGet.VisualStudio.Internal.Contracts.TransitivePackageReference! transitivePackageReference) -> NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo!
