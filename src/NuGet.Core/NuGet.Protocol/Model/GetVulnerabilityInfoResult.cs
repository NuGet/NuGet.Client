// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

#nullable enable

using System;
using System.Collections.Generic;

namespace NuGet.Protocol.Model
{
    /// <summary>Represents the result of <see cref="IVulnerabilityInfoResource.GetVulnerabilityInfoAsync(Core.Types.SourceCacheContext, Common.ILogger, System.Threading.CancellationToken)"/></summary>
    /// <remarks>Vulnerability data from a package source typically is spread across multiple files. Therefore, it's
    /// possible for some data to be retrieved successfully, while other data failed. This type allows partial data
    /// to be returned along with error information.</remarks>
    public class GetVulnerabilityInfoResult
    {
        /// <summary></summary>
        public IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<VulnerabilityInfo>>>? KnownVulnerabilities { get; }
        public IReadOnlyList<Exception>? Exceptions { get; }

        public GetVulnerabilityInfoResult(
            IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<VulnerabilityInfo>>>? knownVulnerabilities,
            IReadOnlyList<Exception>? exceptions)
        {
            if (knownVulnerabilities == null && (exceptions == null || exceptions.Count == 0))
            {
                throw new InvalidOperationException("The result cannot have null known vulnerabilities and no exceptions");
            }

            KnownVulnerabilities = knownVulnerabilities;
            Exceptions = exceptions;
        }
    }
}
