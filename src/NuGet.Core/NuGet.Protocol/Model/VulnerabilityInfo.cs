// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

#nullable enable

using System;
using Newtonsoft.Json;
using NuGet.Shared;
using NuGet.Versioning;

namespace NuGet.Protocol.Model
{
    public class VulnerabilityInfo : IEquatable<VulnerabilityInfo>
    {
        [JsonProperty(PropertyName = "url")]
        public Uri Url { get; }

        [JsonProperty(PropertyName = "severity")]
        public int Severity { get; }

        [JsonProperty(PropertyName = "versions")]
        public VersionRange Versions { get; }

        [JsonConstructor]
        public VulnerabilityInfo(Uri url, int severity, VersionRange versions)
        {
            Url = url ?? throw new ArgumentNullException(paramName: nameof(url));
            Severity = severity;
            Versions = versions ?? throw new ArgumentNullException(nameof(versions));
        }

        public bool Equals(VulnerabilityInfo? other)
        {
            if (other is null)
            {
                return false;
            }

            bool equals =
                Url == other.Url &&
                Severity == other.Severity &&
                Versions == other.Versions;
            return equals;
        }

        public override bool Equals(object? obj) => Equals(obj as VulnerabilityInfo);

        public override int GetHashCode()
        {
            var hashCode = new HashCodeCombiner();
            hashCode.AddObject(Url.OriginalString);
            hashCode.AddStruct(Severity);
            hashCode.AddObject(Versions);
            return hashCode.CombinedHash;
        }
    }
}
