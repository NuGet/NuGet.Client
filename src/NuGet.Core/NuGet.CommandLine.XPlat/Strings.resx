<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApiKey_Description" xml:space="preserve">
    <value>The API key for the server.</value>
  </data>
  <data name="App_FullName" xml:space="preserve">
    <value>NuGet Command Line</value>
  </data>
  <data name="ConsoleConfirmMessage" xml:space="preserve">
    <value>{0} (y/N) </value>
  </data>
  <data name="ConsoleConfirmMessageAccept" xml:space="preserve">
    <value>y</value>
  </data>
  <data name="Delete_Description" xml:space="preserve">
    <value>Deletes a package from the server.</value>
  </data>
  <data name="Delete_MissingArguments" xml:space="preserve">
    <value>Please provide arguments for package id and package version.</value>
  </data>
  <data name="Delete_PackageIdAndVersion_Description" xml:space="preserve">
    <value>The Package Id and version.</value>
  </data>
  <data name="Log_Committing" xml:space="preserve">
    <value>Committing restore...</value>
  </data>
  <data name="Log_FoundProjectRoot" xml:space="preserve">
    <value>Found project root directory: {0}.</value>
  </data>
  <data name="Log_LoadedProject" xml:space="preserve">
    <value>Loaded project {0} from {1}.</value>
  </data>
  <data name="Log_ReadingProject" xml:space="preserve">
    <value>Reading project file {0}.</value>
  </data>
  <data name="Log_RestoreComplete" xml:space="preserve">
    <value>Restore completed in {0}ms.</value>
  </data>
  <data name="Log_RestoreFailed" xml:space="preserve">
    <value>Restore failed in {0}ms.</value>
  </data>
  <data name="Log_RunningNonParallelRestore" xml:space="preserve">
    <value>Running non-parallel restore.</value>
  </data>
  <data name="Log_RunningParallelRestore" xml:space="preserve">
    <value>Running restore with {0} concurrent jobs.</value>
  </data>
  <data name="Log_UsingPackagesDirectory" xml:space="preserve">
    <value>Using packages directory: {0}.</value>
  </data>
  <data name="NoApiKeyFound" xml:space="preserve">
    <value>No API Key was provided and no API Key could be found for {0}. To save an API Key for a source use the 'setApiKey' command.</value>
  </data>
  <data name="NonInteractive_Description" xml:space="preserve">
    <value>Do not prompt for user input or confirmations.</value>
  </data>
  <data name="Push_Description" xml:space="preserve">
    <value>Pushes a package to the server and publishes it.</value>
  </data>
  <data name="Push_MissingArguments" xml:space="preserve">
    <value>Please specify the path to the package.</value>
  </data>
  <data name="Push_Package_ApiKey_Description" xml:space="preserve">
    <value>Specify the path to the package and your API key to push the package to the server.</value>
  </data>
  <data name="Push_Timeout_Description" xml:space="preserve">
    <value>Specifies the timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes).</value>
  </data>
  <data name="Restore_Arg_ProjectName_Description" xml:space="preserve">
    <value>List of projects and project folders to restore. Each value can be: a path to a project.json or global.json file, or a folder to recursively search for project.json files.</value>
  </data>
  <data name="Restore_Description" xml:space="preserve">
    <value>Restores packages for a project and writes a lock file.</value>
  </data>
  <data name="Restore_Switch_ConfigFile_Description" xml:space="preserve">
    <value>The NuGet configuration file to use.</value>
  </data>
  <data name="Restore_Switch_DisableParallel_Description" xml:space="preserve">
    <value>Disables restoring multiple projects in parallel.</value>
  </data>
  <data name="Restore_Switch_Fallback_Description" xml:space="preserve">
    <value>A list of packages sources to use as a fallback.</value>
  </data>
  <data name="Restore_Switch_Packages_Description" xml:space="preserve">
    <value>Directory to install packages in.</value>
  </data>
  <data name="Restore_Switch_Runtime_Description" xml:space="preserve">
    <value>List of runtime identifiers to restore for.</value>
  </data>
  <data name="Restore_Switch_Source_Description" xml:space="preserve">
    <value>Specifies a NuGet package source to use during the restore.</value>
  </data>
  <data name="Source_Description" xml:space="preserve">
    <value>Specifies the server URL</value>
  </data>
  <data name="Switch_Verbosity" xml:space="preserve">
    <value>The verbosity of logging to use. Allowed values: Debug, Verbose, Information, Minimal, Warning, Error.</value>
    <comment>The allowed values should not be localized as they are Enum variants</comment>
  </data>
  <data name="Error_MissingSourceParameter" xml:space="preserve">
    <value>Source parameter was not specified.</value>
  </data>
  <data name="Push_InvalidTimeout" xml:space="preserve">
    <value>Invalid timeout parameter value.</value>
  </data>
</root>