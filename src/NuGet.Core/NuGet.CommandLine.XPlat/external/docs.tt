<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml.XDocument" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ output extension=".md" #>
<#@ include file="src\NuGet.Core\NuGet.CommandLine.XPlat\external\docsHelpers.t4" #>
<#
    string MakeFormal(string optionName, string shortcut)
    {
        string formalString = null;
        if (shortcut != null)
        {
            formalString = "-" + shortcut + "|";
        }
        return formalString + "--" + optionName;
    }

    bool IsArgument(string type)
    {
        return type == "Argument";
    }

    bool IsOption(string type)
    {
        return type == "Option";
    }

    bool IsExample(string type)
    {
        return type == "Example";
    }

    bool IsSeeAlso(string type)
    {
        return type == "SeeAlso";
    }

    string GetProperty(XElement element)
    {
        switch (element.Name.LocalName)
        {
            case "SingleValueOption":
                return "Option";
            case "SwitchOption":
                return "Option";
            case "Value":
                return "Option";
            case "Argument":
                return "Argument";
            case "Example":
                return "Example";
            case "SeeAlso":
                return "SeeAlso";
            default:
                return "Unknown Element Type " + element.Name.LocalName;
        }
    }

    string GetOptionType(XElement element)
    {
        switch (element.Name.LocalName)
        {
            case "SingleValueOption":
                return "SingleValue";
            case "SwitchOption":
                return "NoValue";
            case "Value":
                return "Value";
            default:
                return "Unknown Element Type " + element.Name.LocalName;
        }
    }

    string GetArgumentName(string argName, string longArgName)
    {
        if (argName == null) return null;
        Char[] charsToProcess = string.IsNullOrEmpty(longArgName) ? argName.ToCharArray() : longArgName.ToCharArray();
        StringBuilder resultNameBuilder = new StringBuilder();

        for (int i = 0; i < charsToProcess.Length; i++)
        {
            char upperChar = char.ToUpper(charsToProcess[i]);
            if (charsToProcess[i] == upperChar && resultNameBuilder.Length != 0)
            {
                resultNameBuilder.Append("_" + upperChar.ToString());
            }
            else
            {
                resultNameBuilder.Append(upperChar);
            }
        }

        return resultNameBuilder.ToString();
    }

    string GetHelpTextWithOverride(Dictionary<string, string> stringDictionary, string helpText)
    {
        if (stringDictionary.ContainsKey(helpText.ToLower() + "_docs"))
        {
            return stringDictionary[helpText.ToLower() + "_docs"];
        }
        else
        {
            return stringDictionary[helpText.ToLower()];
        }
    }

    string commandFile = this.Host.ResolvePath(@"..\..\NuGet.CommandLine.XPlat\Commands\Commands.xml");
    XDocument commands = XDocument.Load(commandFile);

    // harvest all strings in strings.resx to string dictionary, so we can use it later in codegen.
    string stringsResXPath = this.Host.ResolvePath(@"..\..\NuGet.CommandLine.XPlat\Strings.resx");
    XElement resxRoot = XDocument.Load(stringsResXPath).Root;
    var stringDictionary = new Dictionary<string, string>();
    foreach (XElement data in resxRoot.Descendants())
    {
        if (data.Name.LocalName == "data")
        {
            string resName = data.Attribute(XName.Get("name", ""))?.Value;
            string value = data.XPathSelectElement("value")?.Value;
            if (resName != null && value != null)
            {
                stringDictionary.Add(resName.ToLower(), value);
            }
        }
    }
#>
***Run scripts\utils\ttGen.ps1 after changes to update docs.md
***Then run scripts\utils\docsPRGen.ps1 to split into several files in dotnet docs fork.
***
***[Dotnet docs repo contrib guidelines](https://github.com/dotnet/docs/blob/master/CONTRIBUTING.md#process-for-contributing)
<#
     // Generate command docs
     foreach (XElement verb in commands.Descendants(XName.Get("Verb","")))
     {
        string verbName = verb.Attribute(XName.Get("Name", "")).Value;
        string verbFormalName = verbName;
        foreach (XElement noun in verb.Descendants(XName.Get("Noun")))
        {
            string nounName = noun.Attribute(XName.Get("Name", ""))?.Value;
            string nounFormalName = nounName;
            string nounFormalNameCleaned = nounName.Replace("-", "");
            
            string description = noun.Attribute(XName.Get("Description", ""))?.Value;
            if(description == null) 
            {
                throw new InvalidOperationException($"Command declaration missed required attribute. Attribute: Description, Verb: {verbName}, Noun: {nounName}, File: {commandFile}.");
            }
            
            string version = noun.Attribute(XName.Get("Version", ""))?.Value;
            if(version == null) 
            {
                throw new InvalidOperationException($"Command declaration missed required attribute. Attribute: Version, Verb: {verbName}, Noun: {nounName}, File: {commandFile}.");
            }
            
            string stringDictionaryCommandDescriptionKey = (verbFormalName+nounFormalNameCleaned+"CommandDescription").ToLower();
            if(!stringDictionary.ContainsKey(stringDictionaryCommandDescriptionKey))
            {
                throw new InvalidOperationException($"String resource with key is missed. Key: {stringDictionaryCommandDescriptionKey}, File: {stringsResXPath}.");
            }
            
            // calculate commandSyntax
            var commandSyntaxBuilder = new StringBuilder();
            commandSyntaxBuilder.AppendFormat("dotnet nuget {0} {1}", verbFormalName, nounFormalName);
            int lastLineBreak = 0;
            
            foreach (XElement option in noun.Descendants())
            {
                string optionName = option.Attribute(XName.Get("Name", ""))?.Value;
                string shortcut = option.Attribute(XName.Get("Shortcut", ""))?.Value;
                string optionType = option.Attribute(XName.Get("Type", ""))?.Value;
                string optionLongName = option.Attribute(XName.Get("LongName", ""))?.Value;
                string helpText = option.Attribute(XName.Get("Help", ""))?.Value;
                string optionFormalName = MakeFormal(optionName, shortcut);
                bool required =false;

                if (commandSyntaxBuilder.Length - lastLineBreak > 55)
                {
                    // linewrap so line isn't too long.
                    commandSyntaxBuilder.AppendLine();
                    lastLineBreak = commandSyntaxBuilder.Length;
                    commandSyntaxBuilder.Append("   ");
                }

                if (IsArgument(GetProperty(option)))
                {
                    string argumentName = GetArgumentName(optionName, optionLongName);
                    commandSyntaxBuilder.Append(" <" + argumentName + ">");
                }
                else if (IsOption(GetProperty(option)))
                {
                    commandSyntaxBuilder.Append(!required ? " [" : " ");
                    commandSyntaxBuilder.Append(optionLongName != null ? "--" + optionLongName.ToLower() : "--" + optionName.ToLower());
                    commandSyntaxBuilder.Append(!required ? "]" : "");
                }
            }

            string commandSyntax = commandSyntaxBuilder.ToString();
#>
---file:docs\core\tools\dotnet-nuget-<#= verbFormalName #>-<#= nounFormalName #>.md
---
title: dotnet nuget <#= verbFormalName #> <#= nounFormalName #> command
description: The dotnet nuget <#= verbFormalName #> <#= nounFormalName #> command <#= description #> 
ms.date: REPLACE_WITH_CURRENT_DATE_IN_PR_CREATION_TOOL
---
# dotnet nuget <#= verbFormalName #> <#= nounFormalName #>

**This article applies to:** ✔️ .NET Core <#= version#> SDK and later versions

## Name

`dotnet nuget <#= verbFormalName #> <#= nounFormalName #>` - <#= stringDictionary[stringDictionaryCommandDescriptionKey] #>

## Synopsis

```dotnetcli
<#= commandSyntax #>
dotnet nuget <#= verbFormalName #> <#= nounFormalName #> [-h|--help]
```

## Description

The `dotnet nuget <#= verbFormalName #> <#= nounFormalName #>` command <#= description #>
<#
            var headerForArgumentsShown = false;
            var headerForOptionsShown = false; 
            var headerForExamplesShown = false; 
            var headerForSeeAlsosShown = false;
            
            var arguments = new List<OptionItem>();
            var examples = new List<OptionItem>();
            var seeAlsos = new List<OptionItem>();
            var sortedOptions = new List<OptionItem>();

            foreach (XElement option in noun.Descendants())
            {
                string optionName = option.Attribute(XName.Get("Name", ""))?.Value;
                string shortcut = option.Attribute(XName.Get("Shortcut", ""))?.Value;
                string optionLongName = option.Attribute(XName.Get("LongName", ""))?.Value;
                string helpText = option.Attribute(XName.Get("Help", ""))?.Value;

                string titleText = option.Attribute(XName.Get("Title", ""))?.Value;
                string commandText = option.Attribute(XName.Get("Command", ""))?.Value;
                string urlText = option.Attribute(XName.Get("Url", ""))?.Value;

                string optionFormalName = MakeFormal(optionName, shortcut)?.ToLower();

                bool isArgument = IsArgument(GetProperty(option));
                string argumentName = GetArgumentName(optionName, optionLongName);

                var newOptionItem = new OptionItem()
                {
                    Category = GetProperty(option),
                    OptionType = GetOptionType(option),
                    Name = optionName,
                    OptionFormalName = optionFormalName,
                    Shortcut = shortcut,
                    OptionLongName = optionLongName,
                    HelpText = helpText,
                    TitleText = titleText,
                    CommandText = commandText,
                    UrlText = urlText,
                    IsArgument = isArgument,
                    ArgumentName = argumentName,
                };

                switch (newOptionItem.Category)
                {
                    case "Argument":
                        arguments.Add(newOptionItem);
                        break;
                    case "Example":
                        examples.Add(newOptionItem);
                        break;
                    case "SeeAlso":
                        seeAlsos.Add(newOptionItem);
                        break;
                    default:
                        sortedOptions.Add(newOptionItem);
                        break;
                }
            }

            sortedOptions = sortedOptions.OrderBy(i => i.Name).ToList();
#>
<#
            foreach (var argumentItem in arguments)
            {
                if (argumentItem.Category == "Argument")
                {
                    if (!headerForArgumentsShown)
                    {
#>

## Arguments

<#
                        headerForArgumentsShown = true;
                    }
#>
- **`<#= argumentItem.ArgumentName #>`**

  <#= 
      GetHelpTextWithOverride(stringDictionary, argumentItem.HelpText) #>
<#
                }
            }
#>
<#
            foreach (var optionItem in sortedOptions)
            {
                if (!headerForOptionsShown)
                {
#>

## Options

<#
                    headerForOptionsShown = true;
                }

                switch (optionItem.OptionType)
                {
                    case "SingleValue":
#>
- **`<#= optionItem.OptionFormalName #>`**

  <#= GetHelpTextWithOverride(stringDictionary, optionItem.HelpText) #>

<#
                        break;
                    case "NoValue":
#>
- **`<#= optionItem.OptionFormalName #>`**

  <#= GetHelpTextWithOverride(stringDictionary, optionItem.HelpText) #>

<#
                        break;
                    case "Value":
#>
- **`<#= optionItem.OptionFormalName #>`**

  <#= GetHelpTextWithOverride(stringDictionary, optionItem.HelpText) #>

<#
                        break;
                }
            }
#>
<#
            foreach (var exampleItem in examples)
            {
                {
                    if (!headerForExamplesShown)
                    {
#>
## Examples
<#
                        headerForExamplesShown = true;
                    }
#>

- <#= exampleItem.TitleText #>

  ```dotnetcli
  <#= exampleItem.CommandText #>
  ```
<#
                }
            }
#>
<#
            foreach (var seeAlsoItem in seeAlsos)
            {
                if (!headerForSeeAlsosShown)
                {
#>

## See also
<#
                    headerForSeeAlsosShown = true;
                }
#>

- [<#= seeAlsoItem.TitleText #>](<#= seeAlsoItem.UrlText #>)
<#
            }
#>
<#
        }
    }
#>
