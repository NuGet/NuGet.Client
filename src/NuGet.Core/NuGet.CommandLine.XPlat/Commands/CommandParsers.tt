<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml.XDocument" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#
    string InitCaps(string input)
    {
        if (input == null) 
        {
            return null;
        }

        var textInfo = CultureInfo.InvariantCulture.TextInfo;
        var output = textInfo.ToTitleCase(input);
        
        return output;
    }

    bool IsArgument(string type)
    {
        return type == "Argument";
    }

    bool IsOption(string type)
    {
        return type == "Option";
    }

    string GetProperty(XElement element)
    {
        switch (element.Name.LocalName)
        {
            case "SingleValueOption":
                return "Option";
            case "SwitchOption":
                return "Option";
            case "Value":
                return "Option";
            case "Argument":
                return "Argument";
            case "Example":
                return "Example";
            case "SeeAlso":
                return "SeeAlso";
            default:
                return "Unknown Element Type " + element.Name.LocalName;
        }
    }

    string GetOptionType(XElement element)
    {
        switch (element.Name.LocalName)
        {
            case "SingleValueOption":
                return "SingleValue";
            case "SwitchOption":
                return "NoValue";
            case "Value":
                return "Value";
            default:
                return "Unknown Element Type " + element.Name.LocalName;
        }
    }

    string commandFile = this.Host.ResolvePath("Commands.xml");
    XDocument commands = XDocument.Load(commandFile);
#>
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// Do not manually edit this autogenerated file:
// instead modify the neighboring .tt file (text template) and/or NuGet.CommandLine.Xplat\Commands\Commands.xml (data file),
// then re-execute the text template via "run custom tool" on VS context menu for .tt file, or via dotnet-t4 global tool.

using System;
using Microsoft.Extensions.CommandLineUtils;
using NuGet.Common;

namespace NuGet.CommandLine.XPlat
{
    internal static class CommandParsers
    {
        public static void Register(CommandLineApplication app, Func<ILogger> getLogger)
        {
<#
 foreach (XElement command in commands.Descendants(XName.Get("Verb","")))
 {
    string verbName = command.Attribute(XName.Get("Name", "")).Value;
    string verbFormalName = InitCaps(verbName);
#>
            <#= verbFormalName #>VerbParser.Register(app, getLogger);
<#
 }
#>
<#
 foreach (XElement command in commands.Descendants(XName.Get("Command","")))
 {
    string commandName = command.Attribute(XName.Get("Name", "")).Value;
    string commandFormalName = InitCaps(commandName);
#>
            <#= commandFormalName #>CommandParser.Register(app, getLogger);
<#
} // End of CommandParser class
#>
        }
    }
}
