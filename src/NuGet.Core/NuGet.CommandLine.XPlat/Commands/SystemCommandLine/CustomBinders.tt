<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml.XDocument" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Collections" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
<#@ include file="Utils.tt" #>
// Do not manually edit this autogenerated file:
// instead modify the neighboring .tt file (text template) and/or NuGet.CommandLine.Xplat\Commands\SystemCommandLine\Commands.xml (data file),
// then re-execute the text template via "run custom tool" on VS context menu for .tt file, or via dotnet-t4 global tool.

using System.CommandLine;
using System.CommandLine.Binding;
using NuGet.Commands;

namespace NuGet.CommandLine.XPlat.Commands
{
<#
string commandFile = this.Host.ResolvePath("Commands.xml");
XDocument commands = XDocument.Load(commandFile);
var allElements = commands.Descendants(XName.Get("Verb","")).Concat(commands.Descendants(XName.Get("Command", "")));
foreach (XElement verb in allElements)
{
    PushIndent(Indent(4));

    foreach (XElement noun in verb.Descendants(XName.Get("Noun")))
    {
        string binderTypeClassName = GetArgsClassName(verb, noun);
        string binderClassName = GetCustomBinderClassName(verb, noun);
        GenerateCustomBinderClass(binderClassName, binderTypeClassName, noun);
        WriteLine(string.Empty);
    }

    var opts = verb.Elements().Where(n => isValidOption(n));
    if (opts.Any())
    {
        string binderTypeClassName = GetArgsClassName(verb, null);
        string binderClassName = GetCustomBinderClassName(verb, null);
        GenerateCustomBinderClass(binderClassName, binderTypeClassName, verb);
        WriteLine(string.Empty);
    }

    PopIndent();
} // end verb foreach
#>
} // end namespace
