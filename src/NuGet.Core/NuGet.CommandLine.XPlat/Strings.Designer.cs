//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NuGet.CommandLine.XPlat {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NuGet.CommandLine.XPlat.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to all.
        /// </summary>
        internal static string AddPkg_All {
            get {
                return ResourceManager.GetString("AddPkg_All", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds a package reference to a project..
        /// </summary>
        internal static string AddPkg_Description {
            get {
                return ResourceManager.GetString("AddPkg_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to the dependency graph file to be used to restore preview and compatibility check..
        /// </summary>
        internal static string AddPkg_DgFileDescription {
            get {
                return ResourceManager.GetString("AddPkg_DgFileDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Frameworks for which the package reference should be added..
        /// </summary>
        internal static string AddPkg_FrameworksDescription {
            get {
                return ResourceManager.GetString("AddPkg_FrameworksDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow the command to block and require manual action for operations like authentication..
        /// </summary>
        internal static string AddPkg_InteractiveDescription {
            get {
                return ResourceManager.GetString("AddPkg_InteractiveDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not perform restore preview and compatibility check. The added package reference will be unconditional..
        /// </summary>
        internal static string AddPkg_NoRestoreDescription {
            get {
                return ResourceManager.GetString("AddPkg_NoRestoreDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory to restore packages in..
        /// </summary>
        internal static string AddPkg_PackageDirectoryDescription {
            get {
                return ResourceManager.GetString("AddPkg_PackageDirectoryDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Id of the package to be added..
        /// </summary>
        internal static string AddPkg_PackageIdDescription {
            get {
                return ResourceManager.GetString("AddPkg_PackageIdDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version of the package to be added..
        /// </summary>
        internal static string AddPkg_PackageVersionDescription {
            get {
                return ResourceManager.GetString("AddPkg_PackageVersionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to the project file..
        /// </summary>
        internal static string AddPkg_ProjectPathDescription {
            get {
                return ResourceManager.GetString("AddPkg_ProjectPathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies NuGet package sources to use during the restore..
        /// </summary>
        internal static string AddPkg_SourcesDescription {
            get {
                return ResourceManager.GetString("AddPkg_SourcesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to user specified.
        /// </summary>
        internal static string AddPkg_UserSpecified {
            get {
                return ResourceManager.GetString("AddPkg_UserSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The API key for the server..
        /// </summary>
        internal static string ApiKey_Description {
            get {
                return ResourceManager.GetString("ApiKey_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NuGet Command Line.
        /// </summary>
        internal static string App_FullName {
            get {
                return ResourceManager.GetString("App_FullName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base path of the files defined in the nuspec file..
        /// </summary>
        internal static string BasePath_Description {
            get {
                return ResourceManager.GetString("BasePath_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines if the project should be built before building the package..
        /// </summary>
        internal static string Build_Description {
            get {
                return ResourceManager.GetString("Build_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING: {0}.
        /// </summary>
        internal static string CommandLine_Warning {
            get {
                return ResourceManager.GetString("CommandLine_Warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} (y/N) .
        /// </summary>
        internal static string ConsoleConfirmMessage {
            get {
                return ResourceManager.GetString("ConsoleConfirmMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to y.
        /// </summary>
        internal static string ConsoleConfirmMessageAccept {
            get {
                return ResourceManager.GetString("ConsoleConfirmMessageAccept", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes a package from the server..
        /// </summary>
        internal static string Delete_Description {
            get {
                return ResourceManager.GetString("Delete_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please provide arguments for package id and package version..
        /// </summary>
        internal static string Delete_MissingArguments {
            get {
                return ResourceManager.GetString("Delete_MissingArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Package Id and version..
        /// </summary>
        internal static string Delete_PackageIdAndVersion_Description {
            get {
                return ResourceManager.GetString("Delete_PackageIdAndVersion_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable buffering when pushing to an HTTP(S) server to decrease memory usage..
        /// </summary>
        internal static string DisableBuffering_Description {
            get {
                return ResourceManager.GetString("DisableBuffering_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item &apos;{0}&apos; for &apos;{1}&apos; in Imported file &apos;{2}&apos;..
        /// </summary>
        internal static string Error_AddPkgErrorStringForImportedEdit {
            get {
                return ResourceManager.GetString("Error_AddPkgErrorStringForImportedEdit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while performing {0} for package &apos;{1}&apos;. Cannot edit items in imported files - {2}{3}.
        /// </summary>
        internal static string Error_AddPkgFailOnImportEdit {
            get {
                return ResourceManager.GetString("Error_AddPkgFailOnImportEdit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &apos;{0}&apos; is incompatible with &apos;{1}&apos; frameworks in project &apos;{2}&apos;..
        /// </summary>
        internal static string Error_AddPkgIncompatibleWithAllFrameworks {
            get {
                return ResourceManager.GetString("Error_AddPkgIncompatibleWithAllFrameworks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No assets file was found for `{0}`. Please run restore before running this command..
        /// </summary>
        internal static string Error_AssetsFileNotFound {
            get {
                return ResourceManager.GetString("Error_AssetsFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source parameter was not specified..
        /// </summary>
        internal static string Error_MissingSourceParameter {
            get {
                return ResourceManager.GetString("Error_MissingSourceParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MsBuild was unable to open Project &apos;{0}&apos;..
        /// </summary>
        internal static string Error_MsBuildUnableToOpenProject {
            get {
                return ResourceManager.GetString("Error_MsBuildUnableToOpenProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to None or invalid DgSpec was passed to NuGet add package command..
        /// </summary>
        internal static string Error_NoDgSpec {
            get {
                return ResourceManager.GetString("Error_NoDgSpec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No matching package specs found when attempting to add package &apos;{0}&apos; to project &apos;{1}&apos;..
        /// </summary>
        internal static string Error_NoMatchingSpecs {
            get {
                return ResourceManager.GetString("Error_NoMatchingSpecs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The project `{0}` uses package.config for NuGet packages, while the command works only with package reference projects..
        /// </summary>
        internal static string Error_NotPRProject {
            get {
                return ResourceManager.GetString("Error_NotPRProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to {0} package. Argument &apos;{1}&apos; not provided..
        /// </summary>
        internal static string Error_PkgMissingArgument {
            get {
                return ResourceManager.GetString("Error_PkgMissingArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to {0} package. Missing or Invalid project file &apos;{1}&apos;..
        /// </summary>
        internal static string Error_PkgMissingOrInvalidProjectFile {
            get {
                return ResourceManager.GetString("Error_PkgMissingOrInvalidProjectFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while adding package &apos;{0}&apos; to project &apos;{1}&apos;. The project does not support adding package references through the add package command..
        /// </summary>
        internal static string Error_UnsupportedProject {
            get {
                return ResourceManager.GetString("Error_UnsupportedProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Project &apos;{0}&apos; does not contain any PackageReference &apos;{1}&apos; to {2}..
        /// </summary>
        internal static string Error_UpdatePkgNoSuchPackage {
            get {
                return ResourceManager.GetString("Error_UpdatePkgNoSuchPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies one or more wildcard patterns to exclude when creating a package..
        /// </summary>
        internal static string Exclude_Description {
            get {
                return ResourceManager.GetString("Exclude_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prevent inclusion of empty directories when building the package..
        /// </summary>
        internal static string ExcludeEmptyDirectories_Description {
            get {
                return ResourceManager.GetString("ExcludeEmptyDirectories_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forces the application to run using an invariant, English-based culture..
        /// </summary>
        internal static string ForceEnglishOutput_Description {
            get {
                return ResourceManager.GetString("ForceEnglishOutput_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Include referenced projects either as dependencies or as part of the package..
        /// </summary>
        internal static string IncludeReferencedProjects_Description {
            get {
                return ResourceManager.GetString("IncludeReferencedProjects_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PackageReference for package &apos;{0}&apos; version &apos;{1}&apos; added to file &apos;{2}&apos;..
        /// </summary>
        internal static string Info_AddPkgAdded {
            get {
                return ResourceManager.GetString("Info_AddPkgAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding PackageReference for package &apos;{0}&apos; into project &apos;{1}&apos;..
        /// </summary>
        internal static string Info_AddPkgAddingReference {
            get {
                return ResourceManager.GetString("Info_AddPkgAddingReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &apos;{0}&apos; is compatible with all the specified frameworks in project &apos;{1}&apos;..
        /// </summary>
        internal static string Info_AddPkgCompatibleWithAllFrameworks {
            get {
                return ResourceManager.GetString("Info_AddPkgCompatibleWithAllFrameworks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &apos;{0}&apos; is compatible with a subset of the specified frameworks in project &apos;{1}&apos;..
        /// </summary>
        internal static string Info_AddPkgCompatibleWithSubsetFrameworks {
            get {
                return ResourceManager.GetString("Info_AddPkgCompatibleWithSubsetFrameworks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PackageReference for package &apos;{0}&apos; version &apos;{1}&apos; updated in file &apos;{2}&apos;..
        /// </summary>
        internal static string Info_AddPkgUpdated {
            get {
                return ResourceManager.GetString("Info_AddPkgUpdated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removing PackageReference for package &apos;{0}&apos; from project &apos;{1}&apos;..
        /// </summary>
        internal static string Info_RemovePkgRemovingReference {
            get {
                return ResourceManager.GetString("Info_RemovePkgRemovingReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the location of the nuspec or project file to create a package..
        /// </summary>
        internal static string InputFile_Description {
            get {
                return ResourceManager.GetString("InputFile_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (A) : Auto-referenced package..
        /// </summary>
        internal static string ListPkg_AutoReferenceDescription {
            get {
                return ResourceManager.GetString("ListPkg_AutoReferenceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path to a config file to specify sources. Works only with `--outdated`..
        /// </summary>
        internal static string ListPkg_ConfigDescription {
            get {
                return ResourceManager.GetString("ListPkg_ConfigDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays only the packages marked deprecated by the authors..
        /// </summary>
        internal static string ListPkg_DeprecatedDescription {
            get {
                return ResourceManager.GetString("ListPkg_DeprecatedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (D) : The owner has unlisted this package. This could mean the package is deprecated or shouldn&apos;t be used anymore..
        /// </summary>
        internal static string ListPkg_DeprecatedPkgDescription {
            get {
                return ResourceManager.GetString("ListPkg_DeprecatedPkgDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists all the packages used by the current project(s)..
        /// </summary>
        internal static string ListPkg_Description {
            get {
                return ResourceManager.GetString("ListPkg_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given file `{0}` was not found.
        /// </summary>
        internal static string ListPkg_ErrorFileNotFound {
            get {
                return ResourceManager.GetString("ListPkg_ErrorFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to read the assets file `{0}`. Please make sure the file has the write format..
        /// </summary>
        internal static string ListPkg_ErrorReadingAssetsFile {
            get {
                return ResourceManager.GetString("ListPkg_ErrorReadingAssetsFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to read a package reference from the project `{0}`. Please make sure that your project file and project.assets.json file are in sync by running restore..
        /// </summary>
        internal static string ListPkg_ErrorReadingReferenceFromProject {
            get {
                return ResourceManager.GetString("ListPkg_ErrorReadingReferenceFromProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the target framework for which the packages will be listed..
        /// </summary>
        internal static string ListPkg_FrameworkDescription {
            get {
                return ResourceManager.GetString("ListPkg_FrameworkDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Considers only the versions with matching major. Works only with `--outdated`..
        /// </summary>
        internal static string ListPkg_HighestMinorDescription {
            get {
                return ResourceManager.GetString("ListPkg_HighestMinorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Considers only the versions with matching minor and major. Works only with `--outdated`..
        /// </summary>
        internal static string ListPkg_HighestPatchDescription {
            get {
                return ResourceManager.GetString("ListPkg_HighestPatchDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to parse one of the given frameworks. Please make sure the given frameworks are valid..
        /// </summary>
        internal static string ListPkg_InvalidFramework {
            get {
                return ResourceManager.GetString("ListPkg_InvalidFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Latest.
        /// </summary>
        internal static string ListPkg_Latest {
            get {
                return ResourceManager.GetString("ListPkg_Latest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No packages were found for this framework..
        /// </summary>
        internal static string ListPkg_NoPackagesForFramework {
            get {
                return ResourceManager.GetString("ListPkg_NoPackagesForFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No packages were found for the project `{0}` given the specified frameworks..
        /// </summary>
        internal static string ListPkg_NoPackagesFoundForFrameworks {
            get {
                return ResourceManager.GetString("ListPkg_NoPackagesFoundForFrameworks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not found at the sources.
        /// </summary>
        internal static string ListPkg_NotFoundAtSources {
            get {
                return ResourceManager.GetString("ListPkg_NotFoundAtSources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No updates available for this framework packages..
        /// </summary>
        internal static string ListPkg_NoUpdatesForFramework {
            get {
                return ResourceManager.GetString("ListPkg_NoUpdatesForFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given project `{0}` has no updates given the current sources..
        /// </summary>
        internal static string ListPkg_NoUpdatesForProject {
            get {
                return ResourceManager.GetString("ListPkg_NoUpdatesForProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays only the packages that need updates with the latest version from the sources..
        /// </summary>
        internal static string ListPkg_OutdatedDescription {
            get {
                return ResourceManager.GetString("ListPkg_OutdatedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path to a project, solution file or directory..
        /// </summary>
        internal static string ListPkg_PathDescription {
            get {
                return ResourceManager.GetString("ListPkg_PathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Considers prerelease versions when looking for latest. Works only with `--outdated`..
        /// </summary>
        internal static string ListPkg_PrereleaseDescription {
            get {
                return ResourceManager.GetString("ListPkg_PrereleaseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Project &apos;{0}&apos; has the following package references.
        /// </summary>
        internal static string ListPkg_ProjectHeaderLog {
            get {
                return ResourceManager.GetString("ListPkg_ProjectHeaderLog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Project `{0}` has the following updates to its packages.
        /// </summary>
        internal static string ListPkg_ProjectUpdatesHeaderLog {
            get {
                return ResourceManager.GetString("ListPkg_ProjectUpdatesHeaderLog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested.
        /// </summary>
        internal static string ListPkg_Requested {
            get {
                return ResourceManager.GetString("ListPkg_Requested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolved.
        /// </summary>
        internal static string ListPkg_Resolved {
            get {
                return ResourceManager.GetString("ListPkg_Resolved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sources to lookup for latest versions. Works only with `--outdated`..
        /// </summary>
        internal static string ListPkg_SourceDescription {
            get {
                return ResourceManager.GetString("ListPkg_SourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following sources were used:.
        /// </summary>
        internal static string ListPkg_SourcesUsedDescription {
            get {
                return ResourceManager.GetString("ListPkg_SourcesUsedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Top-level Package.
        /// </summary>
        internal static string ListPkg_TopLevelHeader {
            get {
                return ResourceManager.GetString("ListPkg_TopLevelHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Includes transitive packages too in the result..
        /// </summary>
        internal static string ListPkg_TransitiveDescription {
            get {
                return ResourceManager.GetString("ListPkg_TransitiveDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transitive Package.
        /// </summary>
        internal static string ListPkg_TransitiveHeader {
            get {
                return ResourceManager.GetString("ListPkg_TransitiveHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the cache location(s) to list or clear.
        ///&lt;all | http-cache | global-packages | temp&gt;.
        /// </summary>
        internal static string LocalsCommand_ArgumentDescription {
            get {
                return ResourceManager.GetString("LocalsCommand_ArgumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clear the selected local resources or cache location(s)..
        /// </summary>
        internal static string LocalsCommand_ClearDescription {
            get {
                return ResourceManager.GetString("LocalsCommand_ClearDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clears or lists local NuGet resources such as http requests cache, packages folder, plugin operations cache  or machine-wide global packages folder..
        /// </summary>
        internal static string LocalsCommand_Description {
            get {
                return ResourceManager.GetString("LocalsCommand_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to usage: NuGet locals &lt;all | http-cache | global-packages | temp | plugins-cache&gt; [--clear | -c | --list | -l]
        ///For more information, visit http://docs.nuget.org/docs/reference/command-line-reference.
        /// </summary>
        internal static string LocalsCommand_Help {
            get {
                return ResourceManager.GetString("LocalsCommand_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List the selected local resources or cache location(s)..
        /// </summary>
        internal static string LocalsCommand_ListDescription {
            get {
                return ResourceManager.GetString("LocalsCommand_ListDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both operations, --list and --clear, are not supported in the same command. Please specify only one operation.
        ///usage: NuGet locals &lt;all | http-cache | global-packages | temp | plugins-cache&gt; [--clear | -c | --list | -l]
        ///For more information, visit http://docs.nuget.org/docs/reference/command-line-reference.
        /// </summary>
        internal static string LocalsCommand_MultipleOperations {
            get {
                return ResourceManager.GetString("LocalsCommand_MultipleOperations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Cache Type was specified.
        ///usage: NuGet locals &lt;all | http-cache | global-packages | temp | plugins-cache&gt; [--clear | -c | --list | -l]
        ///For more information, visit http://docs.nuget.org/docs/reference/command-line-reference.
        /// </summary>
        internal static string LocalsCommand_NoArguments {
            get {
                return ResourceManager.GetString("LocalsCommand_NoArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please specify an operation i.e. --list or --clear.
        ///usage: NuGet locals &lt;all | http-cache | global-packages | temp | plugins-cache&gt; [--clear | -c | --list | -l]
        ///For more information, visit http://docs.nuget.org/docs/reference/command-line-reference.
        /// </summary>
        internal static string LocalsCommand_NoOperation {
            get {
                return ResourceManager.GetString("LocalsCommand_NoOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Committing restore....
        /// </summary>
        internal static string Log_Committing {
            get {
                return ResourceManager.GetString("Log_Committing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found project root directory: {0}..
        /// </summary>
        internal static string Log_FoundProjectRoot {
            get {
                return ResourceManager.GetString("Log_FoundProjectRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loaded project {0} from {1}..
        /// </summary>
        internal static string Log_LoadedProject {
            get {
                return ResourceManager.GetString("Log_LoadedProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Running non-parallel restore..
        /// </summary>
        internal static string Log_RunningNonParallelRestore {
            get {
                return ResourceManager.GetString("Log_RunningNonParallelRestore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Running restore with {0} concurrent jobs..
        /// </summary>
        internal static string Log_RunningParallelRestore {
            get {
                return ResourceManager.GetString("Log_RunningParallelRestore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using packages directory: {0}..
        /// </summary>
        internal static string Log_UsingPackagesDirectory {
            get {
                return ResourceManager.GetString("Log_UsingPackagesDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the minClientVersion attribute for the created package..
        /// </summary>
        internal static string MinClientVersion_Description {
            get {
                return ResourceManager.GetString("MinClientVersion_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the version of MSBuild to be used with this command. Supported values are 4, 12, 14. By default the MSBuild in your path is picked, otherwise it defaults to the highest installed version of MSBuild..
        /// </summary>
        internal static string MsBuildVersion_Description {
            get {
                return ResourceManager.GetString("MsBuildVersion_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No API Key was provided and no API Key could be found for {0}. To save an API Key for a source use the &apos;setApiKey&apos; command..
        /// </summary>
        internal static string NoApiKeyFound {
            get {
                return ResourceManager.GetString("NoApiKeyFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prevent default exclusion of NuGet package files and files and folders starting with a dot e.g. .svn..
        /// </summary>
        internal static string NoDefaultExcludes_Description {
            get {
                return ResourceManager.GetString("NoDefaultExcludes_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not prompt for user input or confirmations..
        /// </summary>
        internal static string NonInteractive_Description {
            get {
                return ResourceManager.GetString("NonInteractive_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify if the command should not run package analysis after building the package..
        /// </summary>
        internal static string NoPackageAnalysis_Description {
            get {
                return ResourceManager.GetString("NoPackageAnalysis_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Does not append &quot;api/v2/package&quot; to the source URL..
        /// </summary>
        internal static string NoServiceEndpoint_Description {
            get {
                return ResourceManager.GetString("NoServiceEndpoint_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a symbols package exists, it will not be pushed to a symbols server..
        /// </summary>
        internal static string NoSymbols_Description {
            get {
                return ResourceManager.GetString("NoSymbols_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://docs.nuget.org/.
        /// </summary>
        internal static string NuGetDocs {
            get {
                return ResourceManager.GetString("NuGetDocs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow the command to block and require manual action for operations like authentication..
        /// </summary>
        internal static string NuGetXplatCommand_Interactive {
            get {
                return ResourceManager.GetString("NuGetXplatCommand_Interactive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the directory for the created NuGet package file. If not specified, uses the current directory.
        /// </summary>
        internal static string OutputDirectory_Description {
            get {
                return ResourceManager.GetString("OutputDirectory_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} Version: {1}.
        /// </summary>
        internal static string OutputNuGetVersion {
            get {
                return ResourceManager.GetString("OutputNuGetVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempting to build package from &apos;{0}&apos;..
        /// </summary>
        internal static string PackageCommandAttemptingToBuildPackage {
            get {
                return ResourceManager.GetString("PackageCommandAttemptingToBuildPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of MinClientVersion argument is not a valid version..
        /// </summary>
        internal static string PackageCommandInvalidMinClientVersion {
            get {
                return ResourceManager.GetString("PackageCommandInvalidMinClientVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version string specified &apos;{0}&apos; is invalid..
        /// </summary>
        internal static string PackageVersionInvalid {
            get {
                return ResourceManager.GetString("PackageVersionInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a NuGet package based on the specified nuspec or project file.
        /// </summary>
        internal static string PackCommand_Description {
            get {
                return ResourceManager.GetString("PackCommand_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pushes a package to the server and publishes it..
        /// </summary>
        internal static string Push_Description {
            get {
                return ResourceManager.GetString("Push_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid timeout parameter value..
        /// </summary>
        internal static string Push_InvalidTimeout {
            get {
                return ResourceManager.GetString("Push_InvalidTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please specify the path to the package..
        /// </summary>
        internal static string Push_MissingArguments {
            get {
                return ResourceManager.GetString("Push_MissingArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the path to the package and your API key to push the package to the server..
        /// </summary>
        internal static string Push_Package_ApiKey_Description {
            get {
                return ResourceManager.GetString("Push_Package_ApiKey_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes)..
        /// </summary>
        internal static string Push_Timeout_Description {
            get {
                return ResourceManager.GetString("Push_Timeout_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pushing took too long. You can change the default timeout of 300 seconds by using the --timeout &lt;seconds&gt; option with the push command..
        /// </summary>
        internal static string Push_Timeout_Error {
            get {
                return ResourceManager.GetString("Push_Timeout_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes a package reference from a project..
        /// </summary>
        internal static string RemovePkg_Description {
            get {
                return ResourceManager.GetString("RemovePkg_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Id of the package to be removed..
        /// </summary>
        internal static string RemovePkg_PackageIdDescription {
            get {
                return ResourceManager.GetString("RemovePkg_PackageIdDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to the project file..
        /// </summary>
        internal static string RemovePkg_ProjectPathDescription {
            get {
                return ResourceManager.GetString("RemovePkg_ProjectPathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of projects and project folders to restore. Each value can be: a path to a project.json or global.json file, or a folder to recursively search for project.json files..
        /// </summary>
        internal static string Restore_Arg_ProjectName_Description {
            get {
                return ResourceManager.GetString("Restore_Arg_ProjectName_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restores packages for a project and writes a lock file..
        /// </summary>
        internal static string Restore_Description {
            get {
                return ResourceManager.GetString("Restore_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NuGet configuration file to use..
        /// </summary>
        internal static string Restore_Switch_ConfigFile_Description {
            get {
                return ResourceManager.GetString("Restore_Switch_ConfigFile_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disables restoring multiple projects in parallel..
        /// </summary>
        internal static string Restore_Switch_DisableParallel_Description {
            get {
                return ResourceManager.GetString("Restore_Switch_DisableParallel_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of packages sources to use as a fallback..
        /// </summary>
        internal static string Restore_Switch_Fallback_Description {
            get {
                return ResourceManager.GetString("Restore_Switch_Fallback_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only warn about failed sources if there are packages meeting version requirement..
        /// </summary>
        internal static string Restore_Switch_IgnoreFailedSource_Description {
            get {
                return ResourceManager.GetString("Restore_Switch_IgnoreFailedSource_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use legacy behavior when the restore operation is interacting with the global packages directory. This means the ID and version folder names are written with the original package case rather than being normalized to lowercase..
        /// </summary>
        internal static string Restore_Switch_LegacyPackagesDirectory_Description {
            get {
                return ResourceManager.GetString("Restore_Switch_LegacyPackagesDirectory_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not cache packages and http requests..
        /// </summary>
        internal static string Restore_Switch_NoCache_Description {
            get {
                return ResourceManager.GetString("Restore_Switch_NoCache_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory to install packages in..
        /// </summary>
        internal static string Restore_Switch_Packages_Description {
            get {
                return ResourceManager.GetString("Restore_Switch_Packages_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a NuGet package source to use during the restore..
        /// </summary>
        internal static string Restore_Switch_Source_Description {
            get {
                return ResourceManager.GetString("Restore_Switch_Source_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets the nuspec serviceable element to true..
        /// </summary>
        internal static string Serviceable_Description {
            get {
                return ResourceManager.GetString("Serviceable_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the server URL.
        /// </summary>
        internal static string Source_Description {
            get {
                return ResourceManager.GetString("Source_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Appends a pre-release suffix to the internally generated version number..
        /// </summary>
        internal static string Suffix_Description {
            get {
                return ResourceManager.GetString("Suffix_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The verbosity of logging to use. Allowed values: Debug, Verbose, Information, Minimal, Warning, Error..
        /// </summary>
        internal static string Switch_Verbosity {
            get {
                return ResourceManager.GetString("Switch_Verbosity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The API key for the symbol server..
        /// </summary>
        internal static string SymbolApiKey_Description {
            get {
                return ResourceManager.GetString("SymbolApiKey_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines if a package containing sources and symbols should be created. When specified with a nuspec, creates a regular NuGet package file and the corresponding symbols package..
        /// </summary>
        internal static string Symbols_Description {
            get {
                return ResourceManager.GetString("Symbols_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the symbol server URL. If not specified, nuget.smbsrc.net is used when pushing to nuget.org..
        /// </summary>
        internal static string SymbolSource_Description {
            get {
                return ResourceManager.GetString("SymbolSource_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines if the output files of the project should be in the tool folder..
        /// </summary>
        internal static string Tool_Description {
            get {
                return ResourceManager.GetString("Tool_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overrides the version number from the nuspec file..
        /// </summary>
        internal static string Version_Description {
            get {
                return ResourceManager.GetString("Version_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --no-restore|-n flag was used. No compatibility check will be done and the added package reference will be unconditional..
        /// </summary>
        internal static string Warn_AddPkgWithoutRestore {
            get {
                return ResourceManager.GetString("Warn_AddPkgWithoutRestore", resourceCulture);
            }
        }
    }
}
