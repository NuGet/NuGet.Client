<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedPackageToFolder" xml:space="preserve">
    <value>Added package '{0}' to folder '{1}'</value>
  </data>
  <data name="AddedPackageToMSBuildProject" xml:space="preserve">
    <value>Added package '{0}' to project '{1}'</value>
  </data>
  <data name="AddedPackageToPackagesConfig" xml:space="preserve">
    <value>Added package '{0}' to '{1}'</value>
  </data>
  <data name="AddingPackageToFolder" xml:space="preserve">
    <value>Adding package '{0}' to folder '{1}'</value>
  </data>
  <data name="AddingPackageToMSBuildProject" xml:space="preserve">
    <value>Adding package '{0}' to project '{1}'</value>
  </data>
  <data name="AddingPackageWithOnlyDependencies" xml:space="preserve">
    <value>Adding package '{0}', which only has dependencies, to project '{1}'.</value>
  </data>
  <data name="AddingPackageWithOnlyToolsGroup" xml:space="preserve">
    <value>Adding package '{0}', which only has tools group, to project '{1}'</value>
  </data>
  <data name="Argument_Cannot_Be_Null_Or_Empty" xml:space="preserve">
    <value>Argument cannot be null or empty</value>
  </data>
  <data name="Argument_Must_Be_GreaterThanOrEqualTo" xml:space="preserve">
    <value>Value must be greater than or equal to {0}</value>
  </data>
  <data name="ContentFilesShouldNotBeTargetFrameworkSpecific" xml:space="preserve">
    <value>Content files should not be target framework specific, whereas, '{0}' is</value>
  </data>
  <data name="Debug_AddedFile" xml:space="preserve">
    <value>Added file '{0}'.</value>
  </data>
  <data name="Debug_AddedFileToFolder" xml:space="preserve">
    <value>Added file '{0}' to folder '{1}'.</value>
  </data>
  <data name="Debug_RemovedFile" xml:space="preserve">
    <value>Removed file '{0}'.</value>
  </data>
  <data name="Debug_RemovedFileFromFolder" xml:space="preserve">
    <value>Removed file '{0}' from folder '{1}'.</value>
  </data>
  <data name="Debug_RemovedFolder" xml:space="preserve">
    <value>Removed folder '{0}'.</value>
  </data>
  <data name="Debug_TargetFrameworkInfo" xml:space="preserve">
    <value>&gt;&gt; {0} are being added from '{1}'{2}</value>
  </data>
  <data name="Debug_TargetFrameworkInfoPrefix" xml:space="preserve">
    <value>For adding package '{0}' to project '{1}' that targets '{2}'.</value>
  </data>
  <data name="Debug_TargetFrameworkInfo_AssemblyReferences" xml:space="preserve">
    <value>Assembly references</value>
  </data>
  <data name="Debug_TargetFrameworkInfo_BuildFiles" xml:space="preserve">
    <value>Build files</value>
  </data>
  <data name="Debug_TargetFrameworkInfo_ContentFiles" xml:space="preserve">
    <value>Content files</value>
  </data>
  <data name="Debug_TargetFrameworkInfo_NotFrameworkSpecific" xml:space="preserve">
    <value>(not framework-specific)</value>
  </data>
  <data name="Debug_TargetFrameworkInfo_PowershellScripts" xml:space="preserve">
    <value>&gt;&gt; PowerShell scripts are being executed from '{0}'{1}</value>
  </data>
  <data name="DependencyDoesNotHaveValidVersion" xml:space="preserve">
    <value>Dependency '{0}' has invalid version specification.</value>
  </data>
  <data name="ErrorLoadingPackagesConfig" xml:space="preserve">
    <value>An error occurred while reading file '{0}': {1}</value>
  </data>
  <data name="ErrorWritingPackagesConfig" xml:space="preserve">
    <value>An error occurred while writing file '{0}': {1}</value>
  </data>
  <data name="FileConflictMessage" xml:space="preserve">
    <value>File '{0}' already exists in project '{1}'. Do you want to overwrite it?</value>
  </data>
  <data name="Info_OverwritingExistingFile" xml:space="preserve">
    <value>Overwriting existing file '{0}'..</value>
  </data>
  <data name="InvalidProjectName" xml:space="preserve">
    <value>Unable to determine the project name for '{0}'.</value>
  </data>
  <data name="NoFolderSpecificToTargetFxFound" xml:space="preserve">
    <value>Invalid!! Could not find a folder under artifact type '{0}', so cannot request for artifacts specific to target framework '{1}'</value>
  </data>
  <data name="PackageAlreadyExistsInFolder" xml:space="preserve">
    <value>Package '{0}' already exists in folder '{1}'</value>
  </data>
  <data name="PackageAlreadyExistsInPackagesConfig" xml:space="preserve">
    <value>Package '{0}' already exists in '{1}'</value>
  </data>
  <data name="PackageAlreadyExistsInProject" xml:space="preserve">
    <value>Package '{0}' already exists in project '{1}'</value>
  </data>
  <data name="PackageDoesNotExistInFolder" xml:space="preserve">
    <value>Package '{0}' does not exist in folder '{1}'</value>
  </data>
  <data name="PackageDoesNotExistInProject" xml:space="preserve">
    <value>Package '{0}' does not exist in project '{1}'</value>
  </data>
  <data name="PackageDoesNotExisttInPackagesConfig" xml:space="preserve">
    <value>Package '{0}' does not exists in '{1}'</value>
  </data>
  <data name="PackageStreamShouldBeSeekable" xml:space="preserve">
    <value>Package stream should be seekable</value>
  </data>
  <data name="RemovedPackageFromFolder" xml:space="preserve">
    <value>Removed package '{0}' from folder '{1}'</value>
  </data>
  <data name="RemovedPackageFromMSBuildProject" xml:space="preserve">
    <value>Removed package '{0}' from project '{1}'</value>
  </data>
  <data name="RemovedPackageFromPackagesConfig" xml:space="preserve">
    <value>Removed package '{0}' from '{1}'</value>
  </data>
  <data name="RemovingPackageFromFolder" xml:space="preserve">
    <value>Removing package '{0}' from folder '{1}'</value>
  </data>
  <data name="RemovingPackageFromMSBuildProject" xml:space="preserve">
    <value>Removing package '{0}' from project '{1}'</value>
  </data>
  <data name="SolutionDirectoryMustBeRooted" xml:space="preserve">
    <value>Solution directory '{0}' must be a rooted path.</value>
  </data>
  <data name="TokenHasNoValue" xml:space="preserve">
    <value>The replacement token '{0}' has no value</value>
  </data>
  <data name="UnableToFindCompatibleItems" xml:space="preserve">
    <value>Could not install package '{0}'. You are trying to install this package into a project that targets '{1}', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.</value>
  </data>
  <data name="Warning_DirectoryNotEmpty" xml:space="preserve">
    <value>Directory '{0}' is not empty. Skipping...</value>
  </data>
  <data name="Warning_FileAlreadyExists" xml:space="preserve">
    <value>'{0}' already exists. Skipping...</value>
  </data>
  <data name="Warning_FileModified" xml:space="preserve">
    <value>Skipping '{0}' because it was modified.</value>
  </data>
  <data name="XdtError" xml:space="preserve">
    <value>An error occurred while applying transformation to '{0}' in project '{1}'</value>
  </data>
</root>