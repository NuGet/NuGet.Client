NuGet.DependencyResolver.AnalyzeResult<TItem>
NuGet.DependencyResolver.AnalyzeResult<TItem>.AnalyzeResult() -> void
NuGet.DependencyResolver.AnalyzeResult<TItem>.Combine(NuGet.DependencyResolver.AnalyzeResult<TItem> result) -> void
NuGet.DependencyResolver.AnalyzeResult<TItem>.Cycles.get -> System.Collections.Generic.List<NuGet.DependencyResolver.GraphNode<TItem>>
NuGet.DependencyResolver.AnalyzeResult<TItem>.Downgrades.get -> System.Collections.Generic.List<NuGet.DependencyResolver.DowngradeResult<TItem>>
NuGet.DependencyResolver.AnalyzeResult<TItem>.VersionConflicts.get -> System.Collections.Generic.List<NuGet.DependencyResolver.VersionConflictResult<TItem>>
NuGet.DependencyResolver.Disposition
NuGet.DependencyResolver.Disposition.Acceptable = 0 -> NuGet.DependencyResolver.Disposition
NuGet.DependencyResolver.Disposition.Accepted = 2 -> NuGet.DependencyResolver.Disposition
NuGet.DependencyResolver.Disposition.Cycle = 4 -> NuGet.DependencyResolver.Disposition
NuGet.DependencyResolver.Disposition.PotentiallyDowngraded = 3 -> NuGet.DependencyResolver.Disposition
NuGet.DependencyResolver.Disposition.Rejected = 1 -> NuGet.DependencyResolver.Disposition
NuGet.DependencyResolver.DowngradeResult<TItem>
NuGet.DependencyResolver.DowngradeResult<TItem>.DowngradeResult() -> void
NuGet.DependencyResolver.DowngradeResult<TItem>.DowngradedFrom.get -> NuGet.DependencyResolver.GraphNode<TItem>
NuGet.DependencyResolver.DowngradeResult<TItem>.DowngradedFrom.set -> void
NuGet.DependencyResolver.DowngradeResult<TItem>.DowngradedTo.get -> NuGet.DependencyResolver.GraphNode<TItem>
NuGet.DependencyResolver.DowngradeResult<TItem>.DowngradedTo.set -> void
NuGet.DependencyResolver.GraphEdge<TItem>
NuGet.DependencyResolver.GraphEdge<TItem>.Edge.get -> NuGet.LibraryModel.LibraryDependency
NuGet.DependencyResolver.GraphEdge<TItem>.GraphEdge(NuGet.DependencyResolver.GraphEdge<TItem> outerEdge, NuGet.DependencyResolver.GraphItem<TItem> item, NuGet.LibraryModel.LibraryDependency edge) -> void
NuGet.DependencyResolver.GraphEdge<TItem>.Item.get -> NuGet.DependencyResolver.GraphItem<TItem>
NuGet.DependencyResolver.GraphEdge<TItem>.OuterEdge.get -> NuGet.DependencyResolver.GraphEdge<TItem>
NuGet.DependencyResolver.GraphItem<TItem>
NuGet.DependencyResolver.GraphItem<TItem>.Data.get -> TItem
NuGet.DependencyResolver.GraphItem<TItem>.Data.set -> void
NuGet.DependencyResolver.GraphItem<TItem>.Equals(NuGet.DependencyResolver.GraphItem<TItem> other) -> bool
NuGet.DependencyResolver.GraphItem<TItem>.GraphItem(NuGet.LibraryModel.LibraryIdentity key) -> void
NuGet.DependencyResolver.GraphItem<TItem>.IsCentralTransitive.get -> bool
NuGet.DependencyResolver.GraphItem<TItem>.IsCentralTransitive.set -> void
NuGet.DependencyResolver.GraphItem<TItem>.Key.get -> NuGet.LibraryModel.LibraryIdentity
NuGet.DependencyResolver.GraphItem<TItem>.Key.set -> void
NuGet.DependencyResolver.GraphItemKeyComparer<T>
NuGet.DependencyResolver.GraphItemKeyComparer<T>.Equals(NuGet.DependencyResolver.GraphItem<T> x, NuGet.DependencyResolver.GraphItem<T> y) -> bool
NuGet.DependencyResolver.GraphItemKeyComparer<T>.GetHashCode(NuGet.DependencyResolver.GraphItem<T> obj) -> int
NuGet.DependencyResolver.GraphNode<TItem>
NuGet.DependencyResolver.GraphNode<TItem>.Disposition.get -> NuGet.DependencyResolver.Disposition
NuGet.DependencyResolver.GraphNode<TItem>.Disposition.set -> void
NuGet.DependencyResolver.GraphNode<TItem>.GraphNode(NuGet.LibraryModel.LibraryRange key) -> void
NuGet.DependencyResolver.GraphNode<TItem>.InnerNodes.get -> System.Collections.Generic.IList<NuGet.DependencyResolver.GraphNode<TItem>>
NuGet.DependencyResolver.GraphNode<TItem>.InnerNodes.set -> void
NuGet.DependencyResolver.GraphNode<TItem>.Item.get -> NuGet.DependencyResolver.GraphItem<TItem>
NuGet.DependencyResolver.GraphNode<TItem>.Item.set -> void
NuGet.DependencyResolver.GraphNode<TItem>.Key.get -> NuGet.LibraryModel.LibraryRange
NuGet.DependencyResolver.GraphNode<TItem>.Key.set -> void
NuGet.DependencyResolver.GraphNode<TItem>.OuterNode.get -> NuGet.DependencyResolver.GraphNode<TItem>
NuGet.DependencyResolver.GraphNode<TItem>.OuterNode.set -> void
NuGet.DependencyResolver.GraphOperations
NuGet.DependencyResolver.IDependencyProvider
NuGet.DependencyResolver.IDependencyProvider.GetLibrary(NuGet.LibraryModel.LibraryRange libraryRange, NuGet.Frameworks.NuGetFramework targetFramework) -> NuGet.LibraryModel.Library
NuGet.DependencyResolver.IDependencyProvider.SupportsType(NuGet.LibraryModel.LibraryDependencyTarget libraryTypeFlag) -> bool
NuGet.DependencyResolver.IRemoteDependencyProvider
NuGet.DependencyResolver.IRemoteDependencyProvider.FindLibraryAsync(NuGet.LibraryModel.LibraryRange libraryRange, NuGet.Frameworks.NuGetFramework targetFramework, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NuGet.LibraryModel.LibraryIdentity>
NuGet.DependencyResolver.IRemoteDependencyProvider.GetAllVersionsAsync(string id, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<NuGet.Versioning.NuGetVersion>>
NuGet.DependencyResolver.IRemoteDependencyProvider.GetDependenciesAsync(NuGet.LibraryModel.LibraryIdentity libraryIdentity, NuGet.Frameworks.NuGetFramework targetFramework, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NuGet.LibraryModel.LibraryDependencyInfo>
NuGet.DependencyResolver.IRemoteDependencyProvider.GetPackageDownloaderAsync(NuGet.Packaging.Core.PackageIdentity packageIdentity, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NuGet.Packaging.IPackageDownloader>
NuGet.DependencyResolver.IRemoteDependencyProvider.IsHttp.get -> bool
NuGet.DependencyResolver.IRemoteDependencyProvider.Source.get -> NuGet.Configuration.PackageSource
NuGet.DependencyResolver.LibraryRangeCacheKey
NuGet.DependencyResolver.LibraryRangeCacheKey.Equals(NuGet.DependencyResolver.LibraryRangeCacheKey other) -> bool
NuGet.DependencyResolver.LibraryRangeCacheKey.Framework.get -> NuGet.Frameworks.NuGetFramework
NuGet.DependencyResolver.LibraryRangeCacheKey.LibraryRange.get -> NuGet.LibraryModel.LibraryRange
NuGet.DependencyResolver.LibraryRangeCacheKey.LibraryRangeCacheKey(NuGet.LibraryModel.LibraryRange range, NuGet.Frameworks.NuGetFramework framework) -> void
NuGet.DependencyResolver.LocalDependencyProvider
NuGet.DependencyResolver.LocalDependencyProvider.FindLibraryAsync(NuGet.LibraryModel.LibraryRange libraryRange, NuGet.Frameworks.NuGetFramework targetFramework, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NuGet.LibraryModel.LibraryIdentity>
NuGet.DependencyResolver.LocalDependencyProvider.GetAllVersionsAsync(string id, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<NuGet.Versioning.NuGetVersion>>
NuGet.DependencyResolver.LocalDependencyProvider.GetDependenciesAsync(NuGet.LibraryModel.LibraryIdentity libraryIdentity, NuGet.Frameworks.NuGetFramework targetFramework, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NuGet.LibraryModel.LibraryDependencyInfo>
NuGet.DependencyResolver.LocalDependencyProvider.GetPackageDownloaderAsync(NuGet.Packaging.Core.PackageIdentity packageIdentity, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NuGet.Packaging.IPackageDownloader>
NuGet.DependencyResolver.LocalDependencyProvider.IsHttp.get -> bool
NuGet.DependencyResolver.LocalDependencyProvider.LocalDependencyProvider(NuGet.DependencyResolver.IDependencyProvider dependencyProvider) -> void
NuGet.DependencyResolver.LocalDependencyProvider.Source.get -> NuGet.Configuration.PackageSource
NuGet.DependencyResolver.LocalMatch
NuGet.DependencyResolver.LocalMatch.LocalLibrary.get -> NuGet.LibraryModel.Library
NuGet.DependencyResolver.LocalMatch.LocalLibrary.set -> void
NuGet.DependencyResolver.LocalMatch.LocalMatch() -> void
NuGet.DependencyResolver.LocalMatch.LocalProvider.get -> NuGet.DependencyResolver.IDependencyProvider
NuGet.DependencyResolver.LocalMatch.LocalProvider.set -> void
NuGet.DependencyResolver.LockFileCacheKey
NuGet.DependencyResolver.LockFileCacheKey.Equals(NuGet.DependencyResolver.LockFileCacheKey other) -> bool
NuGet.DependencyResolver.LockFileCacheKey.LockFileCacheKey(NuGet.Frameworks.NuGetFramework framework, string runtimeIdentifier) -> void
NuGet.DependencyResolver.LockFileCacheKey.Name.get -> string
NuGet.DependencyResolver.LockFileCacheKey.RuntimeIdentifier.get -> string
NuGet.DependencyResolver.LockFileCacheKey.TargetFramework.get -> NuGet.Frameworks.NuGetFramework
NuGet.DependencyResolver.PackagingUtility
NuGet.DependencyResolver.RemoteDependencyWalker
NuGet.DependencyResolver.RemoteDependencyWalker.RemoteDependencyWalker(NuGet.DependencyResolver.RemoteWalkContext context) -> void
NuGet.DependencyResolver.RemoteDependencyWalker.WalkAsync(NuGet.LibraryModel.LibraryRange library, NuGet.Frameworks.NuGetFramework framework, string runtimeIdentifier, NuGet.RuntimeModel.RuntimeGraph runtimeGraph, bool recursive) -> System.Threading.Tasks.Task<NuGet.DependencyResolver.GraphNode<NuGet.DependencyResolver.RemoteResolveResult>>
NuGet.DependencyResolver.RemoteMatch
NuGet.DependencyResolver.RemoteMatch.Equals(NuGet.DependencyResolver.RemoteMatch other) -> bool
NuGet.DependencyResolver.RemoteMatch.Library.get -> NuGet.LibraryModel.LibraryIdentity
NuGet.DependencyResolver.RemoteMatch.Library.set -> void
NuGet.DependencyResolver.RemoteMatch.Path.get -> string
NuGet.DependencyResolver.RemoteMatch.Path.set -> void
NuGet.DependencyResolver.RemoteMatch.Provider.get -> NuGet.DependencyResolver.IRemoteDependencyProvider
NuGet.DependencyResolver.RemoteMatch.Provider.set -> void
NuGet.DependencyResolver.RemoteMatch.RemoteMatch() -> void
NuGet.DependencyResolver.RemoteResolveResult
NuGet.DependencyResolver.RemoteResolveResult.Dependencies.get -> System.Collections.Generic.IEnumerable<NuGet.LibraryModel.LibraryDependency>
NuGet.DependencyResolver.RemoteResolveResult.Dependencies.set -> void
NuGet.DependencyResolver.RemoteResolveResult.Match.get -> NuGet.DependencyResolver.RemoteMatch
NuGet.DependencyResolver.RemoteResolveResult.Match.set -> void
NuGet.DependencyResolver.RemoteResolveResult.RemoteResolveResult() -> void
NuGet.DependencyResolver.RemoteWalkContext
NuGet.DependencyResolver.RemoteWalkContext.CacheContext.get -> NuGet.Protocol.Core.Types.SourceCacheContext
NuGet.DependencyResolver.RemoteWalkContext.FindLibraryEntryCache.get -> System.Collections.Concurrent.ConcurrentDictionary<NuGet.DependencyResolver.LibraryRangeCacheKey, System.Threading.Tasks.Task<NuGet.DependencyResolver.GraphItem<NuGet.DependencyResolver.RemoteResolveResult>>>
NuGet.DependencyResolver.RemoteWalkContext.IsMsBuildBased.get -> bool
NuGet.DependencyResolver.RemoteWalkContext.IsMsBuildBased.set -> void
NuGet.DependencyResolver.RemoteWalkContext.LocalLibraryProviders.get -> System.Collections.Generic.IList<NuGet.DependencyResolver.IRemoteDependencyProvider>
NuGet.DependencyResolver.RemoteWalkContext.LockFileLibraries.get -> System.Collections.Generic.IDictionary<NuGet.DependencyResolver.LockFileCacheKey, System.Collections.Generic.IList<NuGet.LibraryModel.LibraryIdentity>>
NuGet.DependencyResolver.RemoteWalkContext.Logger.get -> NuGet.Common.ILogger
NuGet.DependencyResolver.RemoteWalkContext.ProjectLibraryProviders.get -> System.Collections.Generic.IList<NuGet.DependencyResolver.IDependencyProvider>
NuGet.DependencyResolver.RemoteWalkContext.RemoteLibraryProviders.get -> System.Collections.Generic.IList<NuGet.DependencyResolver.IRemoteDependencyProvider>
NuGet.DependencyResolver.RemoteWalkContext.RemoteWalkContext(NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger) -> void
NuGet.DependencyResolver.ResolverUtility
NuGet.DependencyResolver.Tracker<TItem>
NuGet.DependencyResolver.Tracker<TItem>.GetDisputes(NuGet.DependencyResolver.GraphItem<TItem> item) -> System.Collections.Generic.IEnumerable<NuGet.DependencyResolver.GraphItem<TItem>>
NuGet.DependencyResolver.Tracker<TItem>.IsAmbiguous(NuGet.DependencyResolver.GraphItem<TItem> item) -> bool
NuGet.DependencyResolver.Tracker<TItem>.IsBestVersion(NuGet.DependencyResolver.GraphItem<TItem> item) -> bool
NuGet.DependencyResolver.Tracker<TItem>.IsDisputed(NuGet.DependencyResolver.GraphItem<TItem> item) -> bool
NuGet.DependencyResolver.Tracker<TItem>.MarkAmbiguous(NuGet.DependencyResolver.GraphItem<TItem> item) -> void
NuGet.DependencyResolver.Tracker<TItem>.Track(NuGet.DependencyResolver.GraphItem<TItem> item) -> void
NuGet.DependencyResolver.Tracker<TItem>.Tracker() -> void
NuGet.DependencyResolver.VersionConflictResult<TItem>
NuGet.DependencyResolver.VersionConflictResult<TItem>.Conflicting.get -> NuGet.DependencyResolver.GraphNode<TItem>
NuGet.DependencyResolver.VersionConflictResult<TItem>.Conflicting.set -> void
NuGet.DependencyResolver.VersionConflictResult<TItem>.Selected.get -> NuGet.DependencyResolver.GraphNode<TItem>
NuGet.DependencyResolver.VersionConflictResult<TItem>.Selected.set -> void
NuGet.DependencyResolver.VersionConflictResult<TItem>.VersionConflictResult() -> void
override NuGet.DependencyResolver.GraphItem<TItem>.Equals(object obj) -> bool
override NuGet.DependencyResolver.GraphItem<TItem>.GetHashCode() -> int
override NuGet.DependencyResolver.GraphNode<TItem>.ToString() -> string
override NuGet.DependencyResolver.LibraryRangeCacheKey.Equals(object obj) -> bool
override NuGet.DependencyResolver.LibraryRangeCacheKey.GetHashCode() -> int
override NuGet.DependencyResolver.LibraryRangeCacheKey.ToString() -> string
override NuGet.DependencyResolver.LockFileCacheKey.Equals(object obj) -> bool
override NuGet.DependencyResolver.LockFileCacheKey.GetHashCode() -> int
override NuGet.DependencyResolver.LockFileCacheKey.ToString() -> string
override NuGet.DependencyResolver.RemoteMatch.Equals(object obj) -> bool
override NuGet.DependencyResolver.RemoteMatch.GetHashCode() -> int
static NuGet.DependencyResolver.GraphItemKeyComparer<T>.Instance.get -> NuGet.DependencyResolver.GraphItemKeyComparer<T>
static NuGet.DependencyResolver.GraphOperations.Analyze(this NuGet.DependencyResolver.GraphNode<NuGet.DependencyResolver.RemoteResolveResult> root) -> NuGet.DependencyResolver.AnalyzeResult<NuGet.DependencyResolver.RemoteResolveResult>
static NuGet.DependencyResolver.GraphOperations.Dump<TItem>(this NuGet.DependencyResolver.GraphNode<TItem> root, System.Action<string> write) -> void
static NuGet.DependencyResolver.GraphOperations.ForEach<TItem, TContext>(this NuGet.DependencyResolver.GraphNode<TItem> root, System.Action<NuGet.DependencyResolver.GraphNode<TItem>, TContext> visitor, TContext context) -> void
static NuGet.DependencyResolver.GraphOperations.ForEach<TItem>(this NuGet.DependencyResolver.GraphNode<TItem> root, System.Action<NuGet.DependencyResolver.GraphNode<TItem>> visitor) -> void
static NuGet.DependencyResolver.GraphOperations.ForEach<TItem>(this System.Collections.Generic.IEnumerable<NuGet.DependencyResolver.GraphNode<TItem>> roots, System.Action<NuGet.DependencyResolver.GraphNode<TItem>> visitor) -> void
static NuGet.DependencyResolver.GraphOperations.GetId<TItem>(this NuGet.DependencyResolver.GraphNode<TItem> node) -> string
static NuGet.DependencyResolver.GraphOperations.GetIdAndRange<TItem>(this NuGet.DependencyResolver.GraphNode<TItem> node) -> string
static NuGet.DependencyResolver.GraphOperations.GetIdAndVersionOrRange<TItem>(this NuGet.DependencyResolver.GraphNode<TItem> node) -> string
static NuGet.DependencyResolver.GraphOperations.GetPath<TItem>(this NuGet.DependencyResolver.GraphNode<TItem> node) -> string
static NuGet.DependencyResolver.GraphOperations.GetPathWithLastRange<TItem>(this NuGet.DependencyResolver.GraphNode<TItem> node) -> string
static NuGet.DependencyResolver.GraphOperations.GetVersionOrDefault<TItem>(this NuGet.DependencyResolver.GraphNode<TItem> node) -> NuGet.Versioning.NuGetVersion
static NuGet.DependencyResolver.GraphOperations.GetVersionRange<TItem>(this NuGet.DependencyResolver.GraphNode<TItem> node) -> NuGet.Versioning.VersionRange
static NuGet.DependencyResolver.GraphOperations.IsPackage<TItem>(this NuGet.DependencyResolver.GraphNode<TItem> node) -> bool
static NuGet.DependencyResolver.GraphOperations.Path<TItem>(this NuGet.DependencyResolver.GraphNode<TItem> node, params string[] path) -> NuGet.DependencyResolver.GraphNode<TItem>
static NuGet.DependencyResolver.GraphOperations.ReleaseDowngradesDictionary(System.Collections.Generic.Dictionary<NuGet.DependencyResolver.GraphNode<NuGet.DependencyResolver.RemoteResolveResult>, NuGet.DependencyResolver.GraphNode<NuGet.DependencyResolver.RemoteResolveResult>> dictionary) -> void
static NuGet.DependencyResolver.GraphOperations.RentDowngradesDictionary() -> System.Collections.Generic.Dictionary<NuGet.DependencyResolver.GraphNode<NuGet.DependencyResolver.RemoteResolveResult>, NuGet.DependencyResolver.GraphNode<NuGet.DependencyResolver.RemoteResolveResult>>
static NuGet.DependencyResolver.PackagingUtility.GetLibraryDependencyFromNuspec(NuGet.Packaging.Core.PackageDependency dependency) -> NuGet.LibraryModel.LibraryDependency
static NuGet.DependencyResolver.RemoteDependencyWalker.IsGreaterThanOrEqualTo(NuGet.Versioning.VersionRange nearVersion, NuGet.Versioning.VersionRange farVersion) -> bool
static NuGet.DependencyResolver.ResolverUtility.FindLibraryByVersionAsync(NuGet.LibraryModel.LibraryRange libraryRange, NuGet.Frameworks.NuGetFramework framework, System.Collections.Generic.IEnumerable<NuGet.DependencyResolver.IRemoteDependencyProvider> providers, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<NuGet.DependencyResolver.RemoteMatch>
static NuGet.DependencyResolver.ResolverUtility.FindLibraryCachedAsync(System.Collections.Concurrent.ConcurrentDictionary<NuGet.DependencyResolver.LibraryRangeCacheKey, System.Threading.Tasks.Task<NuGet.DependencyResolver.GraphItem<NuGet.DependencyResolver.RemoteResolveResult>>> cache, NuGet.LibraryModel.LibraryRange libraryRange, NuGet.Frameworks.NuGetFramework framework, string runtimeIdentifier, NuGet.DependencyResolver.RemoteWalkContext context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NuGet.DependencyResolver.GraphItem<NuGet.DependencyResolver.RemoteResolveResult>>
static NuGet.DependencyResolver.ResolverUtility.FindLibraryEntryAsync(NuGet.LibraryModel.LibraryRange libraryRange, NuGet.Frameworks.NuGetFramework framework, string runtimeIdentifier, NuGet.DependencyResolver.RemoteWalkContext context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NuGet.DependencyResolver.GraphItem<NuGet.DependencyResolver.RemoteResolveResult>>
static NuGet.DependencyResolver.ResolverUtility.FindLibraryMatchAsync(NuGet.LibraryModel.LibraryRange libraryRange, NuGet.Frameworks.NuGetFramework framework, string runtimeIdentifier, System.Collections.Generic.IEnumerable<NuGet.DependencyResolver.IRemoteDependencyProvider> remoteProviders, System.Collections.Generic.IEnumerable<NuGet.DependencyResolver.IRemoteDependencyProvider> localProviders, System.Collections.Generic.IEnumerable<NuGet.DependencyResolver.IDependencyProvider> projectProviders, System.Collections.Generic.IDictionary<NuGet.DependencyResolver.LockFileCacheKey, System.Collections.Generic.IList<NuGet.LibraryModel.LibraryIdentity>> lockFileLibraries, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NuGet.DependencyResolver.RemoteMatch>
static NuGet.DependencyResolver.ResolverUtility.FindPackageLibraryMatchCachedAsync(System.Collections.Concurrent.ConcurrentDictionary<NuGet.LibraryModel.LibraryRange, System.Threading.Tasks.Task<System.Tuple<NuGet.LibraryModel.LibraryRange, NuGet.DependencyResolver.RemoteMatch>>> cache, NuGet.LibraryModel.LibraryRange libraryRange, System.Collections.Generic.IEnumerable<NuGet.DependencyResolver.IRemoteDependencyProvider> remoteProviders, System.Collections.Generic.IEnumerable<NuGet.DependencyResolver.IRemoteDependencyProvider> localProviders, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Tuple<NuGet.LibraryModel.LibraryRange, NuGet.DependencyResolver.RemoteMatch>>
static NuGet.DependencyResolver.ResolverUtility.FindProjectMatchAsync(NuGet.LibraryModel.LibraryRange libraryRange, NuGet.Frameworks.NuGetFramework framework, System.Collections.Generic.IEnumerable<NuGet.DependencyResolver.IDependencyProvider> projectProviders, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NuGet.DependencyResolver.RemoteMatch>
