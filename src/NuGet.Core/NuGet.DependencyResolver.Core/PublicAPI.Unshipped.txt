NuGet.DependencyResolver.RemoteResolveResult.Dependencies.get -> System.Collections.Generic.List<NuGet.LibraryModel.LibraryDependency>
NuGet.DependencyResolver.RemoteWalkContext.FilterDependencyProvidersForLibrary(NuGet.LibraryModel.LibraryRange libraryRange) -> System.Collections.Generic.IList<NuGet.DependencyResolver.IRemoteDependencyProvider>
NuGet.DependencyResolver.RemoteWalkContext.PackageSourceMapping.get -> NuGet.Configuration.PackageSourceMapping
NuGet.DependencyResolver.RemoteWalkContext.RemoteWalkContext(NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Configuration.PackageSourceMapping packageSourceMapping, NuGet.Common.ILogger logger) -> void
static NuGet.DependencyResolver.ResolverUtility.FindPackageLibraryMatchCachedAsync(System.Collections.Concurrent.ConcurrentDictionary<NuGet.LibraryModel.LibraryRange, System.Threading.Tasks.Task<System.Tuple<NuGet.LibraryModel.LibraryRange, NuGet.DependencyResolver.RemoteMatch>>> cache, NuGet.LibraryModel.LibraryRange libraryRange, NuGet.DependencyResolver.RemoteWalkContext remoteWalkContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Tuple<NuGet.LibraryModel.LibraryRange, NuGet.DependencyResolver.RemoteMatch>>
