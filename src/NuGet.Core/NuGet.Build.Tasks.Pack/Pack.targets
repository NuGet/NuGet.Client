<!--
***********************************************************************************************
NuGet.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Load NuGet.Build.Tasks.dll, this can be overridden to use a different version with $(RestoreTaskAssemblyFile) -->
  <PropertyGroup Condition="$(NugetTaskAssemblyFile) == ''">
    <NugetTaskAssemblyFile Condition="$(MSBuildRuntimeType) == 'Core'">CoreCLR\\NuGet.Build.Tasks.Pack.dll</NugetTaskAssemblyFile>
    <NugetTaskAssemblyFile Condition="$(MSBuildRuntimeType) != 'Core'">Desktop\\NuGet.Build.Tasks.Pack.dll</NugetTaskAssemblyFile>
  </PropertyGroup>
  <UsingTask TaskName="NuGet.Build.Tasks.Pack.PackTask" AssemblyFile="$(NugetTaskAssemblyFile)" />
  <UsingTask TaskName="NuGet.Build.Tasks.Pack.PackNuspecTask" AssemblyFile="$(NugetTaskAssemblyFile)" />

  <PropertyGroup>
    <PackageId Condition=" '$(PackageId)' == '' ">$(AssemblyName)</PackageId>
    <PackageVersion Condition=" '$(PackageVersion)' == '' ">$(Version)</PackageVersion>
    <PackageOutputPath Condition=" '$(PackageOutputPath )' == '' ">$(TargetDir)</PackageOutputPath>
    <IncludeContentInPack Condition="'$(IncludeContentInPack)'==''">true</IncludeContentInPack>
    <GenerateNuspecDependsOn>_LoadPackInputItems; _WalkEachTargetPerFramework; _GetPackageFilesFromReferencedProjects; _GetSourceFilesForSymbols; _GetTargetPaths</GenerateNuspecDependsOn>
    <Description Condition="'$(Description)'==''">Package Description</Description>
    <IsPackable Condition="'$(IsPackable)'==''">true</IsPackable>
  </PropertyGroup>
  <PropertyGroup Condition="'$(NoBuild)' == 'true' ">
    <GenerateNuspecDependsOn>$(GenerateNuspecDependsOn)</GenerateNuspecDependsOn>
  </PropertyGroup>
  <PropertyGroup Condition="'$(NoBuild)' != 'true' ">
    <GenerateNuspecDependsOn>Build;$(GenerateNuspecDependsOn)</GenerateNuspecDependsOn>
  </PropertyGroup>
  <PropertyGroup Condition="$(NuspecFile) == ''">
    <PackDependsOn>GenerateNuspec</PackDependsOn>
  </PropertyGroup>
  <PropertyGroup Condition="$(NuspecFile) != ''">
    <PackDependsOn>PackUsingNuspec</PackDependsOn>
  </PropertyGroup>
  <ItemGroup>
    <_TargetFrameworks Include="$(TargetFrameworks.Split(';'))"></_TargetFrameworks>
  </ItemGroup>
  
  <!--
    ============================================================
    Pack
    Main entry point for packing packages
    ============================================================
  -->
  <Target Name="Pack" DependsOnTargets="_IntermediatePack;$(PackDependsOn)">
  </Target>
  <Target Name="_IntermediatePack">
    <PropertyGroup>
      <ContinuePackingAfterGeneratingNuspec>true</ContinuePackingAfterGeneratingNuspec>
    </PropertyGroup>
  </Target>
  <Target Name="PackUsingNuspec">
    <PackNuspecTask NuspecFile ="$(NuspecFile)"/>
  </Target>
  <Target Name="GenerateNuspec" DependsOnTargets="$(GenerateNuspecDependsOn)" Condition="$(IsPackable) == 'true'">
    <PropertyGroup Condition="$(ContinuePackingAfterGeneratingNuspec) == '' ">
      <ContinuePackingAfterGeneratingNuspec>false</ContinuePackingAfterGeneratingNuspec>
    </PropertyGroup>
    <Message Text="In target GenerateNuspec with value of the boolean ContinuePackingAfterGeneratingNuspec: $(ContinuePackingAfterGeneratingNuspec)" Importance="High" />
    <!-- Call Pack -->
    <PackTask PackItem="$(PackProjectInputFile)"
              PackageFiles="@(_PackageFiles)"
              PackageFilesToExclude="@(_PackageFilesToExclude)"
              PackageVersion="$(PackageVersion)"
              PackageId="$(PackageId)"
              Authors="$(Authors)"
              Description="$(Description)"
              Copyright="$(Copyright)"
              RequireLicenseAcceptance="$(PackageRequireLicenseAcceptance)"
              LicenseUrl="$(PackageLicenseUrl)"
              ProjectUrl="$(PackageProjectUrl)"
              IconUrl="$(PackageIconUrl)"
              ReleaseNotes="$(PackageReleaseNotes)"
              Tags="$(PackageTags)"
              Configuration="$(Configuration)"
              TargetPaths="@(_TargetPaths)"
              TargetFrameworks="@(_TargetFrameworks)"
              AssemblyName="$(AssemblyName)"
              ProjectReferences="@(_ProjectReferences)"
              PackageOutputPath="$(PackageOutputPath)"
              IncludeSymbols="$(IncludeSymbols)"
              IncludeSource="$(IncludeSource)"
              PackageTypes="$(PackageType)"
              IsTool="$(IsTool)"
              RepositoryUrl="$(RepositoryUrl)"
              RepositoryType="$(RepositoryType)"
              SourceFiles="@(_SourceFiles)"
              NoPackageAnalysis="$(NoPackageAnalysis)"
              MinClientVersion="$(MinClientVersion)"
              Serviceable="$(Serviceable)"
              VersionSuffix ="$(VersionSuffix)"
              AssemblyReferences="@(_References)"
              PackageReferences="@(_PackageReferences)"
              ContinuePackingAfterGeneratingNuspec="$(ContinuePackingAfterGeneratingNuspec)"
              NuspecOutputPath="$(IntermediateOutputPath)"/>
  </Target>

  <Target Name="_GetTargetPaths">
    <ItemGroup>
      <_TargetPaths Include="$(TargetDir)%(_TargetFrameworks.Identity)\$(TargetFileName)"/>
    </ItemGroup>
  </Target>
  <!--
    ============================================================
    _LoadPackGraphEntryPoints
    Find project entry points and load them into items.
    ============================================================
  -->
  <Target Name="_LoadPackInputItems">
    <!-- Allow overriding items with ProjectFileToPack -->
    <PropertyGroup Condition="'$(PackProjectInputFile)' == ''">
      <PackProjectInputFile>$(ProjectFileToPack)</PackProjectInputFile>
    </PropertyGroup>

    <!-- Project case -->
    <PropertyGroup Condition="$(MSBuildProjectFullPath.EndsWith('.csproj')) == 'true' AND '$(PackProjectInputFile)' == ''">
      <PackProjectInputFile>$(MSBuildProjectFullPath)</PackProjectInputFile>
    </PropertyGroup>
  </Target>
  
  <Target Name="_WalkEachTargetPerFramework">
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="_GetProjectToProjectReferences"
      Properties="TargetFramework=%(_TargetFrameworks.Identity)
              %(_MSBuildProjectReferenceExistent.SetConfiguration);
              %(_MSBuildProjectReferenceExistent.SetPlatform);
              BuildProjectReferences=false;"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_ProjectReferences" />
    </MSBuild>
    
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="_GetPackageReferences"
      Properties="TargetFramework=%(_TargetFrameworks.Identity)
              %(_MSBuildProjectReferenceExistent.SetConfiguration);
              %(_MSBuildProjectReferenceExistent.SetPlatform);
              BuildProjectReferences=false;"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_PackageReferences" />
    </MSBuild>
  </Target>

  <Target Name="_AddMetadataToProjectReference"
          Returns="@(_ProjectReferences)">
    <ItemGroup>
      <_ProjectReferences Include="$(MSBuildProjectFullPath)">
        <PackageId>$(PackageId)</PackageId>
        <PackageVersion>$(PackageVersion)</PackageVersion>
        <IncludeAssets>$(IncludeAssets)</IncludeAssets>
        <ExcludeAssets>$(ExcludeAssets)</ExcludeAssets>
        <PrivateAssets>$(PrivateAssets)</PrivateAssets>
        <TargetFramework>$(TargetFramework)</TargetFramework>
        <Type>Package</Type>
      </_ProjectReferences>
    </ItemGroup>
  </Target>
  
  <!--
    ============================================================
    _GetProjectToProjectReferences
    Entry point for generating the project to project references.
    ============================================================
  -->
  <Target Name="_GetProjectToProjectReferences"
      Condition="$(TargetFramework) != ''"
      DependsOnTargets="ResolveProjectReferences"
      Returns="@(_ProjectReferences)">

    <ItemGroup>
      <!-- Filter out project references that specify ReferenceOutputAssembly=false -->
      <ValidProjectInputForPackGraph Include="@(ProjectReference)"
          Condition=" ('%(ProjectReference.ReferenceOutputAssembly)' == '' OR '%(ProjectReference.ReferenceOutputAssembly)' == 'true')" />
    </ItemGroup>

    <MSBuild
      Projects="@(ValidProjectInputForPackGraph)"
      Targets="_AddMetadataToProjectReference"
      Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);
              %(_MSBuildProjectReferenceExistent.SetPlatform);
              CustomAfterMicrosoftCommonTargets=$(MSBuildThisFileFullPath);
              BuildProjectReferences=false;
              TargetFramework=$(TargetFramework);
              IncludeAssets=%(ValidProjectInputForPackGraph.IncludeAssets);
              ExcludeAssets=%(ValidProjectInputForPackGraph.ExcludeAssets);
              PrivateAssets=%(ValidProjectInputForPackGraph.PrivateAssets)"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_ProjectReferences" />
    </MSBuild>
  </Target>

  

  <!--
    ============================================================
    _GetPackageFilesFromReferencedProjects
    Entry point for generating the project to project references.
    ============================================================
  -->
  <Target Name="_GetPackageFilesFromReferencedProjects" Condition="$(IncludeContentInPack) == 'true'">
    <ItemGroup>
      <_PackageFilesToExclude Include="@(Content)" Condition="'%(Content.Pack)' == 'false'"/>
    </ItemGroup>
     <!-- Include PackageFiles and Content of the project being packed -->
    <ItemGroup>
      <_PackageFiles Include="@(Content)" Condition=" %(Content.Pack) != 'false' " />
      <_PackageFiles Include="@(Compile)" Condition=" %(Compile.Pack) == 'true' " />
      <_PackageFiles Include="@(None)" Condition=" %(None.Pack) == 'true' " />
    </ItemGroup>
  </Target>

  
  <!--
    ============================================================
    _GetSourceFilesForSymbols
    Entry point for getting the source files for the project & it's references.
    ============================================================
  -->
  <Target Name="_GetSourceFilesForSymbols" Condition="$(IncludeSource) == 'true'">
    <ItemGroup>
      <_SourceFiles Include="@(Compile)" />
    </ItemGroup>
  </Target>

<!--
    ============================================================
    _GetPackageReferences
    Entry point for getting the package references for a project and it's references
    ============================================================
  -->
  <Target Name="_GetPackageReferences"
      Condition="$(TargetFramework) != ''"
      Returns="@(_PackageReferences)">

    <!-- Project to project entry -->
    <ItemGroup>
      <_PackageReferences Include="%(PackageReference.Identity)">
        <TargetFramework>$(TargetFramework)</TargetFramework>
        <IncludeAssets>%(PackageReference.IncludeAssets)</IncludeAssets>
        <ExcludeAssets>%(PackageReference.ExcludeAssets)</ExcludeAssets>
        <PrivateAssets>%(PackageReference.PrivateAssets)</PrivateAssets>
        <Version>%(PackageReference.Version)</Version>
      </_PackageReferences>
    </ItemGroup>
  </Target>  
</Project>