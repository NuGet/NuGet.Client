// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

#nullable enable

using System.Threading;
using System.Threading.Tasks;
using NuGet.Common;
using NuGet.Protocol;
using NuGet.Protocol.Core.Types;
using NuGet.Protocol.Model;

namespace NuGet.Commands
{
    internal sealed class VulnerabilityInformationProvider : IVulnerabilityInformationProvider
    {
        private readonly SourceRepository _source;
        private readonly SourceCacheContext _sourceCacheContext;
        private readonly ILogger _logger;

        private readonly AsyncLazy<GetVulnerabilityInfoResult?> _vulnerabilityInfo;

        public VulnerabilityInformationProvider(SourceRepository source, SourceCacheContext cacheContext, ILogger logger)
        {
            _source = source;
            _sourceCacheContext = cacheContext;
            _logger = logger;

            _vulnerabilityInfo = new AsyncLazy<GetVulnerabilityInfoResult?>(GetVulnerabilityInfoAsync);
        }

        public async Task<GetVulnerabilityInfoResult?> GetVulnerabilityInformationAsync(CancellationToken cancellationToken)
        {
            GetVulnerabilityInfoResult? result = await _vulnerabilityInfo;
            return result;
        }

        private async Task<GetVulnerabilityInfoResult?> GetVulnerabilityInfoAsync()
        {
            IVulnerabilityInfoResource vulnerabilityInfoResource =
                await _source.GetResourceAsync<IVulnerabilityInfoResource>(CancellationToken.None);
            if (vulnerabilityInfoResource is null)
            {
                return null;
            }

            GetVulnerabilityInfoResult result = await vulnerabilityInfoResource.GetVulnerabilityInfoAsync(_sourceCacheContext, _logger, CancellationToken.None);
            return result;
        }
    }
}
