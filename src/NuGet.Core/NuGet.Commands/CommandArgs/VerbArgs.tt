<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml.XDocument" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="..\..\NuGet.CommandLine.XPlat\Commands\SystemCommandLine\Utils.tt" once="true" #>
<#
    string commandFile = this.Host.ResolvePath("..\\..\\NuGet.CommandLine.XPlat\\Commands\\Commands.xml");
    XDocument commands = XDocument.Load(commandFile);
#>
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// Do not manually edit this autogenerated file:
// instead modify the neighboring .tt file (text template) and/or NuGet.CommandLine.Xplat\Commands\Commands.xml (data file),
// then re-execute the text template via "run custom tool" on VS context menu for .tt file, or via dotnet-t4 global tool.

namespace NuGet.Commands
{
<#
    // VerbNounArgs class
    foreach (XElement verb in commands.Descendants(XName.Get("Verb","")))
    {
        string verbName = verb.Attribute(XName.Get("Name", "")).Value;
        string verbFormalName = InitCaps(verbName);
        foreach (XElement noun in verb.Descendants(XName.Get("Noun")))
        {
            string nounName = noun.Attribute(XName.Get("Name", ""))?.Value;
            string nounFormalName = StringUtilities.GetFormalName(nounName);

            GenerateArgsClass(verbFormalName + nounFormalName + "Args", noun, "public", 4);
        } // foreach noun

        var opts = verb.Elements().Where(n => isValidOption(n));
        if (opts.Any())
        {
            GenerateArgsClass(verbFormalName + "Args", verb, "internal", 4);
        }
    } // foreach verb
#>
}
