<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorDuplicatePackages" xml:space="preserve">
    <value>There are duplicate packages: {0}</value>
  </data>
  <data name="ErrorInvalidAllowedVersions" xml:space="preserve">
    <value>Invalid allowedVersions for package id '{0}': '{1}'</value>
  </data>
  <data name="ErrorInvalidMinClientVersion" xml:space="preserve">
    <value>Invalid minClientVersion: '{0}'</value>
  </data>
  <data name="ErrorInvalidPackageVersion" xml:space="preserve">
    <value>Invalid package version for package id '{0}': '{1}'</value>
  </data>
  <data name="ErrorInvalidPackageVersionForDependency" xml:space="preserve">
    <value>Invalid package version for a dependency with id '{0}' in package '{1}': '{2}'</value>
    <comment>{0} is the dependency's package id.
{1} is the package's identity.
{2} is the dependency's version range.</comment>
  </data>
  <data name="ErrorNullOrEmptyPackageId" xml:space="preserve">
    <value>Null or empty package id</value>
  </data>
  <data name="Log_InstallingPackage" xml:space="preserve">
    <value>Installing {0} {1}.</value>
  </data>
  <data name="FailToLoadPackagesConfig" xml:space="preserve">
    <value>Fail to load packages.config as XML file. Please check it. </value>
  </data>
  <data name="MinClientVersionAlreadyExist" xml:space="preserve">
    <value>MinClientVersion already exists in packages.config</value>
  </data>
  <data name="MissingNuspec" xml:space="preserve">
    <value>Nuspec file does not exist in package.</value>
  </data>
  <data name="PackageEntryAlreadyExist" xml:space="preserve">
    <value>Package entry already exists in packages.config. Id: {0}</value>
  </data>
  <data name="PackageEntryNotExist" xml:space="preserve">
    <value>Package entry does not exists in packages.config. Id: {0}, Version: {1}</value>
  </data>
  <data name="PackageStreamShouldBeSeekable" xml:space="preserve">
    <value>Package stream should be seekable</value>
  </data>
  <data name="StringCannotBeNullOrEmpty" xml:space="preserve">
    <value>String argument '{0}' cannot be null or empty</value>
  </data>
  <data name="UnableToAddEntry" xml:space="preserve">
    <value>An error occurred while updating packages.config. The file was closed before the entry could be added.</value>
  </data>
  <data name="MultipleNuspecFiles" xml:space="preserve">
    <value>Package contains multiple nuspec files.</value>
  </data>
  <data name="InvalidNuspecEntry" xml:space="preserve">
    <value>The nuspec contains an invalid entry '{0}' in package '{1}' .</value>
  </data>
  <data name="FailToWritePackagesConfig" xml:space="preserve">
    <value>Failed to write packages.config as XML file '{0}'. Error: '{1}'.</value>
  </data>
  <data name="PackagesNodeNotExist" xml:space="preserve">
    <value>Packages node does not exists in packages.config at {0}.</value>
  </data>
  <data name="ErrorUnableToDeleteFile" xml:space="preserve">
    <value>Unable to delete temporary file '{0}'. Error: '{1}'.</value>
  </data>
  <data name="FailedFileTime" xml:space="preserve">
    <value>Failed to update file time for {0}: {1}</value>
  </data>
  <data name="Error_InvalidTargetFramework" xml:space="preserve">
    <value>Unsupported targetFramework value '{0}'.</value>
  </data>
  <data name="PackageMinVersionNotSatisfied" xml:space="preserve">
    <value>The '{0}' package requires NuGet client version '{1}' or above, but the current NuGet version is '{2}'. To upgrade NuGet, please go to http://docs.nuget.org/consume/installing-nuget</value>
  </data>
  <data name="UnableToParseClientVersion" xml:space="preserve">
    <value>Unable to parse the current NuGet client version.</value>
  </data>
  <data name="InvalidNuspecElement" xml:space="preserve">
    <value>{0} This validation error occurred in a '{1}' element.</value>
    <comment>{0} is the validation error message.
{1} is the local name of the XML element that causes the validation error.</comment>
  </data>
  <data name="MustContainAbsolutePath" xml:space="preserve">
    <value>'{0}' must contain an absolute path '{1}'.</value>
  </data>
  <data name="FallbackFolderNotFound" xml:space="preserve">
    <value>Unable to find fallback package folder '{0}'.</value>
  </data>
  <data name="InvalidPackageFrameworkFolderName" xml:space="preserve">
    <value>The framework in the folder name of '{0}' in package '{1}' could not be parsed.</value>
    <comment>{0} is the invalid path.
{1} is the package ID and version.</comment>
  </data>
  <data name="ErrorManifestFileNotFound" xml:space="preserve">
    <value>Manifest file not found at '{0}'</value>
  </data>
  <data name="ErrorPackageNotSigned" xml:space="preserve">
    <value>Package is not signed.</value>
  </data>
  <data name="ErrorPackageTampered" xml:space="preserve">
    <value>Package contents might have been tampered.</value>
  </data>
  <data name="ErrorSigningCertUntrustedRoot" xml:space="preserve">
    <value>Signing certificate chains to an untrusted root.</value>
  </data>
  <data name="InvalidPackageSignature" xml:space="preserve">
    <value>Package {0} signature is invalid.</value>
  </data>
  <data name="TimestampFailureAuthorCertNotValid" xml:space="preserve">
    <value>Author certificate was not valid when it was timestamped.</value>
  </data>
  <data name="TimestampFailureInvalidHash" xml:space="preserve">
    <value>Timestamp integrity check failed.</value>
  </data>
  <data name="TimestampFailureInvalidHashAlgorithmOid" xml:space="preserve">
    <value>The timestamp uses as unsupported hash algorithm.</value>
  </data>
  <data name="TimestampFailureInvalidHttpScheme" xml:space="preserve">
    <value>The timestamper url '{0}' has an invalid uri scheme. The supported schemes are '{1}' and '{2}'.</value>
    <comment>0 - url value
1 - Uri.Http scheme
2 - Uri.Https scheme</comment>
  </data>
  <data name="TimestampFailureNonceMismatch" xml:space="preserve">
    <value>Timestamp response does not contain a matching response.</value>
  </data>
  <data name="TimestampResponseExceptionGeneral" xml:space="preserve">
    <value>Timestamp service's response does not meet the NuGet package signature specification: '{0}'.</value>
    <comment>0 - Reason for failure</comment>
  </data>
  <data name="TimestampFailureInvalidContentType" xml:space="preserve">
    <value>Timestamp signature validation failed.</value>
  </data>
  <data name="TimestampCertificateChainBuildFailure" xml:space="preserve">
    <value>The timestamp service's certificate chain could not be built for the following certificate: {0}</value>
    <comment>0 -  X509Certificate2 details in the following format -
Subject Name:
SHA1 hash:
Issued by:
Valid from:</comment>
  </data>
  <data name="SignedPackageUnableToAccessSignature" xml:space="preserve">
    <value>The package was not opened correctly to perform Signature operations. Please use a Stream based constructor to have access to Signature attributes of the package.</value>
  </data>
  <data name="SignedPackagePackageAlreadySigned" xml:space="preserve">
    <value>The package already contains a signature. Please remove the existing signature before adding a new signature.</value>
  </data>
  <data name="SignedPackageNotSignedOnRemove" xml:space="preserve">
    <value>The package is not signed. Unable to remove signature from an unsigned package.</value>
  </data>
  <data name="ErrorSignatureFileTooBig" xml:space="preserve">
    <value>Signature file is not of a reasonable size. Package contents might have been tampered.</value>
  </data>
  <data name="CertUtilityCertificateHash" xml:space="preserve">
    <value>SHA1 hash: {0}</value>
    <comment>0 - certificate sha1 hash</comment>
  </data>
  <data name="CertUtilityCertificateIssuer" xml:space="preserve">
    <value>Issued by: {0}</value>
    <comment>0 - certificate issuer</comment>
  </data>
  <data name="CertUtilityCertificateSubjectName" xml:space="preserve">
    <value>Subject Name: {0}</value>
    <comment>0 - certificate subject name</comment>
  </data>
  <data name="CertUtilityCertificateValidity" xml:space="preserve">
    <value>Valid from: {0} to {1}</value>
    <comment>0 -  start date
1 - end date</comment>
  </data>
  <data name="CertUtilityMultipleCertificatesFooter" xml:space="preserve">
    <value>... {0} more.</value>
  </data>
  <data name="CertUtilityMultipleCertificatesHeader" xml:space="preserve">
    <value>The following certificates meet all given criteria:</value>
  </data>
  <data name="VerificationAuthorCertDisplay" xml:space="preserve">
    <value>Verifying signature with author certificate: {0}</value>
    <comment>0 -  X509Certificate2 details in the following format -
Subject Name:
SHA1 hash:
Issued by:
Valid from:</comment>
  </data>
  <data name="VerificationTimestamperCertDisplay" xml:space="preserve">
    <value>Verifying timestamp with timestamping service certificate: {0}</value>
    <comment>0 -  X509Certificate2 details in the following format -
Subject Name:
SHA1 hash:
Issued by:
Valid from:</comment>
  </data>
  <data name="SignedPackageNotSignedOnVerify" xml:space="preserve">
    <value>The package is not signed. Unable to verify signature from an unsigned package.</value>
  </data>
  <data name="ErrorPackageSignatureInvalid" xml:space="preserve">
    <value>Package signature is invalid.</value>
  </data>
  <data name="DebugNoCertificate" xml:space="preserve">
    <value>Certificate inside main SignerInfo is null.</value>
  </data>
  <data name="CommitmentTypeIndicationAttributeInvalid" xml:space="preserve">
    <value>commitment-type-indication attribute contains an invalid value.</value>
  </data>
  <data name="ErrorByteSignatureNotFound" xml:space="preserve">
    <value>Byte signature not found in package archive:</value>
  </data>
  <data name="SignatureContainsInvalidAttribute" xml:space="preserve">
    <value>Package signature contains an invalid attribute: {0}</value>
  </data>
  <data name="ErrorByteSignatureTooBig" xml:space="preserve">
    <value>Byte signature too big to seek in current stream position.</value>
  </data>
  <data name="ErrorInvalidCertificateChain" xml:space="preserve">
    <value>Certificate chain validation failed with error: {0}</value>
  </data>
  <data name="ErrorInvalidPublicKey" xml:space="preserve">
    <value>Could not validate signature. Certificate does not meet the public key requirements.</value>
  </data>
  <data name="ErrorNoCertificate" xml:space="preserve">
    <value>The primary signature did not have a signing certificate.</value>
  </data>
  <data name="ErrorSignatureVerificationFailed" xml:space="preserve">
    <value>Primary signature validation failed.</value>
  </data>
  <data name="SignatureDebug_HashOidFound" xml:space="preserve">
    <value>Signature hash oid found: {0}</value>
  </data>
  <data name="SignatureFailureInvalidHashAlgorithmOid" xml:space="preserve">
    <value>The primary signature uses an unsupported hash algorithm.</value>
  </data>
  <data name="SignaturePackageIntegrityFailure" xml:space="preserve">
    <value>Package integrity check failed.</value>
  </data>
  <data name="SignatureHashAlgorithm" xml:space="preserve">
    <value>Signature Hash Algorithm: {0}</value>
  </data>
  <data name="SignatureType" xml:space="preserve">
    <value>Signature type: {0}</value>
  </data>
  <data name="TimestampInvalid" xml:space="preserve">
    <value>The signature contains an invalid timestamp.</value>
  </data>
  <data name="TimestampValue" xml:space="preserve">
    <value>Timestamp: {0}</value>
  </data>
  <data name="WarningOfflineRevocationCheck" xml:space="preserve">
    <value>Could not check revocation status of signing certificate online.</value>
  </data>
  <data name="WarningUnknownSignatureType" xml:space="preserve">
    <value>Could not validate signature. Unknown signature type.</value>
  </data>
  <data name="WarningUntrustedRoot" xml:space="preserve">
    <value>Signing certificate does not chain to a trusted root.</value>
  </data>
  <data name="VerificationDefaultCertDisplay" xml:space="preserve">
    <value>Verifying signature with certificate: {0}</value>
  </data>
  <data name="ErrorCertificateHasLifetimeSignerEKU" xml:space="preserve">
    <value>Certificates with lifetime signer EKU are not supported.</value>
  </data>
  <data name="ErrorInvalidPackageArchive" xml:space="preserve">
    <value>Invalid package archive.</value>
  </data>
  <data name="ErrorZip64NotSupported" xml:space="preserve">
    <value>ZIP64 signed packages are not supported.</value>
  </data>
  <data name="Error_NotOnePrimarySignature" xml:space="preserve">
    <value>The package signature contains multiple primary signatures.</value>
  </data>
  <data name="TimestampCertificateInvalid" xml:space="preserve">
    <value>The timestamp service's certificate has a valid time in the future: {0}</value>
    <comment>0 -  X509Certificate2 details in the following format -
Subject Name:
SHA1 hash:
Issued by:
Valid from:</comment>
  </data>
  <data name="SigningCertificateV2Invalid" xml:space="preserve">
    <value>signing-certificate-v2 attribute value does not match the current certificate chain.</value>
  </data>
  <data name="CommitmentTypeIndicationInvalid" xml:space="preserve">
    <value>commitment-type-indication attribute is invalid.</value>
  </data>
  <data name="InvalidSignatureContent" xml:space="preserve">
    <value>The package signature content is invalid.</value>
  </data>
  <data name="UnableToReadPackageHashInformation" xml:space="preserve">
    <value>Package hash information could not be read from the package signature.</value>
  </data>
  <data name="UnsupportedSignatureFormatVersion" xml:space="preserve">
    <value>The package signature format version is not supported. Updating your client may solve this problem.</value>
  </data>
  <data name="SignFailureCertificateInvalidProviderType" xml:space="preserve">
    <value>The following certificate cannot be used for package signing as the private key provider is unsupported:</value>
  </data>
  <data name="ErrorInvalidCertificateChainUnspecifiedReason" xml:space="preserve">
    <value>Certificate chain validation failed for an unspecified reason.</value>
  </data>
  <data name="ArgumentCannotBeNullOrEmpty" xml:space="preserve">
    <value>The argument cannot be null or empty.</value>
  </data>
  <data name="SigningCertificateHasUnsupportedSignatureAlgorithm" xml:space="preserve">
    <value>The signing certificate has an unsupported signature algorithm.</value>
  </data>
  <data name="SigningCertificateFailsPublicKeyLengthRequirement" xml:space="preserve">
    <value>The signing certificate does not meet a minimum public key length requirement.</value>
  </data>
  <data name="SignatureCentralDirectoryHeaderInvalid" xml:space="preserve">
    <value>Invalid central directory header for signature entry: {0}</value>
    <comment>0 - exact cause of the failure.</comment>
  </data>
  <data name="SignatureFileCompressed" xml:space="preserve">
    <value>File was found to be compressed.</value>
  </data>
  <data name="SignatureInvalidCompressionMethod" xml:space="preserve">
    <value>Invalid compression method. Expected '{0}', actual '{1}'.</value>
    <comment>0 - expected value in uint
1 - actual value in uint</comment>
  </data>
  <data name="SignatureInvalidGeneralPurposeBits" xml:space="preserve">
    <value>Invalid general purpose bit flags. Expected '{0}', actual '{1}'.</value>
    <comment>0 - expected value in uint
1 - actual value in uint</comment>
  </data>
  <data name="SignatureLocalFileHeaderInvalid" xml:space="preserve">
    <value>Invalid local file header for signature entry: {0}</value>
    <comment>0 - exact cause of the failure.</comment>
  </data>
  <data name="SignedPackageArchiveIOExtraRead" xml:space="preserve">
    <value>Package stream read position cannot be longer than the length of the stream.</value>
  </data>
  <data name="SignedPackageArchiveIOInvalidRead" xml:space="preserve">
    <value>Package stream read position cannot be before the current position in the stream.</value>
  </data>
  <data name="ErrorMultipleTimestamps" xml:space="preserve">
    <value>Multiple timestamps are not accepted.</value>
  </data>
  <data name="ErrorNoTimestamp" xml:space="preserve">
    <value>The primary signature should be timestamped to enable long-term signature validity after the certificate has expired.</value>
  </data>
  <data name="TimestampNoCertificate" xml:space="preserve">
    <value>The timestamp signature did not have a signing certificate.</value>
  </data>
  <data name="SignatureNotYetValid" xml:space="preserve">
    <value>The signing certificate is not yet valid.</value>
  </data>
  <data name="TimestampNotYetValid" xml:space="preserve">
    <value>The timestamp signing certificate is not yet valid.</value>
  </data>
  <data name="SignatureInvalidExternalFileAttributes" xml:space="preserve">
    <value>The package signature file entry is invalid.</value>
  </data>
</root>