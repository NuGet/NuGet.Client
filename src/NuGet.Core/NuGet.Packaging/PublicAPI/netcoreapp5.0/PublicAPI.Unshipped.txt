NuGet.Packaging.ManifestMetadata.EmitRequireLicenseAcceptance.get -> bool
NuGet.Packaging.ManifestMetadata.EmitRequireLicenseAcceptance.set -> void
NuGet.Packaging.PackageBuilder.EmitRequireLicenseAcceptance.get -> bool
NuGet.Packaging.PackageBuilder.EmitRequireLicenseAcceptance.set -> void
NuGet.Packaging.PackageBuilder.PackageBuilder(bool deterministic, NuGet.Common.ILogger logger) -> void
NuGet.Packaging.PackageBuilder.PackageBuilder(string path, System.Func<string, string> propertyProvider, bool includeEmptyDirectories, bool deterministic, NuGet.Common.ILogger logger) -> void
NuGet.Packaging.PackageBuilder.PackageBuilder(string path, string basePath, System.Func<string, string> propertyProvider, bool includeEmptyDirectories, bool deterministic, NuGet.Common.ILogger logger) -> void
NuGet.Packaging.IPackageMetadata.Readme.get -> string
NuGet.Packaging.ManifestMetadata.Readme.get -> string
NuGet.Packaging.ManifestMetadata.Readme.set -> void
NuGet.Packaging.NuspecReader.GetReadme() -> string
NuGet.Packaging.PackageBuilder.Readme.get -> string
NuGet.Packaging.PackageBuilder.Readme.set -> void
static NuGet.Packaging.Signing.CertificateUtility.X509Certificate2ToLogMessages(System.Security.Cryptography.X509Certificates.X509Certificate2 cert, NuGet.Common.HashAlgorithmName fingerprintAlgorithm, string indentation = "  ") -> System.Collections.Generic.IReadOnlyList<NuGet.Packaging.Signing.SignatureLog>
static NuGet.Packaging.Signing.SignatureLog.MinimalLog(string message) -> NuGet.Packaging.Signing.SignatureLog
