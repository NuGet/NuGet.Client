<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssemblyDirectlyUnderLibWarning" xml:space="preserve">
    <value>The assembly '{0}' is placed directly under 'lib' folder. It is recommended that assemblies be placed inside a framework-specific folder. Move it into a framework-specific folder.</value>
  </data>
  <data name="AssemblyOutsideLibWarning" xml:space="preserve">
    <value>The assembly '{0}' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced.</value>
  </data>
  <data name="BuildConventionIsViolatedWarning" xml:space="preserve">
    <value>- At least one {0} file was found in '{1}', but '{2}' was not.</value>
    <comment>0 - file extension (either .props or .targets)
1 - directory that the file falls under
2 - correct file path </comment>
  </data>
  <data name="DefaultSpecValueWarning" xml:space="preserve">
    <value>The value "{0}" for {1} is a sample value and should be removed. Replace it with an appropriate value or remove it and rebuild your package.</value>
  </data>
  <data name="DependenciesGroupsForEachTFMBeginningToFiles" xml:space="preserve">
    <value>- Add lib or ref assemblies for the</value>
  </data>
  <data name="DependenciesGroupsForEachTFMBeginningToNuspec" xml:space="preserve">
    <value>- Add a dependency group for</value>
    <comment>Do not localize `dependencies`</comment>
  </data>
  <data name="DependenciesGroupsForEachTFMEndingToFile" xml:space="preserve">
    <value>target framework</value>
  </data>
  <data name="DependenciesGroupsForEachTFMEndingToNuspec" xml:space="preserve">
    <value>to the nuspec</value>
  </data>
  <data name="DependenciesGroupsForEachTFMHasCompatMatch" xml:space="preserve">
    <value>Some target frameworks declared in the dependencies group of the nuspec and the lib/ref folder have compatible matches, but not exact matches in the other location. Unless intentional, consult the list of actions below:</value>
    <comment>Do not localize `dependencies`</comment>
  </data>
  <data name="DependenciesGroupsForEachTFMHasNoExactMatch" xml:space="preserve">
    <value>Some target frameworks declared in the dependencies group of the nuspec and the lib/ref folder do not have exact matches in the other location. Consult the list of actions below:</value>
    <comment>Do not localize `dependencies`</comment>
  </data>
  <data name="FilePathTooLongWarning" xml:space="preserve">
    <value>The file '{0}' path, name, or both are too long. Your package might not work without long file path support. Please shorten the file path or file name.</value>
  </data>
  <data name="IconUrlDeprecationWarning" xml:space="preserve">
    <value>The 'PackageIconUrl'/'iconUrl' element is deprecated. Consider using the 'PackageIcon'/'icon' element instead. Learn more at https://aka.ms/deprecateIconUrl</value>
  </data>
  <data name="InvalidFrameworkWarning" xml:space="preserve">
    <value>The folder '{0}' under 'lib' is not recognized as a valid framework name or a supported culture identifier. Rename it to a valid framework name or culture identifier.</value>
  </data>
  <data name="InvalidPlaceholderFileWarning" xml:space="preserve">
    <value>The file at '{0}' uses the symbol for empty directory '_._', but it is present in a directory that contains other files. Please remove this file from directories that contain other files.</value>
    <comment>0 - file path ending in _._</comment>
  </data>
  <data name="InvalidPrereleaseDependencyWarning" xml:space="preserve">
    <value>A stable release of a package should not have a prerelease dependency. Either modify the version spec of dependency "{0}" or update the version field in the nuspec.</value>
  </data>
  <data name="InvalidUndottedFrameworkInDependencyGroupsWarning" xml:space="preserve">
    <value>The following dependency group(s) require(s) dots in the framework version: {0}</value>
    <comment>0 - comma-separated list of target frameworks</comment>
  </data>
  <data name="InvalidUndottedFrameworkInFilesWarning" xml:space="preserve">
    <value>The following packaged file folder(s) require(s) dots in the framework version: {0}</value>
    <comment>0 - comma-separated list of paths</comment>
  </data>
  <data name="InvalidUndottedFrameworkInFrameworkAssemblyGroupsWarning" xml:space="preserve">
    <value>The following framework assembly group(s) require(s) dots in the framework version: {0}</value>
    <comment>0 - comma-separated list of target frameworks</comment>
  </data>
  <data name="InvalidUndottedFrameworkInReferenceGroupsWarning" xml:space="preserve">
    <value>The following reference group(s) require(s) dots in the framework version: {0}</value>
    <comment>0 - comma-separated list of target frameworks</comment>
  </data>
  <data name="InvalidUndottedFrameworkWarning" xml:space="preserve">
    <value>One or more target framework specifiers in your package are missing required dots in their framework version numbers. This is required as of .NET5.0. Please rename them to include dots as needed (e.g. 'net50' to 'net5.0').</value>
  </data>
  <data name="LegacyVersionWarning" xml:space="preserve">
    <value>The package version '{0}' uses SemVer 2.0.0 or components of SemVer 1.0.0 that are not supported on legacy clients. Change the package version to a SemVer 1.0.0 string. If the version contains a release label it must start with a letter. This message can be ignored if the package is not intended for older clients.</value>
  </data>
  <data name="LicenseUrlDeprecationWarning" xml:space="preserve">
    <value>The 'licenseUrl' element will be deprecated. Consider using the 'license' element instead.</value>
    <comment>Please don't localize the items in the ''. license and licenseUrl</comment>
  </data>
  <data name="Migrator_AssemblyDirectlyUnderLibWarning" xml:space="preserve">
    <value>The assembly 'lib\{0}' will be ignored when the package is installed after the migration.</value>
  </data>
  <data name="Migrator_PackageHasContentFolder" xml:space="preserve">
    <value>'content' assets will not be available when the package is installed after the migration.</value>
  </data>
  <data name="Migrator_PackageHasInstallScript" xml:space="preserve">
    <value>install.ps1 script will be ignored when the package is installed after the migration.</value>
  </data>
  <data name="Migrator_XdtTransformInPackage" xml:space="preserve">
    <value>XDT transform file '{0}' will not be applied when the package is installed after the migration.</value>
  </data>
  <data name="MisplacedInitScriptWarning" xml:space="preserve">
    <value>The file '{0}' will be ignored by NuGet because it is not directly under 'tools' folder. Place the file directly under 'tools' folder.</value>
  </data>
  <data name="MisplacedTransformFileWarning" xml:space="preserve">
    <value>The transform file '{0}' is outside the 'content' folder and hence will not be transformed during installation of this package. Move it into the 'content' folder.</value>
  </data>
  <data name="NoRefOrLibFolderInPackage" xml:space="preserve">
    <value>This package does not contain a lib/ or ref/ folder, and will therefore be treated as compatible for all frameworks. Since framework specific files were found under the build/ directory for {0}, consider creating the following empty files to correctly narrow the compatibility of the package:
{1}</value>
  </data>
  <data name="PlaceholderFileInPackageWarning" xml:space="preserve">
    <value>An empty folder placeholder file '{0}' is in a non-empty folder and should be removed.</value>
  </data>
  <data name="ReferencesInNuspecAndRefFilesDontMatchWarning" xml:space="preserve">
    <value>References were found in the nuspec, but some reference assemblies were not found in both the nuspec and ref folder. Add the following reference assemblies:</value>
  </data>
  <data name="ReferencesInNuspecAndRefFilesDontMatchWarningAddToNuspecListItemFormat" xml:space="preserve">
    <value>- Add {0} to the {1} reference group in the nuspec</value>
  </data>
  <data name="ReferencesInNuspecAndRefFilesDontMatchWarningAddToNuspecNoTfmListItemFormat" xml:space="preserve">
    <value>- Add {0} to the references element in the nuspec</value>
  </data>
  <data name="ReferencesInNuspecAndRefFilesDontMatchWarningAddToRefListItemFormat" xml:space="preserve">
    <value>- Add {0} to the ref/{1}/ directory</value>
  </data>
  <data name="ScriptOutsideToolsWarning" xml:space="preserve">
    <value>The script file '{0}' is outside the 'tools' folder and hence will not be executed during installation of this package. Move it into the 'tools' folder.</value>
  </data>
  <data name="UnrecognizedLicenseIdentifier" xml:space="preserve">
    <value>The license identifier '{0}' is not recognized by the current toolset.</value>
  </data>
  <data name="UnrecognizedScriptWarning" xml:space="preserve">
    <value>The script file '{0}' is not recognized by NuGet and hence will not be executed during installation of this package. Rename it to install.ps1, uninstall.ps1 or init.ps1 and place it directly under 'tools'.</value>
  </data>
  <data name="UnspecifiedDependencyVersionWarning" xml:space="preserve">
    <value>The version of dependency '{0}' is not specified. Specify the version of dependency and rebuild your package.</value>
  </data>
  <data name="WinRTObsoleteWarning" xml:space="preserve">
    <value>The file at '{0}' uses the obsolete 'WinRT' as the framework folder. Replace 'WinRT' or 'WinRT45' with 'NetCore45'.</value>
  </data>
</root>