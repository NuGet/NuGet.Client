// <auto-generated />
namespace NuGet.Packaging
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("NuGet.Packaging.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// There are duplicate packages: {0}
        /// </summary>
        internal static string ErrorDuplicatePackages
        {
            get { return GetString("ErrorDuplicatePackages"); }
        }

        /// <summary>
        /// There are duplicate packages: {0}
        /// </summary>
        internal static string FormatErrorDuplicatePackages(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ErrorDuplicatePackages"), p0);
        }

        /// <summary>
        /// Invalid allowedVersions for package id '{0}': '{1}'
        /// </summary>
        internal static string ErrorInvalidAllowedVersions
        {
            get { return GetString("ErrorInvalidAllowedVersions"); }
        }

        /// <summary>
        /// Invalid allowedVersions for package id '{0}': '{1}'
        /// </summary>
        internal static string FormatErrorInvalidAllowedVersions(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ErrorInvalidAllowedVersions"), p0, p1);
        }

        /// <summary>
        /// Invalid minClientVersion: '{0}'
        /// </summary>
        internal static string ErrorInvalidMinClientVersion
        {
            get { return GetString("ErrorInvalidMinClientVersion"); }
        }

        /// <summary>
        /// Invalid minClientVersion: '{0}'
        /// </summary>
        internal static string FormatErrorInvalidMinClientVersion(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ErrorInvalidMinClientVersion"), p0);
        }

        /// <summary>
        /// Invalid package version for package id '{0}': '{1}'
        /// </summary>
        internal static string ErrorInvalidPackageVersion
        {
            get { return GetString("ErrorInvalidPackageVersion"); }
        }

        /// <summary>
        /// Invalid package version for package id '{0}': '{1}'
        /// </summary>
        internal static string FormatErrorInvalidPackageVersion(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ErrorInvalidPackageVersion"), p0, p1);
        }

        /// <summary>
        /// Null or empty package id
        /// </summary>
        internal static string ErrorNullOrEmptyPackageId
        {
            get { return GetString("ErrorNullOrEmptyPackageId"); }
        }

        /// <summary>
        /// Null or empty package id
        /// </summary>
        internal static string FormatErrorNullOrEmptyPackageId()
        {
            return GetString("ErrorNullOrEmptyPackageId");
        }

        /// <summary>
        /// Installing {0} {1}.
        /// </summary>
        internal static string Log_InstallingPackage
        {
            get { return GetString("Log_InstallingPackage"); }
        }

        /// <summary>
        /// Installing {0} {1}.
        /// </summary>
        internal static string FormatLog_InstallingPackage(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Log_InstallingPackage"), p0, p1);
        }

        /// <summary>
        /// Fail to load packages.config as XML file. Please check it. 
        /// </summary>
        internal static string FailToLoadPackagesConfig
        {
            get { return GetString("FailToLoadPackagesConfig"); }
        }

        /// <summary>
        /// Fail to load packages.config as XML file. Please check it. 
        /// </summary>
        internal static string FormatFailToLoadPackagesConfig()
        {
            return GetString("FailToLoadPackagesConfig");
        }

        /// <summary>
        /// MinClientVersion already exists in packages.config
        /// </summary>
        internal static string MinClientVersionAlreadyExist
        {
            get { return GetString("MinClientVersionAlreadyExist"); }
        }

        /// <summary>
        /// MinClientVersion already exists in packages.config
        /// </summary>
        internal static string FormatMinClientVersionAlreadyExist()
        {
            return GetString("MinClientVersionAlreadyExist");
        }

        /// <summary>
        /// Nuspec file does not exist in package.
        /// </summary>
        internal static string MissingNuspec
        {
            get { return GetString("MissingNuspec"); }
        }

        /// <summary>
        /// Nuspec file does not exist in package.
        /// </summary>
        internal static string FormatMissingNuspec()
        {
            return GetString("MissingNuspec");
        }

        /// <summary>
        /// Package entry already exists in packages.config. Id: {0}
        /// </summary>
        internal static string PackageEntryAlreadyExist
        {
            get { return GetString("PackageEntryAlreadyExist"); }
        }

        /// <summary>
        /// Package entry already exists in packages.config. Id: {0}
        /// </summary>
        internal static string FormatPackageEntryAlreadyExist(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageEntryAlreadyExist"), p0);
        }

        /// <summary>
        /// Package entry does not exists in packages.config. Id: {0}, Version: {1}
        /// </summary>
        internal static string PackageEntryNotExist
        {
            get { return GetString("PackageEntryNotExist"); }
        }

        /// <summary>
        /// Package entry does not exists in packages.config. Id: {0}, Version: {1}
        /// </summary>
        internal static string FormatPackageEntryNotExist(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PackageEntryNotExist"), p0, p1);
        }

        /// <summary>
        /// Package stream should be seekable
        /// </summary>
        internal static string PackageStreamShouldBeSeekable
        {
            get { return GetString("PackageStreamShouldBeSeekable"); }
        }

        /// <summary>
        /// Package stream should be seekable
        /// </summary>
        internal static string FormatPackageStreamShouldBeSeekable()
        {
            return GetString("PackageStreamShouldBeSeekable");
        }

        /// <summary>
        /// String argument '{0}' cannot be null or empty
        /// </summary>
        internal static string StringCannotBeNullOrEmpty
        {
            get { return GetString("StringCannotBeNullOrEmpty"); }
        }

        /// <summary>
        /// String argument '{0}' cannot be null or empty
        /// </summary>
        internal static string FormatStringCannotBeNullOrEmpty(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("StringCannotBeNullOrEmpty"), p0);
        }

        /// <summary>
        /// An error occurred while updating packages.config. The file was closed before the entry could be added.
        /// </summary>
        internal static string UnableToAddEntry
        {
            get { return GetString("UnableToAddEntry"); }
        }

        /// <summary>
        /// An error occurred while updating packages.config. The file was closed before the entry could be added.
        /// </summary>
        internal static string FormatUnableToAddEntry()
        {
            return GetString("UnableToAddEntry");
        }

        /// <summary>
        /// Package contains multiple nuspec files.
        /// </summary>
        internal static string MultipleNuspecFiles
        {
            get { return GetString("MultipleNuspecFiles"); }
        }

        /// <summary>
        /// Package contains multiple nuspec files.
        /// </summary>
        internal static string FormatMultipleNuspecFiles()
        {
            return GetString("MultipleNuspecFiles");
        }

        /// <summary>
        /// The nuspec contains an invalid '{0}' entry.
        /// </summary>
        internal static string InvalidNuspecEntry
        {
            get { return GetString("InvalidNuspecEntry"); }
        }

        /// <summary>
        /// The nuspec contains an invalid '{0}' entry.
        /// </summary>
        internal static string FormatInvalidNuspecEntry(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidNuspecEntry"), p0, p1);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
