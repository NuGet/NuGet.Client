<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionExecutor_RollingBack" xml:space="preserve">
    <value>Install failed. Rolling back...</value>
  </data>
  <data name="ActionResolver_UnsupportedAction" xml:space="preserve">
    <value>Unrecognized Package Action '{0}'.</value>
  </data>
  <data name="ActionResolver_UnsupportedDependencyBehavior" xml:space="preserve">
    <value>Unsupported Dependency Behavior '{0}'.</value>
  </data>
  <data name="ArgumentCannotBeNullOrEmpty" xml:space="preserve">
    <value>Argument cannot be null or empty.</value>
  </data>
  <data name="DefaultSymbolServer" xml:space="preserve">
    <value>the symbol server</value>
  </data>
  <data name="DeleteCommandCanceled" xml:space="preserve">
    <value>Delete canceled</value>
  </data>
  <data name="DeleteCommandConfirm" xml:space="preserve">
    <value>{0} {1} will be deleted from the {2}. Would you like to continue?</value>
  </data>
  <data name="DeleteCommandDeletedPackage" xml:space="preserve">
    <value>{0} {1} was deleted successfully.</value>
  </data>
  <data name="DeleteCommandDeletingPackage" xml:space="preserve">
    <value>Deleting {0} {1} from the {2}.</value>
  </data>
  <data name="DownloadActionHandler_InvalidDownloadUrl" xml:space="preserve">
    <value>The download URL for {0} '{1}' is invalid.</value>
  </data>
  <data name="DownloadActionHandler_NoDownloadUrl" xml:space="preserve">
    <value>No download URL could be found for {0}.</value>
  </data>
  <data name="Http_Timeout" xml:space="preserve">
    <value>The HTTP request to '{0} {1}' has timed out after {2}ms.</value>
    <comment>Parameters in order: non-localizable HTTP method, non-localizable HTTP request URI, timeout duration in milliseconds.
The "ms" should be localized to the abbreviation for milliseconds.</comment>
  </data>
  <data name="InvalidVersionFolder" xml:space="preserve">
    <value>The folder '{0}' contains an invalid version.</value>
  </data>
  <data name="Log_CanceledNupkgDownload" xml:space="preserve">
    <value>Downloading a package from '{0}' was canceled.</value>
  </data>
  <data name="Log_ErrorDownloading" xml:space="preserve">
    <value>Error downloading '{0}' from '{1}'.</value>
  </data>
  <data name="Log_FailedToDownloadPackage" xml:space="preserve">
    <value>Failed to download package from '{0}'.</value>
  </data>
  <data name="Log_FailedToGetNupkgStream" xml:space="preserve">
    <value>Unable to load package '{0}'.</value>
  </data>
  <data name="Log_FailedToGetNuspecStream" xml:space="preserve">
    <value>Unable to load nuspec from package '{0}'.</value>
  </data>
  <data name="Log_FailedToRetrievePackage" xml:space="preserve">
    <value>Failed to retrieve information from remote source '{0}'.</value>
  </data>
  <data name="Log_FileIsCorrupt" xml:space="preserve">
    <value>The file '{0}' is corrupt.</value>
  </data>
  <data name="Log_RetryingFindPackagesById" xml:space="preserve">
    <value>Retrying '{0}' for source '{1}'.</value>
  </data>
  <data name="NoApiKeyFound" xml:space="preserve">
    <value>No API Key was provided and no API Key could be found for {0}. To save an API Key for a source use the 'setApiKey' command.</value>
  </data>
  <data name="NuGetRepository_CannotCreateAggregateRepo" xml:space="preserve">
    <value>Cannot create a NuGet Repository from the Aggregate Source</value>
  </data>
  <data name="NuGetServiceProvider_ServiceNotSupported" xml:space="preserve">
    <value>The {0} service is not supported by this object.</value>
  </data>
  <data name="OneOrMoreUrisMustBeSpecified" xml:space="preserve">
    <value>One or more URIs must be specified.</value>
  </data>
  <data name="PackageActionDescriptionWrapper_UnrecognizedAction" xml:space="preserve">
    <value>Unrecognized Package Action '{0}'.</value>
  </data>
  <data name="ProjectInstallationTarget_ProjectIsNotTargetted" xml:space="preserve">
    <value>The project '{0}' is not one of the projects targetted by this object.</value>
  </data>
  <data name="Protocol_BadSource" xml:space="preserve">
    <value>Failed to retrieve metadata from source '{0}'.</value>
  </data>
  <data name="Protocol_IndexMissingResourcesNode" xml:space="preserve">
    <value>Service index document is missing the 'resources' property.</value>
  </data>
  <data name="Protocol_MalformedMetadataError" xml:space="preserve">
    <value>Metadata could not be loaded from the source '{0}'.</value>
  </data>
  <data name="Protocol_MissingRegistrationBase" xml:space="preserve">
    <value>The source does not have a Registration Base Url defined!</value>
  </data>
  <data name="Protocol_MissingSearchService" xml:space="preserve">
    <value>The source does not have a Search service!</value>
  </data>
  <data name="Protocol_MissingVersion" xml:space="preserve">
    <value>The source does not have the 'version' property.</value>
  </data>
  <data name="Protocol_PackageMetadataError" xml:space="preserve">
    <value>An error occurred while retrieving package metadata for '{0}' from source '{1}'.</value>
  </data>
  <data name="Protocol_UnsupportedVersion" xml:space="preserve">
    <value>The source version is not supported: '{0}'.</value>
  </data>
  <data name="PushCommandPackagePushed" xml:space="preserve">
    <value>Your package was pushed.</value>
  </data>
  <data name="PushCommandPushingPackage" xml:space="preserve">
    <value>Pushing {0} to {1}...</value>
  </data>
  <data name="PackageServerEndpoint_NotSupported" xml:space="preserve">
    <value>ERROR: This version of nuget.exe does not support updating packages to package source '{0}'.</value>
  </data>
  <data name="RequiredFeatureUnsupportedException_DefaultMessageWithFeature" xml:space="preserve">
    <value>The '{0}' installation feature was required by a package but is not supported on the current host.</value>
  </data>
  <data name="RequiredFeatureUnsupportedException_DefaultMessageWithoutFeature" xml:space="preserve">
    <value>The installation host does not support a feature required by this package.</value>
  </data>
  <data name="UnableToFindFile" xml:space="preserve">
    <value>File does not exist ({0}).</value>
  </data>
  <data name="Warning_SymbolServerNotConfigured" xml:space="preserve">
    <value>Found symbols package '{0}', but no API key was specified for the symbol server. To save an API Key, run 'NuGet.exe setApiKey [your API key from http://www.NuGet.org]'.</value>
  </data>
  <data name="LiveFeed" xml:space="preserve">
    <value>the NuGet gallery</value>
  </data>
  <data name="Log_InvalidCacheEntry" xml:space="preserve">
    <value>An invalid cache entry was found for URL '{0}' and will be replaced.</value>
  </data>
  <data name="Protocol_FlatContainerIndexVersionsNotArray" xml:space="preserve">
    <value>The 'versions' property at '{0}' must be an array.</value>
  </data>
  <data name="Protocol_InvalidJsonObject" xml:space="preserve">
    <value>The content at '{0}' is not a valid JSON object.</value>
  </data>
  <data name="Log_InvalidNupkgFromUrl" xml:space="preserve">
    <value>The nupkg at '{0}' is not valid.</value>
  </data>
  <data name="Log_FailedToReadServiceIndex" xml:space="preserve">
    <value>Unable to load the service index for source {0}.</value>
  </data>
  <data name="Log_RetryingServiceIndex" xml:space="preserve">
    <value>Retrying service index request for source '{0}'.</value>
  </data>
  <data name="Protocol_InvalidServiceIndex" xml:space="preserve">
    <value>The source does not have the 'version' property at '{0}'.</value>
  </data>
  <data name="Protocol_InvalidXml" xml:space="preserve">
    <value>The content at '{0}' is not valid XML.</value>
  </data>
  <data name="AddPackage_ExistingPackageInvalid" xml:space="preserve">
    <value>Package '{0}' already exists at feed '{1}' and is invalid.</value>
  </data>
  <data name="AddPackage_PackageAlreadyExists" xml:space="preserve">
    <value>Package '{0}' already exists at feed '{1}'.</value>
  </data>
  <data name="AddPackage_SuccessfullyAdded" xml:space="preserve">
    <value>Successfully added package '{0}' to feed '{1}'.</value>
  </data>
  <data name="Argument_Cannot_Be_Null_Or_Empty" xml:space="preserve">
    <value>Argument can not be null or empty.</value>
  </data>
  <data name="DeletePackage_NotFound" xml:space="preserve">
    <value>Not Found.</value>
  </data>
  <data name="NupkgPath_Invalid" xml:space="preserve">
    <value>'{0}' is not a valid nupkg file.</value>
  </data>
  <data name="Path_Invalid" xml:space="preserve">
    <value>'{0}' is not a valid path.</value>
  </data>
  <data name="Path_Invalid_NotFileNotUnc" xml:space="preserve">
    <value>'{0}' should be a local path or a UNC share path.</value>
  </data>
  <data name="Http_RequestLog" xml:space="preserve">
    <value>{0} {1}</value>
    <comment>Parameters in order: non-localizable HTTP method, non-localizable HTTP request URI</comment>
  </data>
  <data name="Http_ResponseLog" xml:space="preserve">
    <value>{0} {1} {2}ms</value>
    <comment>Parameters in order: non-localizable HTTP status, non-localizable HTTP request URI, request duration in milliseconds.
The "ms" should be localized to the abbreviation for milliseconds.</comment>
  </data>
  <data name="Log_FailedToFetchFeed" xml:space="preserve">
    <value>The feed at '{0}' returned an unexpected status code '{1} {2}'.</value>
    <comment>{0} is the URL that failed.
{1} is the HTTP status code (an integer).
{2} is the HTTP reason phrase (a non-translated string).</comment>
  </data>
  <data name="Log_RetryingHttp" xml:space="preserve">
    <value>An error was encountered when fetching '{0} {1}'. The request will now be retried.</value>
    <comment>'{0}' is replaced with the HTTP method used.
'{1}' is replaced with the URL that failed to be reached.</comment>
  </data>
  <data name="Error_DownloadTimeout" xml:space="preserve">
    <value>The download of '{0}' timed out because no data was received for {1}ms.</value>
    <comment>'{0}' is replaced with the resource that could not be downloaded.
'{1}' is replaced with the integer (in milliseconds) of the timeout duration.</comment>
  </data>
</root>