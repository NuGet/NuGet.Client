<!--
***********************************************************************************************
NuGet.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved.
***********************************************************************************************

  This target file contains the NuGet Restore target for walking the project and reference graph
  and restoring dependencies from the graph.

  Ways to use this targets file:
  1. Invoke it directly and provide project file paths using $(RestoreGraphProjectInput).
  2. With a solution this may be used as a target in the metaproj.
  3. Import the targets file from a project.

  Restore flow summary:
  1. Top level projects (entry points) are determined.
  2. Each project and all of its project references are walked recursively.
  3. The project is evaluated for each $(TargetFramework). Items are created 
     for project properties and dependencies. Each item is marked
     with the project it came from so that it can be matched up later.
  4. All restore items generated by the walk are grouped together by 
     project and convert into a project spec.

  The result file contains:
  1. A list of projects to restore.
  2. The complete closure of all projects referenced (Includes project references that are not being restored directly).
  3. Package and project dependencies for each project.
  4. DotnetCliTool references
  -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- Mark that this target file has been loaded.  -->
    <IsRestoreTargetsFileLoaded>true</IsRestoreTargetsFileLoaded>
    <!-- Load NuGet.Build.Tasks.dll, this can be overridden to use a different version with $(RestoreTaskAssemblyFile) -->
    <RestoreTaskAssemblyFile Condition=" '$(RestoreTaskAssemblyFile)' == '' ">NuGet.Build.Tasks.dll</RestoreTaskAssemblyFile>
    <!-- Recurse by default -->
    <RestoreRecursive Condition=" '$(RestoreRecursive)' == '' ">true</RestoreRecursive>
  </PropertyGroup>

  <!-- Tasks -->
  <UsingTask TaskName="NuGet.Build.Tasks.RestoreTask" AssemblyFile="$(RestoreTaskAssemblyFile)" />
  <UsingTask TaskName="NuGet.Build.Tasks.WriteRestoreGraphTask" AssemblyFile="$(RestoreTaskAssemblyFile)" />
  <UsingTask TaskName="NuGet.Build.Tasks.GetRestoreProjectJsonPathTask" AssemblyFile="$(RestoreTaskAssemblyFile)" />
  <UsingTask TaskName="NuGet.Build.Tasks.GetRestoreProjectReferencesTask" AssemblyFile="$(RestoreTaskAssemblyFile)" />
  <UsingTask TaskName="NuGet.Build.Tasks.GetRestorePackageReferencesTask" AssemblyFile="$(RestoreTaskAssemblyFile)" />
  <UsingTask TaskName="NuGet.Build.Tasks.GetRestoreDotnetCliToolsTask" AssemblyFile="$(RestoreTaskAssemblyFile)" />

  <!--
    ============================================================
    Restore
    Main entry point for restoring packages
    ============================================================
  -->
  <Target Name="Restore" DependsOnTargets="_GenerateRestoreGraph">

    <!-- Drop any duplicate items -->
    <RemoveDuplicates
      Inputs="@(_RestoreGraphEntry)">
      <Output
          TaskParameter="Filtered"
          ItemName="_RestoreGraphEntryFiltered" />
    </RemoveDuplicates>

    <!-- Call restore -->
    <RestoreTask
      RestoreGraphItems="@(_RestoreGraphEntryFiltered)"
      RestoreSources="$(RestoreSources)"
      RestorePackagesPath="$(RestorePackagesPath)"
      RestoreDisableParallel="$(RestoreDisableParallel)"
      RestoreConfigFile="$(RestoreConfigFile)"
      RestoreNoCache="$(RestoreNoCache)"
      RestoreIgnoreFailedSources="$(RestoreIgnoreFailedSources)"
      RestoreRecursive="$(RestoreRecursive)" />
  </Target>

  <!--
    ============================================================
    GenerateRestoreGraphFile
    Writes the output of _GenerateRestoreGraph to disk
    ============================================================
  -->
  <Target Name="GenerateRestoreGraphFile" DependsOnTargets="_GenerateRestoreGraph">
    <!-- Validate  -->
    <Error Condition="$(RestoreGraphOutputPath) == ''" Text="Missing RestoreGraphOutputPath property!" />

    <!-- Drop any duplicate items -->
    <RemoveDuplicates
        Inputs="@(_RestoreGraphEntry)">
      <Output
          TaskParameter="Filtered"
          ItemName="_RestoreGraphEntryFiltered" />
    </RemoveDuplicates>

    <!-- Write file -->
    <WriteRestoreGraphTask
      RestoreGraphItems="@(_RestoreGraphEntryFiltered)"
      RestoreGraphOutputPath="$(RestoreGraphOutputPath)"
      RestoreRecursive="$(RestoreRecursive)" />
  </Target>

  <!--
    ============================================================
    _LoadRestoreGraphEntryPoints
    Find project entry points and load them into items.
    ============================================================
  -->
  <Target Name="_LoadRestoreGraphEntryPoints">
    <!-- Allow overriding items with RestoreGraphProjectInput -->
    <ItemGroup Condition=" @(RestoreGraphProjectInputItems) == '' ">
      <RestoreGraphProjectInputItems Include="$(RestoreGraphProjectInput)" />
    </ItemGroup>

    <!-- Solution case -->
    <ItemGroup Condition=" $(MSBuildProjectFullPath.EndsWith('.metaproj')) == 'true' AND @(RestoreGraphProjectInputItems) == '' ">
      <RestoreGraphProjectInputItems Include="@(ProjectReference)" />
    </ItemGroup>

    <!-- Project case -->
    <ItemGroup Condition=" $(MSBuildProjectFullPath.EndsWith('.metaproj')) != 'true' AND @(RestoreGraphProjectInputItems) == '' ">
      <RestoreGraphProjectInputItems Include="$(MSBuildProjectFullPath)" />
    </ItemGroup>
  </Target>

  <!--
    ============================================================
    _GenerateRestoreGraph
    Entry point for creating the project to project restore graph.
    ============================================================
  -->
  <Target Name="_GenerateRestoreGraph" DependsOnTargets="_LoadRestoreGraphEntryPoints">
    <Message Text="Generating dg file" Importance="low" />
    <Message Text="%(RestoreGraphProjectInputItems.Identity)" Importance="low" />

    <!-- Generate a restore graph for each entry point project -->
    <PropertyGroup>
      <_GenerateRestoreGraphProjectEntryInputProperties>
        %(_MSBuildProjectReferenceExistent.SetConfiguration);
        %(_MSBuildProjectReferenceExistent.SetPlatform);
        RestoreUseCustomAfterTargets=$(RestoreUseCustomAfterTargets);
        NuGetRestoreTargets=$(MSBuildThisFileFullPath);
        BuildProjectReferences=false;
        ExcludeRestorePackageImports=true;
      </_GenerateRestoreGraphProjectEntryInputProperties>

      <!-- Standalone mode
        This is used by NuGet.exe or to directly override NuGet.targets with the current file.
        Override the ImportAfter targets with NuGetRestoreTargets if they exist.
        Set CustomAfterMicrosoftCommonCrossTargetingTargets and CustomAfterMicrosoftCommonTargets
        for both the inner and outer builds.
      -->
      <_GenerateRestoreGraphProjectEntryInputProperties Condition=" '$(RestoreUseCustomAfterTargets)' == 'true' ">
        $(_GenerateRestoreGraphProjectEntryInputProperties);
        CustomAfterMicrosoftCommonCrossTargetingTargets=$(MSBuildThisFileFullPath);
        CustomAfterMicrosoftCommonTargets=$(MSBuildThisFileFullPath);
      </_GenerateRestoreGraphProjectEntryInputProperties>
    </PropertyGroup>

    <!-- Using targets imported with ImportsAfter -->
    <MsBuild
        Projects="@(RestoreGraphProjectInputItems)"
        Targets="_GenerateRestoreGraphProjectEntry"
        BuildInParallel="false"
        Properties="$(_GenerateRestoreGraphProjectEntryInputProperties)"
        RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">
      <Output
          TaskParameter="TargetOutputs"
          ItemName="_RestoreGraphEntry" />
    </MsBuild>
  </Target>

  <!--
    ============================================================
    _GenerateRestoreGraphProjectEntry
    Top level entry point within a project.
    ============================================================
  -->
  <Target Name="_GenerateRestoreGraphProjectEntry"
          DependsOnTargets="_GenerateRestoreSpecs;_GenerateDotnetCliToolReferenceSpecs;_GenerateRestoreGraphWalk"
          Returns="@(_RestoreGraphEntry)">
    <!-- Returns restore graph entries for the project and all dependencies -->
  </Target>

  <!--
    ============================================================
    _GenerateRestoreSpecs
    Mark entry points for restore.
    ============================================================
  -->
  <Target Name="_GenerateRestoreSpecs"
      DependsOnTargets="_GetProjectRestoreType"
      Returns="@(_RestoreGraphEntry)">
    <Message Text="Restore entry point $(MSBuildProjectFullPath)" Importance="low" />

    <!-- Mark entry point -->
    <ItemGroup Condition=" '$(RestoreProjects)' == '' OR '$(RestoreProjects)' == 'true' ">
      <_RestoreGraphEntry Include="$([System.Guid]::NewGuid())" Condition=" '$(_ProjectRestoreType)' != 'Unknown' ">
        <Type>RestoreSpec</Type>
        <ProjectUniqueName>$(MSBuildProjectFullPath)</ProjectUniqueName>
      </_RestoreGraphEntry>
    </ItemGroup>
  </Target>

  <!--
    ============================================================
    _GenerateDotnetCliToolReferenceSpecs
    Collect DotnetCliToolReferences
    ============================================================
  -->
  <Target Name="_GenerateDotnetCliToolReferenceSpecs"
      Returns="@(_RestoreGraphEntry)">

    <PropertyGroup>
      <DotnetCliToolTargetFramework Condition=" '$(DotnetCliToolTargetFramework)' == '' ">netcoreapp1.0</DotnetCliToolTargetFramework>
    </PropertyGroup>

    <!-- Write out tool references -->
    <GetRestoreDotnetCliToolsTask
      Condition=" '$(RestoreDotnetCliToolReferences)' == '' OR '$(RestoreDotnetCliToolReferences)' == 'true' "
      ProjectPath="$(MSBuildProjectFullPath)"
      ToolFramework="$(DotnetCliToolTargetFramework)"
      DotnetCliToolReferences="@(DotnetCliToolReference)">

      <Output
        TaskParameter="RestoreGraphItems"
        ItemName="_RestoreGraphEntry" />
    </GetRestoreDotnetCliToolsTask>
  </Target>

  <!--
    ============================================================
    _GetProjectJsonPath
    Discover the project.json path if one exists for the project.
    ============================================================
  -->
  <Target Name="_GetProjectJsonPath"
    Returns="$(_CurrentProjectJsonPath)">
    <!-- Get project.json path -->
    <GetRestoreProjectJsonPathTask ProjectPath="$(MSBuildProjectFullPath)">
      <Output TaskParameter="ProjectJsonPath" PropertyName="_CurrentProjectJsonPath" />
    </GetRestoreProjectJsonPathTask>
  </Target>

  <!--
    ============================================================
    _GetProjectRestoreType
    Determine the project restore type.
    ============================================================
  -->
  <Target Name="_GetProjectRestoreType"
    DependsOnTargets="_GetProjectJsonPath"
    Returns="$(_ProjectRestoreType)">
    <!-- Check for project.json and NETCore properties -->
    <PropertyGroup>
      <_ProjectRestoreType>Unknown</_ProjectRestoreType>
      <_ProjectRestoreType Condition=" '$(_CurrentProjectJsonPath)' != '' ">UAP</_ProjectRestoreType>
      <_ProjectRestoreType Condition=" '$(TargetFrameworks)' != '' ">NETCore</_ProjectRestoreType>
      <_ProjectRestoreType Condition=" '$(TargetFramework)' != '' AND @(PackageReference) != '' ">NETCore</_ProjectRestoreType>
    </PropertyGroup>
  </Target>

  <!--
    ============================================================
    _GetRestoreTargetFrameworksOutput
    Get frameworks to be passed in as $(TargetFramework)
    ============================================================
  -->
  <Target Name="_GetRestoreTargetFrameworksOutput"
    DependsOnTargets="_GetProjectRestoreType"
    Returns="@(_RestoreTargetFrameworksOutputFiltered)">

    <!-- Loop on target frameworks, if no frameworks exist the targets below will
         run once using an empty framework string -->
    <ItemGroup Condition=" '$(_ProjectRestoreType)' == 'NETCore' AND '$(TargetFrameworks)' != '' ">
      <_RestoreTargetFrameworksOutput Include="$(TargetFrameworks.Split(';'))" />
    </ItemGroup>

    <!-- Use $(TargetFramework) if $(TargetFrameworks) is empty  -->
    <ItemGroup Condition=" '$(_ProjectRestoreType)' == 'NETCore' AND '$(TargetFrameworks)' == '' AND '$(TargetFramework)' != '' ">
      <_RestoreTargetFrameworksOutput Include="$(TargetFramework)" />
    </ItemGroup>

    <!-- Remove duplicate frameworks -->
    <RemoveDuplicates
      Inputs="@(_RestoreTargetFrameworksOutput)">
      <Output
          TaskParameter="Filtered"
          ItemName="_RestoreTargetFrameworksOutputFiltered" />
    </RemoveDuplicates>
  </Target>

  <!--
    ============================================================
    _GenerateRestoreProjectSpec
    Generate a restore project spec for the current project.
    ============================================================
  -->
  <Target Name="_GenerateRestoreProjectSpec"
    DependsOnTargets="_GetProjectRestoreType;_GetRestoreTargetFrameworksOutput"
    Returns="@(_RestoreGraphEntry)">

    <!-- Determine the restore output path -->
    <PropertyGroup Condition=" '$(_ProjectRestoreType)' == 'NETCore' ">
      <RestoreOutputPath Condition=" '$(RestoreOutputPath)' == '' " >$(BaseIntermediateOutputPath)</RestoreOutputPath>
    </PropertyGroup>

    <ConvertToAbsolutePath Paths="$(RestoreOutputPath)" Condition=" '$(_ProjectRestoreType)' == 'NETCore' ">
      <Output TaskParameter="AbsolutePaths" PropertyName="RestoreOutputAbsolutePath" />
    </ConvertToAbsolutePath>

    <!-- 
      Determine project name for the assets file.
      Highest priority: PackageId
      If PackageId does not exist use: AssemblyName
      If AssemblyName does not exist fallback to the project file name without the extension: $(MSBuildProjectName)

      For non-NETCore projects use only: $(MSBuildProjectName)
    -->
    <PropertyGroup>
      <_RestoreProjectName>$(MSBuildProjectName)</_RestoreProjectName>
      <_RestoreProjectName Condition=" '$(_ProjectRestoreType)' == 'NETCore' AND '$(AssemblyName)' != '' ">$(AssemblyName)</_RestoreProjectName>
      <_RestoreProjectName Condition=" '$(_ProjectRestoreType)' == 'NETCore' AND '$(PackageId)' != '' ">$(PackageId)</_RestoreProjectName>
    </PropertyGroup>

    <!-- Determine if this will use cross targeting -->
    <PropertyGroup Condition=" '$(_ProjectRestoreType)' == 'NETCore' AND '$(TargetFrameworks)' != '' ">
      <_RestoreCrossTargeting>true</_RestoreCrossTargeting>
    </PropertyGroup>

    <!-- Write properties for the top level entry point -->
    <ItemGroup Condition=" '$(_ProjectRestoreType)' == 'NETCore' ">
      <_RestoreGraphEntry Include="$([System.Guid]::NewGuid())">
        <Type>ProjectSpec</Type>
        <ProjectUniqueName>$(MSBuildProjectFullPath)</ProjectUniqueName>
        <ProjectPath>$(MSBuildProjectFullPath)</ProjectPath>
        <ProjectName>$(_RestoreProjectName)</ProjectName>
        <Sources>$(RestoreSources)</Sources>
        <FallbackFolders>$(RestoreFallbackFolders)</FallbackFolders>
        <PackagesPath>$(RestorePackagesPath)</PackagesPath>
        <FallbackFolders>$(RestoreFallbackFolders)</FallbackFolders>
        <OutputType>$(_ProjectRestoreType)</OutputType>
        <OutputPath>$(RestoreOutputAbsolutePath)</OutputPath>
        <TargetFrameworks>@(_RestoreTargetFrameworksOutputFiltered)</TargetFrameworks>
        <RuntimeIdentifiers>$(RuntimeIdentifiers);$(RuntimeIdentifier)</RuntimeIdentifiers>
        <RuntimeSupports>$(RuntimeSupports)</RuntimeSupports>
        <CrossTargeting>$(_RestoreCrossTargeting)</CrossTargeting>
        <RestoreLegacyPackagesDirectory>$(RestoreLegacyPackagesDirectory)</RestoreLegacyPackagesDirectory>
      </_RestoreGraphEntry>
    </ItemGroup>

    <!-- Use project.json -->
    <ItemGroup Condition=" '$(_ProjectRestoreType)' == 'UAP' ">
      <_RestoreGraphEntry Include="$([System.Guid]::NewGuid())">
        <Type>ProjectSpec</Type>
        <ProjectUniqueName>$(MSBuildProjectFullPath)</ProjectUniqueName>
        <ProjectPath>$(MSBuildProjectFullPath)</ProjectPath>
        <ProjectName>$(_RestoreProjectName)</ProjectName>
        <Sources>$(RestoreSources)</Sources>
        <FallbackFolders>$(RestoreFallbackFolders)</FallbackFolders>
        <PackagesPath>$(RestorePackagesPath)</PackagesPath>
        <FallbackFolders>$(RestoreFallbackFolders)</FallbackFolders>
        <ProjectJsonPath>$(_CurrentProjectJsonPath)</ProjectJsonPath>
        <OutputType>$(_ProjectRestoreType)</OutputType>
      </_RestoreGraphEntry>
    </ItemGroup>

    <!-- Non-NuGet type -->
    <ItemGroup Condition=" '$(_ProjectRestoreType)' == 'Unknown' ">
      <_RestoreGraphEntry Include="$([System.Guid]::NewGuid())">
        <Type>ProjectSpec</Type>
        <ProjectUniqueName>$(MSBuildProjectFullPath)</ProjectUniqueName>
        <ProjectPath>$(MSBuildProjectFullPath)</ProjectPath>
        <ProjectName>$(_RestoreProjectName)</ProjectName>
        <OutputType>$(_ProjectRestoreType)</OutputType>
        <TargetFrameworks>$(TargetFrameworkMoniker)</TargetFrameworks>
      </_RestoreGraphEntry>
    </ItemGroup>
  </Target>

  <!--
    ============================================================
    _GenerateRestoreDependencies
    Generate items for package and project references.
    ============================================================
  -->
  <Target Name="_GenerateRestoreDependencies"
    DependsOnTargets="_GetProjectRestoreType;_GetRestoreTargetFrameworksOutput"
    Returns="@(_RestoreGraphEntry)">

    <!-- Get project and package references  -->
    <!-- Evaluate for each framework -->
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="_GenerateRestoreGraphWalkPerFramework"
      Properties="TargetFramework=%(_RestoreTargetFrameworksOutputFiltered.Identity);
              %(_MSBuildProjectReferenceExistent.SetConfiguration);
              %(_MSBuildProjectReferenceExistent.SetPlatform);
              BuildProjectReferences=false;
              ExcludeRestorePackageImports=true;"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_RestoreGraphEntry" />
    </MSBuild>
  </Target>

  <!--
    ============================================================
    _GetAllRestoreProjectReferences
    Get all project references regardless of framework
    ============================================================
  -->
  <Target Name="_GetAllRestoreProjectReferences"
    DependsOnTargets="_GetProjectRestoreType;_GetRestoreTargetFrameworksOutput"
    Returns="@(RestoreGraphProjectFullPathForOutput)">

    <!-- Get complete set of project references  -->
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="_GenerateRestoreProjectReferencePaths"
      Properties="TargetFramework=%(_RestoreTargetFrameworksOutputFiltered.Identity);
              %(_MSBuildProjectReferenceExistent.SetConfiguration);
              %(_MSBuildProjectReferenceExistent.SetPlatform);
              RestoreUseCustomAfterTargets=$(RestoreUseCustomAfterTargets);
              NuGetRestoreTargets=$(MSBuildThisFileFullPath);
              BuildProjectReferences=false;
              ExcludeRestorePackageImports=true;"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="RestoreGraphProjectFullPathForOutput" />
    </MSBuild>
  </Target>

  <!--
    ============================================================
    _GetChildRestoreProjects
    Get all projects for restore.
    ============================================================
  -->
  <Target Name="_GetChildRestoreProjects"
    DependsOnTargets="_GetProjectRestoreType;_GetAllRestoreProjectReferences"
    Returns="@(_RestoreGraphEntry)">

    <!-- Recurse into referenced projects -->
    <MSBuild
      Projects="@(RestoreGraphProjectFullPathForOutput)"
      Targets="_GenerateRestoreGraphWalk"
      Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);
            %(_MSBuildProjectReferenceExistent.SetPlatform);
            RestoreUseCustomAfterTargets=$(RestoreUseCustomAfterTargets);
            NuGetRestoreTargets=$(MSBuildThisFileFullPath);
            BuildProjectReferences=false;
            ExcludeRestorePackageImports=true;"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_RestoreGraphEntry" />
    </MSBuild>
  </Target>

  <!--
    ============================================================
    _GenerateRestoreGraphWalk
    Recursively walk project to project references.
    ============================================================
  -->
  <Target Name="_GenerateRestoreGraphWalk"
      DependsOnTargets="
      _GetProjectRestoreType;
      _GetRestoreTargetFrameworksOutput;
      _GenerateRestoreProjectSpec;
      _GenerateRestoreDependencies;
      _GetChildRestoreProjects"
      Returns="@(_RestoreGraphEntry)">

    <!-- Output from dependency targets -->
  </Target>

  <!--
    ============================================================
    _GenerateRestoreGraphWalkPerFramework
    Walk dependencies using $(TargetFramework)
    ============================================================
  -->
  <Target Name="_GenerateRestoreGraphWalkPerFramework"
    DependsOnTargets="_GenerateRestoreProjectReferencePaths;_GetProjectRestoreType"
    Returns="@(_RestoreGraphEntry)">

    <!-- Write out project references -->
    <GetRestoreProjectReferencesTask
      ProjectUniqueName="$(MSBuildProjectFullPath)"
      ProjectReferences="@(RestoreGraphProjectFullPathForOutput)"
      TargetFrameworks="$(TargetFramework)">

      <Output
        TaskParameter="RestoreGraphItems"
        ItemName="_RestoreGraphEntry" />
    </GetRestoreProjectReferencesTask>

    <!-- Write out package references for NETCore -->
    <GetRestorePackageReferencesTask
      Condition=" '$(_ProjectRestoreType)' == 'NETCore' "
      ProjectUniqueName="$(MSBuildProjectFullPath)"
      PackageReferences="@(PackageReference)"
      TargetFrameworks="$(TargetFramework)">

      <Output
        TaskParameter="RestoreGraphItems"
        ItemName="_RestoreGraphEntry" />
    </GetRestorePackageReferencesTask>

    <!-- Write out target framework information -->
    <ItemGroup Condition="  '$(_ProjectRestoreType)' == 'NETCore' AND '$(PackageTargetFallback)' != '' ">
      <_RestoreGraphEntry Include="$([System.Guid]::NewGuid())">
        <Type>TargetFrameworkInformation</Type>
        <ProjectUniqueName>$(MSBuildProjectFullPath)</ProjectUniqueName>
        <PackageTargetFallback>$(PackageTargetFallback)</PackageTargetFallback>
        <TargetFramework>$(TargetFramework)</TargetFramework>
      </_RestoreGraphEntry>
    </ItemGroup>
  </Target>

  <!--
    ============================================================
    _GenerateRestoreProjectReferencePaths
    Get absolute paths for all project references.
    ============================================================
  -->
  <Target Name="_GenerateRestoreProjectReferencePaths"
    DependsOnTargets="_SplitProjectReferencesByFileExistence"
    Returns="@(RestoreGraphProjectFullPathForOutput)">

    <ItemGroup>
      <!-- Filter out project references that specify ReferenceOutputAssembly=false -->
      <ValidProjectInputForRestoreGraph Include="@(ProjectReference)"
          Condition=" '%(ProjectReference.ReferenceOutputAssembly)' == '' OR '%(ProjectReference.ReferenceOutputAssembly)' == 'true' " />
    </ItemGroup>

    <!-- Get the absolute paths to all projects -->
    <ConvertToAbsolutePath Paths="@(ValidProjectInputForRestoreGraph)">
      <Output TaskParameter="AbsolutePaths" PropertyName="RestoreGraphAbsoluteProjectPaths" />
    </ConvertToAbsolutePath>
    <ItemGroup>
      <RestoreGraphProjectFullPathForOutput Include="$(RestoreGraphAbsoluteProjectPaths)" />
    </ItemGroup>
  </Target>
</Project>