NuGet.PackageManagement.NuGetPackageManager.NuGetPackageManager(NuGet.Protocol.Core.Types.ISourceRepositoryProvider sourceRepositoryProvider, NuGet.Configuration.ISettings settings, NuGet.PackageManagement.ISolutionManager solutionManager, NuGet.PackageManagement.IDeleteOnRestartManager deleteOnRestartManager, NuGet.Commands.IRestoreProgressReporter reporter) -> void
NuGet.PackageManagement.NuGetPackageManager.NuGetPackageManager(NuGet.Protocol.Core.Types.ISourceRepositoryProvider sourceRepositoryProvider, NuGet.Configuration.ISettings settings, NuGet.PackageManagement.ISolutionManager solutionManager, NuGet.PackageManagement.IDeleteOnRestartManager deleteOnRestartManager, NuGet.Commands.IRestoreProgressReporter reporter, bool excludeVersion) -> void
const NuGet.ProjectManagement.ProjectBuildProperties.EnablePackageVersionOverride = "EnablePackageVersionOverride" -> string
const NuGet.ProjectManagement.ProjectItemProperties.VersionOverride = "VersionOverride" -> string
static NuGet.PackageManagement.DependencyGraphRestoreUtility.RestoreAsync(NuGet.ProjectModel.DependencyGraphSpec dgSpec, NuGet.ProjectManagement.DependencyGraphCacheContext context, NuGet.Commands.RestoreCommandProvidersCache providerCache, System.Action<NuGet.Protocol.Core.Types.SourceCacheContext> cacheContextModifier, System.Collections.Generic.IEnumerable<NuGet.Protocol.Core.Types.SourceRepository> sources, System.Guid parentId, bool forceRestore, bool isRestoreOriginalAction, System.Collections.Generic.IReadOnlyList<NuGet.ProjectModel.IAssetsLogMessage> additionalMessages, NuGet.Commands.IRestoreProgressReporter progressReporter, NuGet.Common.ILogger log, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<NuGet.Commands.RestoreSummary>>
