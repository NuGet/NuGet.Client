variables:
  DOTNET_NOLOGO: 1

stages:
- stage: Initialize
  jobs:
  - job: GetSemanticVersion
    displayName: Get NuGet.Client semantic version
    timeoutInMinutes: 10
    pool:
      vmImage: windows-latest
    steps:
    - template: Initialize_Build_SemanticVersion.yml

  - job: Initialize_Build
    dependsOn: GetSemanticVersion
    timeoutInMinutes: 10
    variables:
      SemanticVersion: $[dependencies.GetSemanticVersion.outputs['setsemanticversion.SemanticVersion']]
      BuildRevision: $[counter(format('{0}.{1}', variables['SemanticVersion'], variables['build.definitionname']), 1)]
    pool:
      vmImage: windows-latest
    steps:
    - template: Initialize_Build.yml

- stage: Build_Insertable
  displayName: Build NuGet inserted into VS and .NET SDK
  dependsOn: Initialize
  jobs:
  - job: Build_and_UnitTest_NonRTM
    timeoutInMinutes: 170
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      VsTargetChannel: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
      VsTargetMajorVersion: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
      LocalizedLanguageCount: "13"
      BuildRTM: "false"
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    steps:
    - template: Build_and_UnitTest.yml

- stage: Build_For_Publishing
  displayName: Build NuGet published to nuget.org
  dependsOn: Initialize
  jobs:
  - job: Build_and_UnitTest_RTM
    timeoutInMinutes: 170
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      VsTargetChannel: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
      VsTargetMajorVersion: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
      LocalizedLanguageCount: "13"
      BuildRTM: "true"
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    steps:
    - template: Build_and_UnitTest.yml

- stage: Source_Build
  dependsOn: Initialize
  jobs:
  - job: Build_Source_Build
    timeoutInMinutes: 120
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
      BuildRTM: "false"
    pool:
      vmImage: ubuntu-latest
    steps:
    - template: Source_Build.yml

- stage: CLI_Func_Tests
  dependsOn: Initialize
  jobs:
  - job: Functional_Tests_On_Windows
    timeoutInMinutes: 120
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    condition: "and(succeeded(),eq(variables['RunFunctionalTestsOnWindows'], 'true')) "
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    strategy:
      matrix:
        IsDesktop:
          SkipCoreAssemblies: "true"
        IsCore:
          SkipDesktopAssemblies: "true"
    steps:
    - template: Functional_Tests_On_Windows.yml

  - job: Tests_On_Linux
    timeoutInMinutes: 45
    variables:
      FULLVSTSBUILDNUMBER: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
      MSBUILDDISABLENODEREUSE: 1
    condition: "and(succeeded(), eq(variables['RunTestsOnLinux'], 'true'))"
    pool:
      vmImage: ubuntu-latest
    steps:
    - template: Tests_On_Linux.yml

  - job: CrossFramework_Tests_On_Windows
    timeoutInMinutes: 30
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    condition: "and(succeeded(),eq(variables['RunCrossFrameworkTestsOnWindows'], 'true')) "
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    steps:
    - template: CrossFramework_Tests_On_Windows.yml

- stage: MacTests
  dependsOn:
  - Initialize
  - Build_Insertable
  condition: "and(succeeded(), eq(variables['RunTestsOnMac'], 'true'))"
  jobs:
  - job: Tests_On_Mac
    timeoutInMinutes: 90
    variables:
      FULLVSTSBUILDNUMBER: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    pool:
      vmImage: macos-latest
    steps:
    - template: Tests_On_Mac.yml

- stage: EndToEnd
  dependsOn:
  - Initialize
  - Build_Insertable
  condition: "and(succeeded(), eq(variables['RunEndToEndTests'], 'true'))"
  jobs:
  - job: End_To_End_Tests_On_Windows
    timeoutInMinutes: 100
    variables:
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    pool:
      name: DDNuGet-Windows
      demands:
      - Allow_NuGet_E2E_Tests -equals true
    strategy:
      matrix:
        Part1:
          Part: "InstallPackageTest.ps1,UninstallPackageTest.ps1,UpdatePackageTest.ps1,PackageRestoreTest.ps1"
        Part2:
          Part: "A-TopDownloadedPackages.ps1,BuildIntegratedTest.ps1,ExecuteInitScriptTest.ps1,FindPackageTest.ps1,GetPackageTest.ps1,GetProjectTest.ps1,LegacyPackageRefProjectTest.ps1,NativeProjectTest.ps1,NetCoreProjectTest.ps1,PackTest.ps1,ProjectRetargeting.ps1,ServicesTest.ps1,Settings.ps1,SyncPackageTest.ps1,TabExpansionTest.ps1,UniversalWindowsProjectTest.ps1"
    steps:
    - template: End_To_End_Tests_On_Windows.yml

- stage: Apex
  dependsOn:
  - Initialize
  - Build_Insertable
  condition: "and(succeeded(), eq(variables['RunApexTests'], 'true'))"
  jobs:
  - job: Apex_Tests_On_Windows
    timeoutInMinutes: 150
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    pool:
      name: DDNuGet-Windows
      demands:
      - Allow_NuGet_Apex_Tests -equals true
    steps:
    - template: Apex_Tests_On_Windows.yml
