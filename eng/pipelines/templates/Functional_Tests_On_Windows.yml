steps:
- task: PowerShell@1
  displayName: "Print Environment Variables"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      Get-ChildItem Env: | Sort-Object Name | Format-Table -Wrap -AutoSize

- task: PowerShell@1
  displayName: "Download Config Files"
  enabled: "false"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      $url = $(VstsConfigFileRootUrl) -f 'NuGet.Core.FuncTests.Config'
      Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Core.FuncTests.Config
      $url = $(VstsConfigFileRootUrl) -f 'NuGet.Protocol.FuncTest.Config'
      Invoke-RestMethod -Method Get -Uri $url -UseDefaultCredentials -OutFile $(Build.Repository.LocalPath)\\NuGet.Protocol.FuncTest.Config

- task: PowerShell@1
  displayName: "Run Configure.ps1"
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
    arguments: "-Force -CleanCache"

- task: MSBuild@1
  displayName: "Restore"
  inputs:
    solution: "NuGet.sln"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/target:restore /property:BuildNumber=$(BuildNumber) /property:BuildRTM=false /binarylogger:$(Build.StagingDirectory)\\binlog\\01.Restore.binlog"

- task: ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'

- task: MSBuild@1
  displayName: "Build"
  inputs:
    solution: "NuGet.sln"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/restore:false /target:Build /property:BuildNumber=$(BuildNumber) /property:BuildRTM=false /binarylogger:$(Build.StagingDirectory)\\binlog\\02.Build.binlog"

- task: MSBuild@1
  displayName: "Run Functional Tests (continue on error)"
  continueOnError: "true"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/restore:false /target:CoreFuncTests /property:BuildRTM=false /property:BuildNumber=$(BuildNumber) /property:SkipDesktopAssemblies=$(SkipDesktopAssemblies) /property:SkipCoreAssemblies=$(SkipCoreAssemblies) /binarylogger:$(Build.StagingDirectory)\\binlog\\03.Test.binlog"
  condition: "and(succeeded(), eq(variables['IsOfficialBuild'], 'true'))"

- task: MSBuild@1
  displayName: "Run Functional Tests (stop on error)"
  continueOnError: "false"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/restore:false /target:CoreFuncTests /property:BuildRTM=false /property:BuildNumber=$(BuildNumber) /property:SkipDesktopAssemblies=$(SkipDesktopAssemblies) /property:SkipCoreAssemblies=$(SkipCoreAssemblies) /binarylogger:$(Build.StagingDirectory)\\binlog\\03.Test.binlog"
  condition: "and(succeeded(), not(eq(variables['IsOfficialBuild'], 'true')))"

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  continueOnError: "true"
  inputs:
    testRunner: "VSTest"
    testResultsFiles: "*.trx"
    searchFolder: "$(Build.Repository.LocalPath)\\build\\TestResults"
    testRunTitle: "NuGet.Client Functional Tests On Windows"
  condition: "succeededOrFailed()"

- task: PublishBuildArtifacts@1
  displayName: "Publish Test Freeze Dump"
  inputs:
    PathtoPublish: "$(Build.Repository.LocalPath)/build/TestResults"
    ArtifactName: "$(Agent.JobName)"
    ArtifactType: "Container"
  condition: "or(failed(), canceled())"

- task: PowerShell@1
  displayName: "Initialize Git Commit Status on GitHub"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
      SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -CommitSha $(Build.SourceVersion) -VstsPersonalAccessToken $(System.AccessToken) -TestName "$env:AGENT_JOBNAME"
  condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"

- task: PublishPipelineArtifact@1
  displayName: "Publish binlogs"
  inputs:
    artifactName: binlog - $(System.JobDisplayName) - Attempt $(System.JobAttempt)
    targetPath: $(Build.StagingDirectory)\binlog
  condition: " or(failed(), eq(variables['System.debug'], 'true')) "
