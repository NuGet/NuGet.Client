parameters:
  - name: isOfficialBuild
    type: boolean
    default: false

steps:
- task: PowerShell@1
  displayName: "Print Environment Variables"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      Get-ChildItem Env: | Sort-Object Name | Format-Table -Wrap -AutoSize

- task: CredScan@2
  inputs:
    toolMajorVersion: "V2"
  continueOnError: ${{ parameters.isOfficialBuild }}
  condition: succeededOrFailed()

- task: PowerShell@2
  displayName: "Analyze CredScan artifact"
  inputs:
    targetType: 'inline'
    script: |
      try {
        $credentialScannerMatches = Join-Path $(Pipeline.Workspace)\_sdt\logs\CredentialScanner CredentialScanner-matches.xml
        $credScannerXml = [xml](Get-Content $credentialScannerMatches)

        if($credScannerXml.DEFECTS -eq $null)
        {
          Write-Host "Unable to verify CodeAnalysisLogs artifact content, please manually verify it."
          exit 1
        }

        if ($credScannerXml.DEFECTS.DEFECT -ne $null) {
          Write-Host "CredentialScanner found following credential in this PR, please revoke this credential immediately:"
          $credScannerXml.DEFECTS.DEFECT
          exit 1
        }
      }
      catch
      {
        Write-Host "##vso[task.LogIssue type=error;]$Error[0]"
        exit 1
      }
  continueOnError: ${{ parameters.isOfficialBuild }}
  condition: succeededOrFailed()

- task: PowerShell@2
  displayName: "Ensure all projects are in NuGet.sln"
  inputs:
    targetType: 'inline'
    script: |
      try {
        $slnProjects = & dotnet sln list | Select-Object -Skip 2 | ForEach-Object { "$PWD\$_" } | sort
        "Solution contains $($slnProjects.Length) projects"
        $fsProjects = gci -Recurse -Filter *.csproj | ForEach-Object { $_.FullName } | Where-Object { $_ -notlike "*\EndToEnd\*" -and $_ -notlike "*\bin\*" -and $_ -notlike "*\compiler\resources\*" -and $_ -notlike "*\Assets\*" } | sort
        "Repo contains $($fsProjects.Length) projects"
        $diff = @(Compare-Object -ReferenceObject $fsProjects -DifferenceObject $slnProjects)
        $diff
        if ($diff.length -gt 0)
        {
          throw "Repo has project file(s) not in NuGet.sln"
        }
      }
      catch
      {
        Write-Host "##vso[task.LogIssue type=error;]$Error[0]"
        exit 1
      }
  continueOnError: ${{ parameters.isOfficialBuild }}
  condition: succeededOrFailed()

- task: ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'

- script: dotnet format whitespace --verify-no-changes NuGet.sln
  name: dotnetFormatWhitespace
  displayName: Check whitespace formatting
  continueOnError: ${{ parameters.isOfficialBuild }}
  condition: succeededOrFailed()

- task: PowerShell@2
  displayName: "Initialize Git Commit Status on GitHub"
  inputs:
    targetType: "inline"
    script: |
      . $(Build.Repository.LocalPath)/scripts/utils/PostGitCommitStatus.ps1
      SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(System.AccessToken) -CommitSha $(Build.SourceVersion) -TestName "Static Analysis"
    failOnStderr: "true"
  condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"
