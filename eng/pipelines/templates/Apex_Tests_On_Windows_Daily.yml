parameters:
  - name: dependsOn
    type: object
  - name: DartLabEnvironment
    type: string
  - name: condition
    type: string
  - name: testExecutionJobTimeoutInMinutes
    type: number
  - name: testMachineCleanUpStrategy
    type: string
    default: delete
    values:
      - delete
      - stop
  - name: isOfficialBuild
    type: boolean
    default: false

stages:
  - template: stages\visual-studio\build-to-build-upgrade\single-runsettings.yml@DartLabTemplates
    parameters:
      name: VS_Apex_Tests
      displayName: Apex Tests On Windows
      condition: ${{parameters.condition}}
      dependsOn: ${{parameters.dependsOn}}
      variables:
        - name: VsBootstrapperUrl
          value: $[dependencies.TestMachineConfiguration.outputs['SetBootstrapperURI.BootstrapperUrl']]
        - name: GitHubStatusName
          value: Daily Visual Studio Tests
        - name: RunSettingsURI
          value: $[dependencies.TestMachineConfiguration.outputs['SetRunSettingsURI.RunSettingsURI']]
        - name: VsBaseBuildDrop
          value: $[dependencies.TestMachineConfiguration.outputs['Setbasebuilddrop.BaseBuildDrop']]
      runSettingsURI: $(RunSettingsURI)
      visualStudioBootstrapperURI: $(VsBootstrapperUrl)  
      baseVisualStudioBootstrapperURI: https://vsdrop.corp.microsoft.com/file/v1/$(VisualStudio.BaseBuild.ProductsDropName);bootstrappers/Enterprise/vs_enterprise.exe
      candidateBaselineBuilds: $(BaselineBuildCommitIds)
      testLabPoolName: VS-Platform
      dartLabEnvironment: ${{parameters.DartLabEnvironment}}
      visualStudioSigning: Test
      testMachineConfigurationJobTimeoutInMinutes: 20
      testMachineDeploymentJobTimeoutInMinutes: 240
      testMachineConfigurationJobDisplayName: 'Apex Test Machine Configuration'
      testMachineDeploymentJobDisplayName: 'Apex Test Machine Deployment'
      testExecutionJobDisplayName: 'Apex Test Execution'
      testMachineCleanUpJobDisplayName: 'Apex Test Machine Clean Up'
      testRunContinueOnError: ${{ parameters.isOfficialBuild }}
      testExecutionJobTimeoutInMinutes: ${{parameters.testExecutionJobTimeoutInMinutes}}
      testMachineCleanUpStrategy: ${{parameters.testMachineCleanUpStrategy}}
      testAgentElevated: true
      preTestMachineConfigurationStepList: 
        - download: ComponentBuildUnderTest
          artifact: MicroBuildOutputs
          displayName: 'Download BootstrapperInfo.json'

        - task: PowerShell@2 
          displayName: 'Set BootstrapperURI variable'
          name: SetBootstrapperURI
          inputs:
            targetType: 'inline'
            script: |
              try {
              Write-Host "Set VSBranch, VsTargetChannel &  VsTargetMajorVersion variables"
              $bootstrapperInfoJsonFilePath = "$(Pipeline.Workspace)\ComponentBuildUnderTest\MicroBuildOutputs\BootstrapperInfo.json"

              Write-Host "BootstrapperInfo.json drop URI:  $bootstrapperInfoJsonFilePath"
              $bootstrapperInfoJson = (Get-Content $bootstrapperInfoJsonFilePath -Raw) | ConvertFrom-Json
              $bootstrapperUrl = $bootstrapperInfoJson.bootstrapperUrl

              Set-AzurePipelinesVariable 'VsBootstrapperUrl' $bootstrapperUrl
              Set-AzurePipelinesVariable -IsOutput 'BootstrapperUrl' $bootstrapperUrl
              }
              catch {
              Write-Host $_
              Write-Error "Failed to set VsBootstrapperUrl pipeline variables"
              throw
              }

        - task: PowerShell@2
          displayName: "Set CloudBuild Session ID variable for tests"
          name: "Setcloudbuildsessionid"
          continueOnError: true
          inputs:
            targetType: "inline"
            Script: |
              try {
                $json = Get-Content "$(Pipeline.Workspace)\ComponentBuildUnderTest\MicroBuildOutputs\Bootstrapperinfo.json" | ConvertFrom-Json
                $qBuildSessionId = $json[0].QBuildSessionId;
                Write-Host "CloudBuild Session ID: $qBuildSessionId"
                # Set-AzurePipelinesVariable 'QBuildSessionId' $qBuildSessionId
                # Set-AzurePipelinesVariable -IsOutput 'BuildSessionId' $qBuildSessionId
                Write-Host "##vso[task.setvariable variable=QBuildSessionId;isOutput=true]$qBuildSessionId"
              } catch {
              Write-Host "##vso[task.LogIssue type=error;]Unable to set CloudBuild Session ID: $_"
              }
        - powershell: |
            Write-Host $(setcloudbuildsessionid.QBuildSessionId)

        - task: PowerShell@2
          displayName: "Set Base Build Drop variable for tests"
          name: "Setbasebuilddrop"
          continueOnError: true
          inputs:
            targetType: "inline"
            Script: |
              try {
                $json = Get-Content "$(Pipeline.Workspace)\ComponentBuildUnderTest\MicroBuildOutputs\Bootstrapperinfo.json" | ConvertFrom-Json
                $buildDrop = $json[0].BuildDrop;
                Write-Host "Base Build Drop: $buildDrop"
                # Write-Host "##vso[task.setvariable variable=BaseBuildDrop;isOutput=true]$buildDrop"

                Set-AzurePipelinesVariable 'BaseBuildDrop' $buildDrop
                Set-AzurePipelinesVariable -IsOutput 'BaseBuildDrop' $buildDrop

              } catch {
              Write-Host "##vso[task.LogIssue type=error;]Unable to set Base Build Drop: $_"
              }

        - powershell: |
            Write-Host $(setbasebuilddrop.BaseBuildDrop)
            Write-Host "BaseBuildDrop: $(SetBootstrapperURI.BootstrapperUrl)"
            Write-Host "BaseBuildDropV: $(VsBootstrapperUrl)"
            Write-Host "VsBaseBuildDrop: $(VsBaseBuildDrop)"

        - template: \steps\powershell\execute-script.yml@DartLabTemplates
          parameters:
            displayName: Get Baseline Build ID using CloudBuild Session ID
            continueOnError: true
            filePath: $(DartLab.Path)\Scripts\AzureDevOps\Build\Get-BuildIdFromCloudBuildSessionID.ps1
            arguments: -ClientSecret (ConvertTo-SecureString '$(CloudBuild-ClientSecret)' -AsPlainText -Force) -ClientID '$(CloudBuild-ClientID)' -SessionID $(setcloudbuildsessionid.QBuildSessionId) -OutVariableName 'BaselineBuildID'
        
        - task: PowerShell@2
          displayName: "Get Baseline build commit ids"
          name: "Getbaselinebuildcommitids"
          retryCountOnTaskFailure: 3
          continueOnError: true
          inputs:
            targetType: 'inline'
            script: |
              try {
              Write-Host "Getting Baseline build commit ids for build: '$(BaselineBuildID)'"
              
              $artifactName = 'BuildArtifacts'
              $baselineBuildsFile = Join-Path $(Agent.TempDirectory) "BaselineBuilds.json"

              $artifact = Get-BuildArtifact -InstanceURL 'https://dev.azure.com/devdiv' -ProjectName 'DevDiv' -BuildID $(BaselineBuildID)  -ArtifactName $artifactName -OAuthAccessToken (ConvertTo-SecureString '$(System.AccessToken)' -AsPlainText -Force)
              $containerName = $artifact.Resource.Data -Split '/' | Select-Object -Last 1
              $fileName = Join-Path $containerName 'BaselineBuilds.json'
              $jsonString = Read-BuildArtifactFile -InstanceURL 'https://dev.azure.com/devdiv' -ProjectName 'DevDiv' -BuildID $(BaselineBuildID) -ArtifactName $artifactName -FileName $fileName -OAuthAccessToken (ConvertTo-SecureString '$(System.AccessToken)' -AsPlainText -Force)

              $jsonString | Out-File -FilePath $baselineBuildsFile

              $(DartLab.Path)\Scripts\VisualStudio\Build\Get-BaselineBuildCommitIDs.ps1 -BuildJson $baselineBuildsFile -OutVariableName "BaselineBuildCommitIds"
              } catch {
                Write-Host "Unable to get Baseline build commit ids: $_"
              }
        - task: PowerShell@2
          name: SetVisualStudioBaseBuildID
          displayName: Set 'VisualStudio.BaseBuild.ID' 
          retryCountOnTaskFailure: 3
          condition: ne(variables['BaselineBuildCommitIds'], '')
          continueOnError: true
          inputs:
            filePath: $(DartLab.Path)\Scripts\VisualStudio\Build\Get-BaselineBuildID.ps1
            arguments: -OAuthAccessToken (ConvertTo-SecureString '$(System.AccessToken)' -AsPlainText -Force) -InstanceURL '$(System.CollectionUri)' -RepositoryName 'VS' -ProjectName '$(System.TeamProject)' -CommitIDs $(BaselineBuildCommitIds) -BuildDefinitionIDs 10289 -OutVariableName 'VisualStudio.BaseBuild.ID'

        - task: PowerShell@2
          name: SetVisualStudioBaseBuildProductsDropName
          displayName: Set 'VisualStudio.BaseBuild.ProductsDropName'
          retryCountOnTaskFailure: 3
          condition: ne(variables['VisualStudio.BaseBuild.ID'], '')
          inputs:
            filePath: $(DartLab.Path)\Scripts\VisualStudio\Build\Get-VisualStudioDropName.ps1
            arguments: -AccessToken (ConvertTo-SecureString '$(System.AccessToken)' -AsPlainText -Force) -DropNamePrefix 'Products' -AccountURL '$(System.CollectionUri)' -ProjectName '$(System.TeamProject)' -BuildID $(VisualStudio.BaseBuild.ID) -OutVariableName 'VisualStudio.BaseBuild.ProductsDropName'

        - task: PowerShell@2
          name: SetBaseProductsDropNameToTarget
          displayName: Set 'VisualStudio.BaseBuild.ProductsDropName' to drop from target build
          retryCountOnTaskFailure: 3
          condition: eq(variables['VisualStudio.BaseBuild.ID'], '')
          inputs:
            targetType: 'inline'
            script: |
              $buildDrop = "$(VsBaseBuildDrop)" -split "/"
              $dropName = "Products/DevDiv/VS/$($buildDrop[-2])/$($buildDrop[-1])"
              Write-Host "BaseBuildDrop: $buildDrop"
              Write-Host "DropName: $dropName"
              Write-Host "##vso[task.setvariable variable=VisualStudio.BaseBuild.ProductsDropName]$dropName"

        - task: PowerShell@2
          displayName: 'Set RunSettingsURI variable'
          name: SetRunSettingsURI
          inputs:
            targetType: 'inline'
            script: |
              try {
                $branchName = "$(resources.pipeline.ComponentBuildUnderTest.sourceBranch)"
                $branchName = $branchName.Replace('refs/heads/', '')

                $RunSettingsURI = "https://vsdrop.corp.microsoft.com/file/v1/RunSettings/$(System.TeamProject)/NuGet-NuGet.Client-Trusted/$branchName/$(resources.pipeline.ComponentBuildUnderTest.runID);NuGet.Tests.Apex.runsettings"
                Write-Host "RunSettingsURI: $RunSettingsURI"
                Set-AzurePipelinesVariable 'RunSettingsURI' $RunSettingsURI
                Set-AzurePipelinesVariable -IsOutput 'RunSettingsURI' $RunSettingsURI
              }
              catch {
              Write-Host $_
              Write-Error "Failed to set RunSettingsURI pipeline variable"
              throw
              }

      preDeployAndRunTestsStepList:
        - task: PowerShell@1
          displayName: "Print Environment Variables"
          inputs:
            scriptType: "inlineScript"
            inlineScript: |
              Get-ChildItem Env: | Sort-Object Name | Format-Table -Wrap -AutoSize

        - task: DownloadBuildArtifacts@0
          displayName: "Download Build artifacts"
          inputs:
            buildType: specific
            project: $(resources.pipeline.ComponentBuildUnderTest.projectID)
            definition: $(resources.pipeline.ComponentBuildUnderTest.pipelineID)
            artifactName: "VS15"
            downloadPath: "$(Pipeline.Workspace)/artifacts"

        - powershell: |
            $zipPath = "$(Pipeline.Workspace)/artifacts/VS15/EndToEnd.zip"
            $dest = "$(System.DefaultWorkingDirectory)/artifacts/EndToEnd/"
            Write-Output "Extracting '$zipPath' to '$dest'"
            Expand-Archive -Path "$zipPath" -DestinationPath "$dest"
            $nugetExePath = "$(Pipeline.Workspace)/artifacts/VS15/NuGet.exe"
            Write-Output "Copying '$nugetExePath' to '$dest'"
            Copy-Item -Path "$nugetExePath" -Destination "$dest"
          displayName: "Extract EndToEnd.zip"

        - task: PowerShell@1
          displayName: "SetupFunctionalTests.ps1"
          inputs:
            scriptName: "$(System.DefaultWorkingDirectory)/artifacts/EndToEnd/scripts/SetupFunctionalTests.ps1"
      postDeployAndRunTestsStepList:
        # - task: PowerShell@1
        #   displayName: "Initialize Git Commit Status on GitHub"
        #   inputs:
        #     scriptType: "inlineScript"
        #     inlineScript: |
        #       . $(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\PostGitCommitStatus.ps1
        #       SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(System.AccessToken) -CommitSha $(Build.SourceVersion) -TestName "$(GitHubStatusName)"
        #   condition: "not(eq(variables['ManualGitHubChecks'], 'true'))"

        - task: ComponentGovernanceComponentDetection@0
          displayName: 'Component Detection'
