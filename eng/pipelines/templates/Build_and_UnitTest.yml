steps:
- task: PowerShell@1
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
    arguments: "-Force"
  displayName: "Run Configure.ps1"

- task: PowerShell@1
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\ConfigureVstsBuild.ps1"
    arguments: "-BuildRTM $(BuildRTM)"
  displayName: "Configure VSTS CI Environment"

- task: PublishBuildArtifacts@1
  displayName: 'Publish buildinfo.json as an artifact'
  inputs:
    ArtifactName: 'BuildInfo'
    ArtifactType: 'Container'
    PathToPublish: '$(Build.Repository.LocalPath)\artifacts\buildinfo.json'
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: PowerShell@1
  displayName: "Print Environment Variables"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      Get-ChildItem Env: | Sort-Object Name | Format-Table -Wrap -AutoSize

- task: MicroBuildLocalizationPlugin@1
  displayName: "Install Localization Plugin"

- task: MicroBuildSigningPlugin@1
  inputs:
    signType: "$(SigningType)"
    esrpSigning: "true"
  displayName: "Install Signing Plugin"

- task: MicroBuildSwixPlugin@1
  displayName: "Install Swix Plugin"

- task: MicroBuildOptProfPlugin@6
  displayName: 'OptProfV2:  install the plugin'
  inputs:
    getDropNameByDrop: true
    optimizationInputsDropNamePrefix: OptimizationInputs/$(System.TeamProject)/$(Build.Repository.Name)
    AccessToken: $(System.AccessToken)
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

# NuGet.Client's official repo is on github, hence the source link metadata should use the github URL.
# However, our official builds are built from a mirror in Azure DevOps, hence without any extra help, the SourceLink.GitHub package
# won't be able to determine the URL to embed in the pdbs.
# Therefore, we need to add the GitHub repo URL as a remote, and tell SourceLink.GitHub what that remote name is.
# We do this even when github is the origin URL, to avoid warnings in the CI logs.
- task: PowerShell@1
  displayName: "Prepare for source link"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      try {
        $nugetUrl = "https://github.com/NuGet/NuGet.Client.git"
        if (@(& git remote).Contains("github"))
        {
          $currentGitHubRemoteUrl = & git remote get-url github
          Write-Host "Current github remote URL: $currentGitHubRemoteUrl"
          if ($currentGitHubRemoteUrl -ne $nugetUrl)
          {
            Write-Host "git remote set-url github $nugetUrl"
            & git remote set-url github $nugetUrl
          }
          else
          {
            Write-Host "Git remote url already correct"
          }
        }
        else
        {
          Write-Host "git remote add github $nugetUrl"
          & git remote add github $nugetUrl
        }
      } catch {
        Write-Host "##vso[task.LogIssue type=error;]$Error[0]"
        exit 1
      }

- task: MSBuild@1
  displayName: "Restore for VS2019"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:RestoreVS /p:BuildNumber=$(BuildNumber) /p:BuildRTM=$(BuildRTM) /v:m /p:IncludeApex=true"
    maximumCpuCount: true

- task: MSBuild@1
  displayName: "Build for VS2019"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:BuildNoVSIX /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(BuildNumber) /p:SkipILMergeOfNuGetExe=true /p:GitRepositoryRemoteName=github /p:IncludeApex=true"
    maximumCpuCount: true

- task: MSBuild@1
  displayName: "Ensure msbuild.exe can parse nuget.sln"
  continueOnError: "false"
  inputs:
    solution: "nuget.sln"
    msbuildArguments: "/t:EnsureNewtonsoftJsonVersion"
    maximumCpuCount: true
  condition: "and(succeeded(), or(eq(variables['IsOfficialBuild'], 'true'), eq(variables['BuildRTM'], 'true')))"  #skip this task for nonRTM in private build

- task: MSBuild@1
  displayName: "Ensure package versions are declared in packages.targets"
  continueOnError: "false"
  inputs:
    solution: "build\\build.proj"
    msbuildArguments: "/t:EnsurePackageReferenceVersionsInSolution"
  condition: "and(succeeded(), or(eq(variables['IsOfficialBuild'], 'true'), eq(variables['BuildRTM'], 'true')))"  #skip this task for nonRTM in private build


- task: MSBuild@1
  displayName: "Localize Assemblies"
  inputs:
    solution: "build\\loc.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:AfterBuild"

- task: MSBuild@1
  displayName: "Build Final NuGet.exe (via ILMerge)"
  inputs:
    solution: "src\\NuGet.Clients\\NuGet.CommandLine\\NuGet.CommandLine.csproj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:ILMergeNuGetExe /p:ExpectedLocalizedArtifactCount=$(LocalizedLanguageCount)"

- task: MSBuild@1
  displayName: "Publish NuGet.exe (ILMerged) into NuGet.CommandLine.Test (Mac tests use this)"
  inputs:
    solution: "test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\NuGet.CommandLine.Test.csproj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:CopyFinalNuGetExeToOutputPath"
  condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

- task: MSBuild@1
  displayName: "Run unit tests (stop on error)"
  continueOnError: "false"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:CoreUnitTests;UnitTestsVS /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(BuildNumber) /p:TestResultOutputFormat=xml /p:SkipILMergeOfNuGetExe=true"
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'true'), not(eq(variables['IsOfficialBuild'], 'true')))"

- task: MSBuild@1
  displayName: "Run unit tests (continue on error)"
  continueOnError: "true"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:CoreUnitTests;UnitTestsVS /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(BuildNumber) /p:TestResultOutputFormat=xml /p:SkipILMergeOfNuGetExe=true"
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'true'), eq(variables['IsOfficialBuild'], 'true'))"

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  inputs:
    testRunner: "XUnit"
    testResultsFiles: "*.xml"
    testRunTitle: "NuGet.Client Unit Tests On Windows"
    searchFolder: "$(Build.Repository.LocalPath)\\build\\TestResults"
    mergeTestResults: "true"
    publishRunAttachments: "false"
  condition: "and(succeededOrFailed(),eq(variables['BuildRTM'], 'true'))"

- task: PowerShell@1
  displayName: "Initialize Git Commit Status on GitHub"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
      SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(System.AccessToken) -CommitSha $(Build.SourceVersion) -TestName "$env:AGENT_JOBNAME"
  condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"

- task: PublishBuildArtifacts@1
  displayName: "Publish NuGet.CommandLine.Test as artifact"
  inputs:
    PathtoPublish: "$(Build.Repository.LocalPath)\\test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\bin\\$(BuildConfiguration)\\net472"
    ArtifactName: "NuGet.CommandLine.Test"
    ArtifactType: "Container"
  condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

- task: MSBuild@1
  displayName: "Sign Assemblies"
  inputs:
    solution: "build\\sign.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:AfterBuild"
    maximumCpuCount: true

- task: MSBuild@1
  displayName: "Pack Nupkgs"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:Pack /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:BuildNumber=$(BuildNumber)"
    maximumCpuCount: true

- task: MSBuild@1
  displayName: "Ensure all Nupkgs and Symbols are created"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:EnsurePackagesExist /p:ExcludeTestProjects=$(BuildRTM)"

- task: MSBuild@1
  displayName: "Pack VSIX"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:BuildVSIX /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:IsCIBuild=true"
    maximumCpuCount: true
  condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

- task: MSBuild@1
  displayName: "Generate Build Tools package"
  inputs:
    solution: "setup/Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/p:BuildNumber=$(BuildNumber) /p:IsVsixBuild=true"
  condition: " and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: MSBuild@1
  displayName: "Sign Nupkgs and VSIX"
  inputs:
    solution: "build\\sign.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:AfterBuild /p:SignPackages=true"

- task: NuGetCommand@2
  displayName: "Verify Nupkg Signatures"
  inputs:
    command: "custom"
    arguments: "verify -Signatures $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)\\*.nupkg"

- task: MicroBuildCodesignVerify@3
  displayName: Verify Assembly Signatures and StrongName for the nupkgs
  inputs:
    TargetFolders: '$(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)'

- task: MicroBuildCodesignVerify@3
  displayName: Verify Assembly Signatures and StrongName for the VSIX & exes
  inputs:
    TargetFolders: '$(Build.Repository.LocalPath)\\artifacts\\VS15'
    ApprovalListPathForCerts: '$(Build.Repository.LocalPath)\\build\\ignorecodesign.csv'
    ApprovalListPathForSigs: '$(Build.Repository.LocalPath)\\build\\ignorecodesign.csv'

- task: ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

- task: PublishPipelineArtifact@1
  displayName: "Publish nupkgs"
  inputs:
    targetPath: "$(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)"
    artifactName: "nupkgs - $(RtmLabel)"
  condition: and(succeeded(), or(eq(variables['IsOfficialBuild'], 'true'), eq(variables['BuildRTM'], 'true')))  #skip this task for nonRTM in private build

- task: MSBuild@1
  displayName: "Generate VSMAN file for NuGet Core VSIX"
  inputs:
    solution: "setup\\Microsoft.VisualStudio.NuGet.Core.vsmanproj"
    configuration: "$(BuildConfiguration)"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

- task: MSBuild@1
  displayName: "Generate VSMAN file for Build Tools VSIX"
  inputs:
    solution: "setup\\Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
    configuration: "$(BuildConfiguration)"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

- task: PowerShell@1
  displayName: "Create EndToEnd Test Package"
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\CreateEndToEndTestPackage.ps1"
    arguments: "-c $(BuildConfiguration) -out $(Build.Repository.LocalPath)\\artifacts\\VS15"
    failOnStandardError: "true"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

- task: NuGetCommand@2
  displayName: 'Add the VSEng package source'
  inputs:
    command: 'custom'
    arguments: 'sources add -Name VS -Source $(VsPackageFeedUrl) -UserName $(VsPackageFeedUsername) -Password $(VsPackageFeedPassword) -ConfigFile $(System.DefaultWorkingDirectory)\NuGet.config'
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: NuGetCommand@2
  displayName: 'Install the NuGet package for building .runsettingsproj files'
  inputs:
    command: 'custom'
    arguments: 'install Microsoft.DevDiv.Validation.TestPlatform.Settings.Tasks -Version 1.0.655 -Source $(VsPackageFeedUrl) -ConfigFile $(System.DefaultWorkingDirectory)\NuGet.config -OutputDirectory $(System.DefaultWorkingDirectory)\packages'
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: MicroBuildBuildVSBootstrapper@2
  displayName: 'Build a Visual Studio bootstrapper'
  inputs:
    channelName: "$(VsTargetChannel)"
    vsMajorVersion: "$(VsTargetMajorVersion)"
    manifests: '$(Build.Repository.LocalPath)\artifacts\VS15\Microsoft.VisualStudio.NuGet.Core.vsman'
    outputFolder: '$(Build.Repository.LocalPath)\artifacts\VS15'
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: PublishBuildArtifacts@1
  displayName: 'Publish BootstrapperInfo.json as a build artifact'
  inputs:
    PathtoPublish: $(Build.StagingDirectory)\MicroBuild\Output
    ArtifactName: MicroBuildOutputs
    ArtifactType: Container
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: PowerShell@1
  displayName: "Set Bootstrapper URL variable"
  name: "vsbootstrapper"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      try {
        $json = Get-Content "${env:Build_StagingDirectory}\MicroBuild\Output\Bootstrapperinfo.json" | ConvertFrom-Json
        $bootstrapperUrl = $json[0].bootstrapperUrl;
        Write-Host "Bootstrapper URL: $bootstrapperUrl"
        Write-Host "##vso[task.setvariable variable=bootstrapperUrl;isOutput=true]$bootstrapperUrl"
      } catch {
        Write-Host "##vso[task.LogIssue type=error;]Unable to set bootstrapperUrl: $_"
        exit 1
      }
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: MSBuild@1
  displayName: 'Generate .runsettings files'
  inputs:
    solution: 'build\runsettings.proj'
    msbuildArguments: '/p:OutputPath="$(Build.Repository.LocalPath)\artifacts\RunSettings" /p:TestDrop="RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)" /p:ProfilingInputsDrop="ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)"'
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: PowerShell@1
  displayName: 'Copy VS integration test binaries'
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      try {
        Write-Output "Copying NuGet.OptProf binaries"
        Copy-Item test\NuGet.Tests.Apex\NuGet.OptProf\bin\$(BuildConfiguration) artifacts\RunSettings\NuGet.OptProf\ -Recurse -ErrorAction Stop
        Write-Output "Copying NuGet.Tests.Apex binaries"
        Copy-Item test\NuGet.Tests.Apex\NuGet.Tests.Apex\bin\$(BuildConfiguration) artifacts\RunSettings\NuGet.Tests.Apex\ -Recurse -ErrorAction Stop
      } catch {
        Write-Host "##vso[task.LogIssue type=error;]$_"
        exit 1
      }
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: artifactDropTask@0
  displayName: 'Publish the .runsettings files to artifact services'
  inputs:
    dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
    buildNumber: 'RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
    sourcePath: 'artifacts\RunSettings'
    toLowerCase: false
    usePat: true
    dropMetadataContainerName: 'DropMetadata-RunSettings'
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: artifactDropTask@0
  displayName: 'OptProfV2:  publish profiling inputs to artifact services'
  inputs:
    dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
    buildNumber: 'ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
    sourcePath: '$(Build.ArtifactStagingDirectory)\OptProf\ProfilingInputs'
    toLowerCase: false
    usePat: true
    dropMetadataContainerName: 'DropMetadata-ProfilingInputs'
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

- task: PublishBuildArtifacts@1
  displayName: "Publish NuGet.exe VSIX and EndToEnd.zip as artifact"
  inputs:
    PathtoPublish: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
    ArtifactName: "$(VsixPublishDir)"
    ArtifactType: "Container"

- task: PublishPipelineArtifact@1
  displayName: "Publish localizationArtifacts artifact"
  inputs:
    targetPath: "$(Build.Repository.LocalPath)\\artifacts\\localizationArtifacts\\"
    artifactName: "localizationArtifacts"
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

- task: NuGetCommand@2
  displayName: Publish public Nuget packages to nuget-build
  inputs:
    command: push
    packagesToPush: 'artifacts\nupkgs\*.nupkg;!artifacts\nupkgs\*.symbols.nupkg'
    nuGetFeedType: external
    allowPackageConflicts: true
    publishFeedCredentials : nuget-build-dnceng-public-feed
  condition: " and(succeeded(),eq(variables['PublishArtifactsToMyGet'], 'true'), eq(variables['BuildRTM'], 'false')) "

- task: MSBuild@1
  displayName: "Collect Build Symbols"
  inputs:
    solution: "build\\symbols.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/p:IsSymbolBuild=true /p:BuildRTM=$(BuildRTM)"
    maximumCpuCount: true
  condition: " and(succeeded(), eq(variables['IsOfficialBuild'], 'true')) "

- task: PublishPipelineArtifact@1
  displayName: "Publish symbols as pipeline artifacts"
  inputs:
    targetPath: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
    artifactName: "symbols - $(RtmLabel)"  #'symbols - NonRTM' artifacts downloaded in compliance.yml for APIScan@2 task.
  condition: " and(succeeded(), eq(variables['IsOfficialBuild'], 'true')) "

- task: artifactDropTask@0
  displayName: "Upload VSTS Drop"
  inputs:
    dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
    buildNumber: 'Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'
    sourcePath: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
    toLowerCase: false
    usePat: true
    dropMetadataContainerName: "DropMetadata-Product"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

- task: PowerShell@1
  displayName: "LocValidation: Verify VSIX"
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
    arguments: "-BuildRTM $(BuildRTM) -RepoRoot $(Build.Repository.LocalPath) -OutputLogsBasePath $(Build.Repository.LocalPath)\\logs -TmpPath $(Agent.TempDirectory) -ValidateVsix"
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: PowerShell@1
  displayName: "LocValidation: Verify Artifacts"
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
    arguments: "-BuildRTM $(BuildRTM) -RepoRoot $(Build.Repository.LocalPath) -OutputLogsBasePath $(Build.Repository.LocalPath)\\logs"
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: PublishPipelineArtifact@1
  displayName: "LocValidation: Publish Logs as an artifact"
  inputs:
    artifactName: LocValidationLogs
    targetPath: "$(Build.Repository.LocalPath)\\logs\\LocalizationValidation"
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

  # Use dotnet msbuild instead of MSBuild CLI.
  # Using MSBuild CLI results in an assembly binding failure for NuGet.Common.dll 4.4.0.3 because Microsoft.DotNet.Build.Tasks.Feed.dll references SleetLib.dll which references NuGet.Common 4.4.0.3.
  # The Microsoft.DotNet.Build.Tasks.Feed package includes NuGet.Common 4.9.0.6 and a binding redirection in Microsoft.DotNet.Build.Tasks.Feed.dll.config but the binding redirection is not processed.
  # This would probably solve it:  https://github.com/Microsoft/msbuild/issues/1309
- task: CmdLine@2
  displayName: "Publish to the .NET Core build asset registry (BAR)"
  inputs:
    script: dotnet msbuild $(Build.Repository.LocalPath)\build\publish.proj /t:PublishToBuildAssetRegistry /p:NuGetClientNupkgsDirectoryPath=$(Build.Repository.LocalPath)\artifacts\$(NupkgOutputDir) /p:BUILD_BUILDNUMBER=$(Build.BuildNumber) /p:BUILD_SOURCEBRANCH=$(Build.SourceBranchName) /p:BUILD_SOURCEVERSION=$(Build.SourceVersion) /p:BUILD_REPOSITORY_URI=$(Build.Repository.Uri)  /p:BUILD_REPOSITORY_NAME=$(Build.Repository.Name) /p:ArtifactsLogDir=$(Build.Repository.LocalPath)\artifacts\manifests\ /p:MaestroApiEndpoint=$(MaestroApiEndpoint) /p:MaestroAccessToken=$(MaestroAccessToken) /bl:$(Build.StagingDirectory)\binlog\PublishToBuildAssetRegistry.binlog
    workingDirectory: cli
    failOnStderr: true
  env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    DOTNET_MULTILEVEL_LOOKUP: true
  condition: " and(succeeded(),eq(variables['PublishArtifactsToDotNetBuildAssetRegistry'], 'true'), eq(variables['BuildRTM'], 'false')) "

- task: PublishPipelineArtifact@1
  displayName: "Publish binlogs"
  inputs:
    artifactName: binlog - $(System.JobName) - Attempt $(System.JobAttempt)
    targetPath: $(Build.StagingDirectory)\binlog
  condition: " and(succeeded(),eq(variables['PublishArtifactsToDotNetBuildAssetRegistry'], 'true'), eq(variables['BuildRTM'], 'false')) "

- task: MicroBuildCleanup@1
  displayName: "Perform Cleanup Tasks"
