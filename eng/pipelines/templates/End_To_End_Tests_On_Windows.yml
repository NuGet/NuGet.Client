steps:
- task: PowerShell@1
  displayName: "Define variables"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      $EndToEndTestCommandToRunPart = '"' + "Run-Test -Exclude '${env:PART}' -Verbose *>&1 | Tee-Object $(System.DefaultWorkingDirectory)\artifacts\EndToEnd\FullLog_$(Build.BuildNumber).txt" +'"'
      Write-Host "##vso[task.setvariable variable=EndToEndTestCommandToRunPart]$EndToEndTestCommandToRunPart"

- task: PowerShell@1
  displayName: "Print Environment Variables"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      Get-ChildItem Env: | Sort-Object Name | Format-Table -Wrap -AutoSize

- task: DownloadBuildArtifacts@0
  displayName: "Download Build artifacts"
  inputs:
    artifactName: "VS15"
    downloadPath: "$(Build.Repository.LocalPath)/artifacts"

- task: PowerShell@1
  displayName: "Bootstrap.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/Bootstrap.ps1"
    arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -verbose"

- task: PowerShell@1
  displayName: "SetupFunctionalTests.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/SetupFunctionalTests.ps1"

- task: PowerShell@1
  displayName: "SetupMachine.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/SetupMachine.ps1"

- task: PowerShell@1
  displayName: "InstallNuGetVSIX.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/InstallNuGetVSIX.ps1"
    arguments: "-NuGetDropPath $(System.DefaultWorkingDirectory)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -ProcessExitTimeoutInSeconds 180"
    failOnStandardError: "false"

- task: PowerShell@1
  displayName: "Collect VS Logs"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      Invoke-WebRequest -Uri $(CollectExeUrl) -OutFile $(System.DefaultWorkingDirectory)\\VSCollect.exe
      $(System.DefaultWorkingDirectory)\\VSCollect.exe -zip:$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\e2e-collectlogs.zip
  condition: "failed()"

- task: PowerShell@1
  displayName: "RunFunctionalTests.ps1 (stop on error)"
  timeoutInMinutes: 75
  continueOnError: "false"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/RunFunctionalTests.ps1"
    arguments: "-PMCCommand $(EndToEndTestCommandToRunPart) -PMCLaunchWaitTimeInSecs 30 -EachTestTimoutInSecs 600 -NuGetDropPath $(System.DefaultWorkingDirectory)\\artifacts -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -RunCounter $(Build.BuildNumber)"
  condition: "and(succeeded(), not(eq(variables['IsOfficialBuild'], 'true')))"

- task: PowerShell@1
  displayName: "RunFunctionalTests.ps1 (continue on error)"
  timeoutInMinutes: 75
  continueOnError: "true"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/RunFunctionalTests.ps1"
    arguments: "-PMCCommand $(EndToEndTestCommandToRunPart) -PMCLaunchWaitTimeInSecs 30 -EachTestTimoutInSecs 600 -NuGetDropPath $(System.DefaultWorkingDirectory)\\artifacts -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -RunCounter $(Build.BuildNumber)"
  condition: "and(succeeded(), eq(variables['IsOfficialBuild'], 'true'))"

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  inputs:
    testRunner: "JUnit"
    testResultsFiles: "*.xml"
    searchFolder: "$(System.DefaultWorkingDirectory)\\testresults"
    mergeTestResults: "true"
    testRunTitle: "NuGet.Client EndToEnd Tests On Windows"
  condition: "succeededOrFailed()"

- task: PowerShell@1
  displayName: "Initialize Git Commit Status on GitHub"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
      SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(System.AccessToken) -CommitSha $(Build.SourceVersion) -TestName "$env:AGENT_JOBNAME"
  condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"

- task: PowerShell@1
  displayName: "Kill running instances of DevEnv"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\e2etests\\VSUtils.ps1
      KillRunningInstancesOfVS (Get-LatestVSInstance -VersionRange (Get-VisualStudioVersionRangeFromConfig))
  condition: "always()"
