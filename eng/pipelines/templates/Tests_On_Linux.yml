steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: sdk
    version: 7.x
    installationPath: $(Agent.TempDirectory)/dotnet

- task: ShellScript@2
  displayName: "Run $(TestRunDisplayName) (continue on error)"
  continueOnError: "true"
  inputs:
    scriptPath: "scripts/funcTests/runFuncTests.sh"
    args: $(TestRunCommandLineArguments)
    disableAutoCwd: "true"
    cwd: "$(Build.Repository.LocalPath)"
  condition: "and(succeeded(), eq(variables['IsOfficialBuild'], 'true'))"

- task: ShellScript@2
  displayName: "Run $(TestRunDisplayName) (stop on error)"
  continueOnError: "false"
  inputs:
    scriptPath: "scripts/funcTests/runFuncTests.sh"
    args: $(TestRunCommandLineArguments)
    cwd: "$(Build.Repository.LocalPath)"
  condition: "and(succeeded(), not(eq(variables['IsOfficialBuild'], 'true')))"

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  inputs:
    testRunner: "VSTest"
    testResultsFiles: "*.trx"
    testRunTitle: "NuGet.Client $(TestRunDisplayName) On Linux"
    searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
  condition: "succeededOrFailed()"

- task: PowerShell@2
  displayName: "Initialize Git Commit Status on GitHub"
  inputs:
    targetType: "inline"
    script: |
      . $(Build.Repository.LocalPath)/scripts/utils/PostGitCommitStatus.ps1
      SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(System.AccessToken) -CommitSha $(Build.SourceVersion) -TestName "$(TestRunDisplayName) On Linux"
    failOnStderr: "true"
  condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"
