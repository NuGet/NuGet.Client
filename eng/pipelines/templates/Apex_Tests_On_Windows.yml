parameters:
  - name: dependsOn
    type: object
  - name: bootstrapperUrl
    type: string
  - name: runSettingsURI
    type: string
  - name: DartLabEnvironment
    type: string
  - name: condition
    type: string
  - name: variables
    type: object
  - name: testExecutionJobTimeoutInMinutes
    type: number
  - name: testMachineCleanUpStrategy
    type: string
    default: delete
    values:
      - delete
      - stop
  - name: isOfficialBuild
    type: boolean
    default: false
  - name: QBuildSessionId
    type: string

stages:
  - template: stages\visual-studio\single-runsettings.yml@DartLabTemplates
    parameters:
      name: VS_Apex_Tests
      displayName: Apex Tests On Windows
      condition: ${{parameters.condition}}
      dependsOn: ${{parameters.dependsOn}}
      variables:
        - name: bootstrapperUrl
          value: ${{parameters.bootstrapperUrl}}
        - ${{parameters.variables}}
      runSettingsURI: ${{parameters.runSettingsURI}}
      visualStudioBootstrapperURI: $(bootstrapperUrl)
      testLabPoolName: VS-Platform
      dartLabEnvironment: ${{parameters.DartLabEnvironment}}
      visualStudioSigning: Test
      testMachineDeploymentJobTimeoutInMinutes: 240
      testMachineConfigurationJobDisplayName: 'Apex Test Machine Configuration'
      testMachineDeploymentJobDisplayName: 'Apex Test Machine Deployment'
      testExecutionJobDisplayName: 'Apex Test Execution'
      testMachineCleanUpJobDisplayName: 'Apex Test Machine Clean Up'
      testRunContinueOnError: ${{ parameters.isOfficialBuild }}
      testExecutionJobTimeoutInMinutes: ${{parameters.testExecutionJobTimeoutInMinutes}}
      testMachineCleanUpStrategy: ${{parameters.testMachineCleanUpStrategy}}
      testAgentElevated: true
      preTestMachineConfigurationStepList:
      - template: \steps\powershell\execute-script.yml@DartLabTemplates
        parameters:
          displayName: Get Baseline Build ID using CloudBuild Session ID
          continueOnError: true
          filePath: $(DartLab.Path)\Scripts\AzureDevOps\Build\Get-BuildIdFromCloudBuildSessionID.ps1
          arguments: -ClientSecret '$(CloudBuild-ClientSecret)' -ClientID '$(CloudBuild-ClientID)' -SessionID '${{parameters.QBuildSessionId}}' -OutVariableName 'BaselineBuildID'
      
      - task: PowerShell@1
        displayName: "Get Baseline build commit ids"
        name: "getbaselinebuildcommitids"
        continueOnError: true
        inputs:
          scriptType: "inlineScript"
          inlineScript: |
            try {
            Write-Host "Getting Baseline build commit ids for build: '$(BaselineBuildID)'"
            
            $artifactName = 'BuildArtifacts'
            $baselineBuildsFile: $(Agent.TempDirectory)\BaselineBuilds.json

            $artifact = Get-BuildArtifact -InstanceURL 'https://dev.azure.com/devdiv' -ProjectName 'DevDiv' - 
            BuildID $(BaselineBuildID)  -ArtifactName $artifactName -OAuthAccessToken (ConvertTo-SecureString 
            '$(System.AccessToken)' -AsPlainText -Force)
            $containerName = $artifact.Resource.Data -Split '/' | Select-Object -Last 1
            $fileName = Join-Path $containerName 'BaselineBuilds.json'
            $jsonString = Read-BuildArtifactFile -InstanceURL 'https://dev.azure.com/devdiv' -ProjectName 'DevDiv' 
            -BuildID $bootstrapperBuildID  -ArtifactName $artifactName -FileName $fileName -OAuthAccessToken 
            (ConvertTo-SecureString '$(System.AccessToken)' -AsPlainText -Force)

            $jsonString | Out-File -FilePath $baselineBuildsFile

            $(DartLab.Path)\Scripts\VisualStudio\Build\Get-BaselineBuildCommitIDs.ps1 -BuildJson $baselineBuildsFile -OutVariableName "BaselineBuildCommitIds"
            } catch {
              Write-Host "##vso[task.LogIssue type=error;]Unable to get Baseline build commit ids: $_"
            }
      candidateBaselineBuilds: $(BaselineBuildCommitIds)
      preDeployAndRunTestsStepList:
        - task: PowerShell@1
          displayName: "Print Environment Variables"
          inputs:
            scriptType: "inlineScript"
            inlineScript: |
              Get-ChildItem Env: | Sort-Object Name | Format-Table -Wrap -AutoSize

        - task: DownloadBuildArtifacts@0
          displayName: "Download Build artifacts"
          inputs:
            artifactName: "VS15"
            downloadPath: "$(Build.Repository.LocalPath)/artifacts"

        - powershell: |
            $zipPath = "$(Build.Repository.Localpath)/artifacts/VS15/EndToEnd.zip"
            $dest = "$(System.DefaultWorkingDirectory)/artifacts/EndToEnd/"
            Write-Output "Extracting '$zipPath' to '$dest'"
            Expand-Archive -Path "$zipPath" -DestinationPath "$dest"
            $nugetExePath = "$(Build.Repository.Localpath)/artifacts/VS15/NuGet.exe"
            Write-Output "Copying '$nugetExePath' to '$dest'"
            Copy-Item -Path "$nugetExePath" -Destination "$dest"
          displayName: "Extract EndToEnd.zip"

        - task: PowerShell@1
          displayName: "SetupFunctionalTests.ps1"
          inputs:
            scriptName: "$(System.DefaultWorkingDirectory)/artifacts/EndToEnd/scripts/SetupFunctionalTests.ps1"
      postDeployAndRunTestsStepList:
        - task: PowerShell@1
          displayName: "Initialize Git Commit Status on GitHub"
          inputs:
            scriptType: "inlineScript"
            inlineScript: |
              . $(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\PostGitCommitStatus.ps1
              SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(System.AccessToken) -CommitSha $(Build.SourceVersion) -TestName "$(GitHubStatusName)"
          condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"

        - task: ComponentGovernanceComponentDetection@0
          displayName: 'Component Detection'
