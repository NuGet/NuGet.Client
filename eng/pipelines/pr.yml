parameters:
- name: RunUnitTestsOnWindows
  displayName: Run unit tests on Windows
  type: boolean
  default: true
- name: RunFunctionalTestsOnWindows
  displayName: Run functional tests on Windows
  type: boolean
  default: true
- name: RunUnitTestsOnLinux
  displayName: Run unit tests on Linux
  type: boolean
  default: true
- name: RunFunctionalTestsOnLinux
  displayName: Run functional tests on Linux
  type: boolean
  default: true
- name: RunUnitTestsOnMacOS
  displayName: Run unit tests on MacOS
  type: boolean
  default: true
- name: RunFunctionalTestsOnMacOS
  displayName: Run functional tests on MacOS
  type: boolean
  default: true

variables:
  DOTNET_NOLOGO: 1
  NUGET_EXPERIMENTAL_CHAIN_BUILD_RETRY_POLICY: 3,1000
  SkipSigning: true
  CI: true

trigger:
  branches:
    include:
    - dev
  paths:
    exclude:
    - '*.md'

pr:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - '*.md'

stages:
- ${{ if eq(parameters.RunUnitTestsOnWindows, true) }}:
  - stage:
    displayName: Unit Tests on Windows (.NET Framework 4.7.2)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Unit Tests on Windows (.NET Framework 4.7.2)
        osName: Windows
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          agentPool: NetCore-Public
          agentDemands: ImageOverride -equals Windows.VS2022Preview.Amd64.Open
        ${{ else }}:
          agentPool: VSEngSS-MicroBuild2022-1ES
        testType: Unit
        testTargetFramework: net472

- ${{ if eq(parameters.RunUnitTestsOnWindows, true) }}:
  - stage:
    displayName: Unit Tests on Windows (.NET 8.0)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Unit Tests on Windows (.NET 8.0)
        osName: Windows
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          agentPool: NetCore-Public
          agentDemands: ImageOverride -equals Windows.VS2022Preview.Amd64.Open
        ${{ else }}:
          agentPool: VSEngSS-MicroBuild2022-1ES
        testType: Unit
        testTargetFramework: net8.0

- ${{ if eq(parameters.RunUnitTestsOnWindows, true) }}:
  - stage:
    displayName: Unit Tests on Windows (.NET Core 3.1)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Unit Tests on Windows (.NET Core 3.1)
        osName: Windows
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          agentPool: NetCore-Public
          agentDemands: ImageOverride -equals Windows.VS2022Preview.Amd64.Open
        ${{ else }}:
          agentPool: VSEngSS-MicroBuild2022-1ES
        testType: Unit
        testTargetFramework: netcoreapp3.1

- ${{ if eq(parameters.RunFunctionalTestsOnWindows, true) }}:
  - stage:
    displayName: Functional Tests on Windows (.NET Framework 4.7.2)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Functional Tests on Windows (.NET Framework 4.7.2)
        osName: Windows
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          agentPool: NetCore-Public
          agentDemands: ImageOverride -equals Windows.VS2022Preview.Amd64.Open
        ${{ else }}:
          agentPool: VSEngSS-MicroBuild2022-1ES
        testType: Functional
        testTargetFramework: net472
        timeoutInMinutes: 60

- ${{ if eq(parameters.RunFunctionalTestsOnWindows, true) }}:
  - stage:
    displayName: Functional Tests on Windows (.NET 8.0)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Functional Tests on Windows (.NET 8.0)
        osName: Windows
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          agentPool: NetCore-Public
          agentDemands: ImageOverride -equals Windows.VS2022Preview.Amd64.Open
        ${{ else }}:
          agentPool: VSEngSS-MicroBuild2022-1ES
        testType: Functional
        testTargetFramework: net8.0
        timeoutInMinutes: 60

- ${{ if eq(parameters.RunFunctionalTestsOnWindows, true) }}:
  - stage:
    displayName: Functional Tests on Windows (.NET Core 3.1)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Functional Tests on Windows (.NET Core 3.1)
        osName: Windows
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          agentPool: NetCore-Public
          agentDemands: ImageOverride -equals Windows.VS2022Preview.Amd64.Open
        ${{ else }}:
          agentPool: VSEngSS-MicroBuild2022-1ES
        testType: Functional
        testTargetFramework: netcoreapp3.1
        timeoutInMinutes: 60

- ${{ if eq(parameters.RunUnitTestsOnLinux, true) }}:
  - stage:
    displayName: Unit Tests on Linux (.NET 8.0)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Unit Tests on Linux (.NET 8.0)
        osName: Linux
        vmImage: ubuntu-latest
        testType: Unit
        testTargetFramework: net8.0

- ${{ if eq(parameters.RunUnitTestsOnLinux, true) }}:
  - stage:
    displayName: Unit Tests on Linux (.NET Core 3.1)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Unit Tests on Linux (.NET Core 3.1)
        osName: Linux
        vmImage: ubuntu-latest
        testType: Unit
        testTargetFramework: netcoreapp3.1

- ${{ if eq(parameters.RunFunctionalTestsOnLinux, true) }}:
  - stage:
    displayName: Functional Tests on Linux (.NET 8.0)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Functional Tests on Linux (.NET 8.0)
        osName: Linux
        vmImage: ubuntu-latest
        testType: Functional
        testTargetFramework: net8.0
        timeoutInMinutes: 60

- ${{ if eq(parameters.RunFunctionalTestsOnLinux, true) }}:
  - stage:
    displayName: Functional Tests on Linux (.NET Core 3.1)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Functional Tests on Linux (.NET Core 3.1)
        osName: Linux
        vmImage: ubuntu-latest
        testType: Functional
        testTargetFramework: netcoreapp3.1

- ${{ if eq(parameters.RunUnitTestsOnMacOS, true) }}:
  - stage:
    displayName: Unit Tests on MacOS (.NET 8.0)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Unit Tests on MacOS (.NET 8.0)
        osName: MacOS
        vmImage: macos-latest
        testType: Unit
        testTargetFramework: net8.0

- ${{ if eq(parameters.RunUnitTestsOnMacOS, true) }}:
  - stage:
    displayName: Unit Tests on MacOS (.NET Core 3.1)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Unit Tests on MacOS (.NET Core 3.1)
        osName: MacOS
        vmImage: macos-latest
        testType: Unit
        testTargetFramework: netcoreapp3.1

- ${{ if eq(parameters.RunFunctionalTestsOnMacOS, true) }}:
  - stage:
    displayName: Functional Tests on MacOS (.NET 8.0)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Functional Tests on MacOS (.NET 8.0)
        osName: MacOS
        vmImage: macos-latest
        testType: Functional
        testTargetFramework: net8.0
        timeoutInMinutes: 60

- ${{ if eq(parameters.RunFunctionalTestsOnMacOS, true) }}:
  - stage:
    displayName: Functional Tests on MacOS (.NET Core 3.1)
    dependsOn: []
    jobs:
    - template: pr.job.yml
      parameters:
        displayName: Functional Tests on MacOS (.NET Core 3.1)
        osName: MacOS
        vmImage: macos-latest
        testType: Functional
        testTargetFramework: netcoreapp3.1

  - stage:
    displayName: Source Build
    dependsOn: []
    jobs:
    - job:
      displayName: Source Build
      timeoutInMinutes: 15
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: PowerShell@2
        displayName: "Build source-build"
        inputs:
          targetType: "inline"
          script: |
            ./eng/dotnet-build/build.sh --source-build

  - stage:
    displayName: Static Analysis
    dependsOn: []
    jobs:
    - job:
      displayName: Static Analysis
      timeoutInMinutes: 15
      pool:
        vmImage: windows-latest
      steps:
      - task: MSBuild@1
        displayName: "Restore"
        inputs:
          solution: "NuGet.sln"
          configuration: "Release"
          msbuildArguments: -t:Restore -v:m
      - task: MSBuild@1
        displayName: "Build"
        inputs:
          solution: "NuGet.sln"
          configuration: "Release"
          msbuildArguments: -t:Build -v:m
      - task: MSBuild@1
        displayName: "Pack"
        inputs:
          solution: "build/build.proj"
          configuration: "Release"
          msbuildArguments: -t:Pack -v:m
      - task: PowerShell@2
        displayName: "Ensure all projects are in solution"
        condition: "succeededOrFailed()"
        inputs:
          targetType: "inline"
          script: |
            try {
              $slnProjects = & dotnet sln list | Select-Object -Skip 2 | ForEach-Object { "$PWD\$_" } | sort
              "Solution contains $($slnProjects.Length) projects"
              $fsProjects = gci -Recurse -Filter *.csproj | ForEach-Object { $_.FullName } | Where-Object { $_ -notlike "*\EndToEnd\*" -and $_ -notlike "*\bin\*" -and $_ -notlike "*\compiler\resources\*" -and $_ -notlike "*\Assets\*" } | sort
              "Repo contains $($fsProjects.Length) projects"
              $diff = @(Compare-Object -ReferenceObject $fsProjects -DifferenceObject $slnProjects)
              $diff
              if ($diff.length -gt 0)
              {
                throw "Repo has project file(s) not in NuGet.sln"
              }
            }
            catch
            {
              Write-Host "##vso[task.LogIssue type=error;]$Error[0]"
              exit 1
            }
      - task: PowerShell@2
        displayName: "Ensure all Client SDK package dependencies exist on nuget.org"
        condition: "succeededOrFailed()"
        inputs:
          targetType: "inline"
          script: |
            $nupkgs = Get-ChildItem $(System.ArtifactsDirectory)/nupkgs/*.nupkg -Exclude *.symbols.nupkg
            if ($nupkgs.Count -eq 0) { throw "Could not find nupkgs" }
            "nupkgs:"
            $nupkgs.FullName
            ""
            "Building validation tool"
            dotnet run --project tools-local/ensure-nupkg-dependencies-on-source/ -- $nupkgs -s https://api.nuget.org/v3/index.json
            if ($LASTEXITCODE -ne 0) { throw "Build was not successful" }
            ""
            "Running validation tool"
            dotnet run --project tools-local/ensure-nupkg-dependencies-on-source/ --no-build -- $nupkgs -s https://api.nuget.org/v3/index.json
      - task: PowerShell@2
        displayName: "Check whitespace"
        condition: "succeededOrFailed()"
        inputs:
          targetType: "inline"
          script: dotnet format whitespace --verify-no-changes NuGet.sln
