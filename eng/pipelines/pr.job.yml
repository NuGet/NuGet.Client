parameters:
- name: displayName
- name: osName
- name: agentPool
  type: string
  default: Azure Pipelines
- name: agentDemands
  type: string
  default: none
- name: vmImage
  type: string
  default: none
- name: testType
- name: testTargetFramework
- name: timeoutInMinutes
  type: number
  default: 15

jobs:
- job:
  displayName: ${{ parameters.displayName }}
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  variables:
    - name: TestType
      value: ${{ parameters.testType }}
    - name: TestTargetFramework
      value: ${{ parameters.testTargetFramework }}
    - name: TestResultsDirectory
      ${{ if eq(parameters.osName, 'Windows') }}:
        value: $(Agent.TempDirectory)\TestResults
      ${{ else }}:
        value: $(Agent.TempDirectory)/TestResults
    - name: BinlogDirectory
      ${{ if eq(parameters.osName, 'Windows') }}:
        value: $(Agent.TempDirectory)\binlogs\
      ${{ else }}:
        value: $(Agent.TempDirectory)/binlogs/
  pool:
    name: ${{ parameters.agentPool }}
    ${{ if ne(parameters.vmImage, 'none') }}:
      vmImage: ${{ parameters.vmImage }}
    ${{ if ne(parameters.agentDemands, 'none') }}:
      demands: ${{ parameters.agentDemands }}

  steps:
  - ${{ if eq(parameters.osName, 'Windows') }}:
    - task: PowerShell@2
      displayName: Run configure.ps1
      inputs:
        filePath: configure.ps1
  - ${{ else }}:
    - task: Bash@3
      displayName: Run configure.sh
      env:
        RESTORE_NUGET_PACKAGES: false
      inputs:
        filePath: configure.sh

  - ${{ if eq(parameters.osName, 'Windows') }}:
    - script: SET | SORT
      displayName: Log Environment Variables
  - ${{ else }}:
    - script: env | sort -f
      displayName: Log Environment Variables

  - ${{ if eq(parameters.osName, 'Windows') }}:
    - task: MSBuild@1
      displayName: Restore and Build $(TestType) Test Projects
      inputs:
        solution: NuGet.sln
        msbuildArchitecture: x64
        msbuildArguments: --binarylogger:"$(BinlogDirectory)01-RestoreAndBuild.binlog"
  - ${{ else }}:
    - task: DotNetCoreCLI@2
      displayName: Restore and Build $(TestType) Test Projects
      inputs:
        command: build
        arguments: --binarylogger:"$(BinlogDirectory)01-RestoreAndBuild.binlog"

  - task: DotNetCoreCLI@2
    displayName: Run $(TestType) Tests 
    condition: succeeded()
    inputs:
      command: test
      arguments: --no-restore --restore:false --no-build --framework $(TestTargetFramework) --blame --logger trx --results-directory $(TestResultsDirectory) --binarylogger:"$(BinlogDirectory)02-RunTests.binlog"
      publishTestResults: false

  - task: PublishTestResults@2
    displayName: Publish $(TestType) Tests Results 
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**/*.trx'
      searchFolder: $(TestResultsDirectory)
      mergeTestResults: true
      failTaskOnMissingResultsFile: true
      testRunTitle: ${{ parameters.osName }} $(TestType) Tests ($(TestTargetFramework))

  - task: PublishPipelineArtifact@1
    displayName: Publish MSBuild Binary Logs
    condition: or(failed(), eq(variables['System.Debug'], 'true'))
    inputs:
      targetPath: $(BinlogDirectory)
      artifact: binlog - $(System.JobDisplayName) - Attempt $(System.JobAttempt)
